
taki na chwile tez.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c20  08000140  08000140  00010140  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000040c  08007d60  08007d60  00017d60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800816c  0800816c  000201dc  2**0
                  CONTENTS
  4 .ARM          00000008  0800816c  0800816c  0001816c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008174  08008174  000201dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008174  08008174  00018174  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008178  08008178  00018178  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  0800817c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000208  200001dc  08008358  000201dc  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200003e4  08008358  000203e4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011920  00000000  00000000  00020205  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002dcf  00000000  00000000  00031b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000e90  00000000  00000000  000348f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000d38  00000000  00000000  00035788  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019601  00000000  00000000  000364c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011999  00000000  00000000  0004fac1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000981dd  00000000  00000000  0006145a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000f9637  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d24  00000000  00000000  000f968c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .stab         0000003c  00000000  00000000  000fe3b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 22 .stabstr      00000076  00000000  00000000  000fe3ec  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000140 <__do_global_dtors_aux>:
 8000140:	b510      	push	{r4, lr}
 8000142:	4c05      	ldr	r4, [pc, #20]	; (8000158 <__do_global_dtors_aux+0x18>)
 8000144:	7823      	ldrb	r3, [r4, #0]
 8000146:	b933      	cbnz	r3, 8000156 <__do_global_dtors_aux+0x16>
 8000148:	4b04      	ldr	r3, [pc, #16]	; (800015c <__do_global_dtors_aux+0x1c>)
 800014a:	b113      	cbz	r3, 8000152 <__do_global_dtors_aux+0x12>
 800014c:	4804      	ldr	r0, [pc, #16]	; (8000160 <__do_global_dtors_aux+0x20>)
 800014e:	f3af 8000 	nop.w
 8000152:	2301      	movs	r3, #1
 8000154:	7023      	strb	r3, [r4, #0]
 8000156:	bd10      	pop	{r4, pc}
 8000158:	200001dc 	.word	0x200001dc
 800015c:	00000000 	.word	0x00000000
 8000160:	08007d48 	.word	0x08007d48

08000164 <frame_dummy>:
 8000164:	b508      	push	{r3, lr}
 8000166:	4b03      	ldr	r3, [pc, #12]	; (8000174 <frame_dummy+0x10>)
 8000168:	b11b      	cbz	r3, 8000172 <frame_dummy+0xe>
 800016a:	4903      	ldr	r1, [pc, #12]	; (8000178 <frame_dummy+0x14>)
 800016c:	4803      	ldr	r0, [pc, #12]	; (800017c <frame_dummy+0x18>)
 800016e:	f3af 8000 	nop.w
 8000172:	bd08      	pop	{r3, pc}
 8000174:	00000000 	.word	0x00000000
 8000178:	200001e0 	.word	0x200001e0
 800017c:	08007d48 	.word	0x08007d48

08000180 <strlen>:
 8000180:	4603      	mov	r3, r0
 8000182:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000186:	2a00      	cmp	r2, #0
 8000188:	d1fb      	bne.n	8000182 <strlen+0x2>
 800018a:	1a18      	subs	r0, r3, r0
 800018c:	3801      	subs	r0, #1
 800018e:	4770      	bx	lr

08000190 <__aeabi_drsub>:
 8000190:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000194:	e002      	b.n	800019c <__adddf3>
 8000196:	bf00      	nop

08000198 <__aeabi_dsub>:
 8000198:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800019c <__adddf3>:
 800019c:	b530      	push	{r4, r5, lr}
 800019e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001a6:	ea94 0f05 	teq	r4, r5
 80001aa:	bf08      	it	eq
 80001ac:	ea90 0f02 	teqeq	r0, r2
 80001b0:	bf1f      	itttt	ne
 80001b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80001ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001c2:	f000 80e2 	beq.w	800038a <__adddf3+0x1ee>
 80001c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001ce:	bfb8      	it	lt
 80001d0:	426d      	neglt	r5, r5
 80001d2:	dd0c      	ble.n	80001ee <__adddf3+0x52>
 80001d4:	442c      	add	r4, r5
 80001d6:	ea80 0202 	eor.w	r2, r0, r2
 80001da:	ea81 0303 	eor.w	r3, r1, r3
 80001de:	ea82 0000 	eor.w	r0, r2, r0
 80001e2:	ea83 0101 	eor.w	r1, r3, r1
 80001e6:	ea80 0202 	eor.w	r2, r0, r2
 80001ea:	ea81 0303 	eor.w	r3, r1, r3
 80001ee:	2d36      	cmp	r5, #54	; 0x36
 80001f0:	bf88      	it	hi
 80001f2:	bd30      	pophi	{r4, r5, pc}
 80001f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000200:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000204:	d002      	beq.n	800020c <__adddf3+0x70>
 8000206:	4240      	negs	r0, r0
 8000208:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800020c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000210:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000214:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000218:	d002      	beq.n	8000220 <__adddf3+0x84>
 800021a:	4252      	negs	r2, r2
 800021c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000220:	ea94 0f05 	teq	r4, r5
 8000224:	f000 80a7 	beq.w	8000376 <__adddf3+0x1da>
 8000228:	f1a4 0401 	sub.w	r4, r4, #1
 800022c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000230:	db0d      	blt.n	800024e <__adddf3+0xb2>
 8000232:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000236:	fa22 f205 	lsr.w	r2, r2, r5
 800023a:	1880      	adds	r0, r0, r2
 800023c:	f141 0100 	adc.w	r1, r1, #0
 8000240:	fa03 f20e 	lsl.w	r2, r3, lr
 8000244:	1880      	adds	r0, r0, r2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	4159      	adcs	r1, r3
 800024c:	e00e      	b.n	800026c <__adddf3+0xd0>
 800024e:	f1a5 0520 	sub.w	r5, r5, #32
 8000252:	f10e 0e20 	add.w	lr, lr, #32
 8000256:	2a01      	cmp	r2, #1
 8000258:	fa03 fc0e 	lsl.w	ip, r3, lr
 800025c:	bf28      	it	cs
 800025e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000262:	fa43 f305 	asr.w	r3, r3, r5
 8000266:	18c0      	adds	r0, r0, r3
 8000268:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800026c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000270:	d507      	bpl.n	8000282 <__adddf3+0xe6>
 8000272:	f04f 0e00 	mov.w	lr, #0
 8000276:	f1dc 0c00 	rsbs	ip, ip, #0
 800027a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800027e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000282:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000286:	d31b      	bcc.n	80002c0 <__adddf3+0x124>
 8000288:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800028c:	d30c      	bcc.n	80002a8 <__adddf3+0x10c>
 800028e:	0849      	lsrs	r1, r1, #1
 8000290:	ea5f 0030 	movs.w	r0, r0, rrx
 8000294:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000298:	f104 0401 	add.w	r4, r4, #1
 800029c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002a4:	f080 809a 	bcs.w	80003dc <__adddf3+0x240>
 80002a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002ac:	bf08      	it	eq
 80002ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002b2:	f150 0000 	adcs.w	r0, r0, #0
 80002b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80002ba:	ea41 0105 	orr.w	r1, r1, r5
 80002be:	bd30      	pop	{r4, r5, pc}
 80002c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002c4:	4140      	adcs	r0, r0
 80002c6:	eb41 0101 	adc.w	r1, r1, r1
 80002ca:	3c01      	subs	r4, #1
 80002cc:	bf28      	it	cs
 80002ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002d2:	d2e9      	bcs.n	80002a8 <__adddf3+0x10c>
 80002d4:	f091 0f00 	teq	r1, #0
 80002d8:	bf04      	itt	eq
 80002da:	4601      	moveq	r1, r0
 80002dc:	2000      	moveq	r0, #0
 80002de:	fab1 f381 	clz	r3, r1
 80002e2:	bf08      	it	eq
 80002e4:	3320      	addeq	r3, #32
 80002e6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ea:	f1b3 0220 	subs.w	r2, r3, #32
 80002ee:	da0c      	bge.n	800030a <__adddf3+0x16e>
 80002f0:	320c      	adds	r2, #12
 80002f2:	dd08      	ble.n	8000306 <__adddf3+0x16a>
 80002f4:	f102 0c14 	add.w	ip, r2, #20
 80002f8:	f1c2 020c 	rsb	r2, r2, #12
 80002fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000300:	fa21 f102 	lsr.w	r1, r1, r2
 8000304:	e00c      	b.n	8000320 <__adddf3+0x184>
 8000306:	f102 0214 	add.w	r2, r2, #20
 800030a:	bfd8      	it	le
 800030c:	f1c2 0c20 	rsble	ip, r2, #32
 8000310:	fa01 f102 	lsl.w	r1, r1, r2
 8000314:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000318:	bfdc      	itt	le
 800031a:	ea41 010c 	orrle.w	r1, r1, ip
 800031e:	4090      	lslle	r0, r2
 8000320:	1ae4      	subs	r4, r4, r3
 8000322:	bfa2      	ittt	ge
 8000324:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000328:	4329      	orrge	r1, r5
 800032a:	bd30      	popge	{r4, r5, pc}
 800032c:	ea6f 0404 	mvn.w	r4, r4
 8000330:	3c1f      	subs	r4, #31
 8000332:	da1c      	bge.n	800036e <__adddf3+0x1d2>
 8000334:	340c      	adds	r4, #12
 8000336:	dc0e      	bgt.n	8000356 <__adddf3+0x1ba>
 8000338:	f104 0414 	add.w	r4, r4, #20
 800033c:	f1c4 0220 	rsb	r2, r4, #32
 8000340:	fa20 f004 	lsr.w	r0, r0, r4
 8000344:	fa01 f302 	lsl.w	r3, r1, r2
 8000348:	ea40 0003 	orr.w	r0, r0, r3
 800034c:	fa21 f304 	lsr.w	r3, r1, r4
 8000350:	ea45 0103 	orr.w	r1, r5, r3
 8000354:	bd30      	pop	{r4, r5, pc}
 8000356:	f1c4 040c 	rsb	r4, r4, #12
 800035a:	f1c4 0220 	rsb	r2, r4, #32
 800035e:	fa20 f002 	lsr.w	r0, r0, r2
 8000362:	fa01 f304 	lsl.w	r3, r1, r4
 8000366:	ea40 0003 	orr.w	r0, r0, r3
 800036a:	4629      	mov	r1, r5
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	fa21 f004 	lsr.w	r0, r1, r4
 8000372:	4629      	mov	r1, r5
 8000374:	bd30      	pop	{r4, r5, pc}
 8000376:	f094 0f00 	teq	r4, #0
 800037a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800037e:	bf06      	itte	eq
 8000380:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000384:	3401      	addeq	r4, #1
 8000386:	3d01      	subne	r5, #1
 8000388:	e74e      	b.n	8000228 <__adddf3+0x8c>
 800038a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800038e:	bf18      	it	ne
 8000390:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000394:	d029      	beq.n	80003ea <__adddf3+0x24e>
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	d005      	beq.n	80003ae <__adddf3+0x212>
 80003a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80003a6:	bf04      	itt	eq
 80003a8:	4619      	moveq	r1, r3
 80003aa:	4610      	moveq	r0, r2
 80003ac:	bd30      	pop	{r4, r5, pc}
 80003ae:	ea91 0f03 	teq	r1, r3
 80003b2:	bf1e      	ittt	ne
 80003b4:	2100      	movne	r1, #0
 80003b6:	2000      	movne	r0, #0
 80003b8:	bd30      	popne	{r4, r5, pc}
 80003ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003be:	d105      	bne.n	80003cc <__adddf3+0x230>
 80003c0:	0040      	lsls	r0, r0, #1
 80003c2:	4149      	adcs	r1, r1
 80003c4:	bf28      	it	cs
 80003c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80003ca:	bd30      	pop	{r4, r5, pc}
 80003cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003d0:	bf3c      	itt	cc
 80003d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003d6:	bd30      	popcc	{r4, r5, pc}
 80003d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003e4:	f04f 0000 	mov.w	r0, #0
 80003e8:	bd30      	pop	{r4, r5, pc}
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf1a      	itte	ne
 80003f0:	4619      	movne	r1, r3
 80003f2:	4610      	movne	r0, r2
 80003f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003f8:	bf1c      	itt	ne
 80003fa:	460b      	movne	r3, r1
 80003fc:	4602      	movne	r2, r0
 80003fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000402:	bf06      	itte	eq
 8000404:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000408:	ea91 0f03 	teqeq	r1, r3
 800040c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000410:	bd30      	pop	{r4, r5, pc}
 8000412:	bf00      	nop

08000414 <__aeabi_ui2d>:
 8000414:	f090 0f00 	teq	r0, #0
 8000418:	bf04      	itt	eq
 800041a:	2100      	moveq	r1, #0
 800041c:	4770      	bxeq	lr
 800041e:	b530      	push	{r4, r5, lr}
 8000420:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000424:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000428:	f04f 0500 	mov.w	r5, #0
 800042c:	f04f 0100 	mov.w	r1, #0
 8000430:	e750      	b.n	80002d4 <__adddf3+0x138>
 8000432:	bf00      	nop

08000434 <__aeabi_i2d>:
 8000434:	f090 0f00 	teq	r0, #0
 8000438:	bf04      	itt	eq
 800043a:	2100      	moveq	r1, #0
 800043c:	4770      	bxeq	lr
 800043e:	b530      	push	{r4, r5, lr}
 8000440:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000444:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000448:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800044c:	bf48      	it	mi
 800044e:	4240      	negmi	r0, r0
 8000450:	f04f 0100 	mov.w	r1, #0
 8000454:	e73e      	b.n	80002d4 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_f2d>:
 8000458:	0042      	lsls	r2, r0, #1
 800045a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800045e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000462:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000466:	bf1f      	itttt	ne
 8000468:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800046c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000470:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000474:	4770      	bxne	lr
 8000476:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800047a:	bf08      	it	eq
 800047c:	4770      	bxeq	lr
 800047e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000482:	bf04      	itt	eq
 8000484:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000488:	4770      	bxeq	lr
 800048a:	b530      	push	{r4, r5, lr}
 800048c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000490:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000494:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000498:	e71c      	b.n	80002d4 <__adddf3+0x138>
 800049a:	bf00      	nop

0800049c <__aeabi_ul2d>:
 800049c:	ea50 0201 	orrs.w	r2, r0, r1
 80004a0:	bf08      	it	eq
 80004a2:	4770      	bxeq	lr
 80004a4:	b530      	push	{r4, r5, lr}
 80004a6:	f04f 0500 	mov.w	r5, #0
 80004aa:	e00a      	b.n	80004c2 <__aeabi_l2d+0x16>

080004ac <__aeabi_l2d>:
 80004ac:	ea50 0201 	orrs.w	r2, r0, r1
 80004b0:	bf08      	it	eq
 80004b2:	4770      	bxeq	lr
 80004b4:	b530      	push	{r4, r5, lr}
 80004b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80004ba:	d502      	bpl.n	80004c2 <__aeabi_l2d+0x16>
 80004bc:	4240      	negs	r0, r0
 80004be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004ce:	f43f aed8 	beq.w	8000282 <__adddf3+0xe6>
 80004d2:	f04f 0203 	mov.w	r2, #3
 80004d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004da:	bf18      	it	ne
 80004dc:	3203      	addne	r2, #3
 80004de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004e2:	bf18      	it	ne
 80004e4:	3203      	addne	r2, #3
 80004e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ea:	f1c2 0320 	rsb	r3, r2, #32
 80004ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80004f2:	fa20 f002 	lsr.w	r0, r0, r2
 80004f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004fa:	ea40 000e 	orr.w	r0, r0, lr
 80004fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000502:	4414      	add	r4, r2
 8000504:	e6bd      	b.n	8000282 <__adddf3+0xe6>
 8000506:	bf00      	nop

08000508 <__aeabi_dmul>:
 8000508:	b570      	push	{r4, r5, r6, lr}
 800050a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800050e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000512:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000516:	bf1d      	ittte	ne
 8000518:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800051c:	ea94 0f0c 	teqne	r4, ip
 8000520:	ea95 0f0c 	teqne	r5, ip
 8000524:	f000 f8de 	bleq	80006e4 <__aeabi_dmul+0x1dc>
 8000528:	442c      	add	r4, r5
 800052a:	ea81 0603 	eor.w	r6, r1, r3
 800052e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000532:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000536:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800053a:	bf18      	it	ne
 800053c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000540:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000544:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000548:	d038      	beq.n	80005bc <__aeabi_dmul+0xb4>
 800054a:	fba0 ce02 	umull	ip, lr, r0, r2
 800054e:	f04f 0500 	mov.w	r5, #0
 8000552:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000556:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800055a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800055e:	f04f 0600 	mov.w	r6, #0
 8000562:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000566:	f09c 0f00 	teq	ip, #0
 800056a:	bf18      	it	ne
 800056c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000570:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000574:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000578:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800057c:	d204      	bcs.n	8000588 <__aeabi_dmul+0x80>
 800057e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000582:	416d      	adcs	r5, r5
 8000584:	eb46 0606 	adc.w	r6, r6, r6
 8000588:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800058c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000590:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000594:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000598:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800059c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005a0:	bf88      	it	hi
 80005a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005a6:	d81e      	bhi.n	80005e6 <__aeabi_dmul+0xde>
 80005a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005ac:	bf08      	it	eq
 80005ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005b2:	f150 0000 	adcs.w	r0, r0, #0
 80005b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ba:	bd70      	pop	{r4, r5, r6, pc}
 80005bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80005c0:	ea46 0101 	orr.w	r1, r6, r1
 80005c4:	ea40 0002 	orr.w	r0, r0, r2
 80005c8:	ea81 0103 	eor.w	r1, r1, r3
 80005cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005d0:	bfc2      	ittt	gt
 80005d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005da:	bd70      	popgt	{r4, r5, r6, pc}
 80005dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005e0:	f04f 0e00 	mov.w	lr, #0
 80005e4:	3c01      	subs	r4, #1
 80005e6:	f300 80ab 	bgt.w	8000740 <__aeabi_dmul+0x238>
 80005ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ee:	bfde      	ittt	le
 80005f0:	2000      	movle	r0, #0
 80005f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005f6:	bd70      	pople	{r4, r5, r6, pc}
 80005f8:	f1c4 0400 	rsb	r4, r4, #0
 80005fc:	3c20      	subs	r4, #32
 80005fe:	da35      	bge.n	800066c <__aeabi_dmul+0x164>
 8000600:	340c      	adds	r4, #12
 8000602:	dc1b      	bgt.n	800063c <__aeabi_dmul+0x134>
 8000604:	f104 0414 	add.w	r4, r4, #20
 8000608:	f1c4 0520 	rsb	r5, r4, #32
 800060c:	fa00 f305 	lsl.w	r3, r0, r5
 8000610:	fa20 f004 	lsr.w	r0, r0, r4
 8000614:	fa01 f205 	lsl.w	r2, r1, r5
 8000618:	ea40 0002 	orr.w	r0, r0, r2
 800061c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000620:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000624:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000628:	fa21 f604 	lsr.w	r6, r1, r4
 800062c:	eb42 0106 	adc.w	r1, r2, r6
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 040c 	rsb	r4, r4, #12
 8000640:	f1c4 0520 	rsb	r5, r4, #32
 8000644:	fa00 f304 	lsl.w	r3, r0, r4
 8000648:	fa20 f005 	lsr.w	r0, r0, r5
 800064c:	fa01 f204 	lsl.w	r2, r1, r4
 8000650:	ea40 0002 	orr.w	r0, r0, r2
 8000654:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000658:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800065c:	f141 0100 	adc.w	r1, r1, #0
 8000660:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000664:	bf08      	it	eq
 8000666:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800066a:	bd70      	pop	{r4, r5, r6, pc}
 800066c:	f1c4 0520 	rsb	r5, r4, #32
 8000670:	fa00 f205 	lsl.w	r2, r0, r5
 8000674:	ea4e 0e02 	orr.w	lr, lr, r2
 8000678:	fa20 f304 	lsr.w	r3, r0, r4
 800067c:	fa01 f205 	lsl.w	r2, r1, r5
 8000680:	ea43 0302 	orr.w	r3, r3, r2
 8000684:	fa21 f004 	lsr.w	r0, r1, r4
 8000688:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800068c:	fa21 f204 	lsr.w	r2, r1, r4
 8000690:	ea20 0002 	bic.w	r0, r0, r2
 8000694:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000698:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800069c:	bf08      	it	eq
 800069e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006a2:	bd70      	pop	{r4, r5, r6, pc}
 80006a4:	f094 0f00 	teq	r4, #0
 80006a8:	d10f      	bne.n	80006ca <__aeabi_dmul+0x1c2>
 80006aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006ae:	0040      	lsls	r0, r0, #1
 80006b0:	eb41 0101 	adc.w	r1, r1, r1
 80006b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80006b8:	bf08      	it	eq
 80006ba:	3c01      	subeq	r4, #1
 80006bc:	d0f7      	beq.n	80006ae <__aeabi_dmul+0x1a6>
 80006be:	ea41 0106 	orr.w	r1, r1, r6
 80006c2:	f095 0f00 	teq	r5, #0
 80006c6:	bf18      	it	ne
 80006c8:	4770      	bxne	lr
 80006ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80006ce:	0052      	lsls	r2, r2, #1
 80006d0:	eb43 0303 	adc.w	r3, r3, r3
 80006d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006d8:	bf08      	it	eq
 80006da:	3d01      	subeq	r5, #1
 80006dc:	d0f7      	beq.n	80006ce <__aeabi_dmul+0x1c6>
 80006de:	ea43 0306 	orr.w	r3, r3, r6
 80006e2:	4770      	bx	lr
 80006e4:	ea94 0f0c 	teq	r4, ip
 80006e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ec:	bf18      	it	ne
 80006ee:	ea95 0f0c 	teqne	r5, ip
 80006f2:	d00c      	beq.n	800070e <__aeabi_dmul+0x206>
 80006f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f8:	bf18      	it	ne
 80006fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006fe:	d1d1      	bne.n	80006a4 <__aeabi_dmul+0x19c>
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000712:	bf06      	itte	eq
 8000714:	4610      	moveq	r0, r2
 8000716:	4619      	moveq	r1, r3
 8000718:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800071c:	d019      	beq.n	8000752 <__aeabi_dmul+0x24a>
 800071e:	ea94 0f0c 	teq	r4, ip
 8000722:	d102      	bne.n	800072a <__aeabi_dmul+0x222>
 8000724:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000728:	d113      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800072a:	ea95 0f0c 	teq	r5, ip
 800072e:	d105      	bne.n	800073c <__aeabi_dmul+0x234>
 8000730:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000734:	bf1c      	itt	ne
 8000736:	4610      	movne	r0, r2
 8000738:	4619      	movne	r1, r3
 800073a:	d10a      	bne.n	8000752 <__aeabi_dmul+0x24a>
 800073c:	ea81 0103 	eor.w	r1, r1, r3
 8000740:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000744:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000748:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800074c:	f04f 0000 	mov.w	r0, #0
 8000750:	bd70      	pop	{r4, r5, r6, pc}
 8000752:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000756:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800075a:	bd70      	pop	{r4, r5, r6, pc}

0800075c <__aeabi_ddiv>:
 800075c:	b570      	push	{r4, r5, r6, lr}
 800075e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000762:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000766:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800076a:	bf1d      	ittte	ne
 800076c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000770:	ea94 0f0c 	teqne	r4, ip
 8000774:	ea95 0f0c 	teqne	r5, ip
 8000778:	f000 f8a7 	bleq	80008ca <__aeabi_ddiv+0x16e>
 800077c:	eba4 0405 	sub.w	r4, r4, r5
 8000780:	ea81 0e03 	eor.w	lr, r1, r3
 8000784:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000788:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800078c:	f000 8088 	beq.w	80008a0 <__aeabi_ddiv+0x144>
 8000790:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000794:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000798:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800079c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007b4:	429d      	cmp	r5, r3
 80007b6:	bf08      	it	eq
 80007b8:	4296      	cmpeq	r6, r2
 80007ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80007be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80007c2:	d202      	bcs.n	80007ca <__aeabi_ddiv+0x6e>
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	1ab6      	subs	r6, r6, r2
 80007cc:	eb65 0503 	sbc.w	r5, r5, r3
 80007d0:	085b      	lsrs	r3, r3, #1
 80007d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000808:	085b      	lsrs	r3, r3, #1
 800080a:	ea4f 0232 	mov.w	r2, r2, rrx
 800080e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000812:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000816:	bf22      	ittt	cs
 8000818:	1ab6      	subcs	r6, r6, r2
 800081a:	4675      	movcs	r5, lr
 800081c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000820:	085b      	lsrs	r3, r3, #1
 8000822:	ea4f 0232 	mov.w	r2, r2, rrx
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000838:	ea55 0e06 	orrs.w	lr, r5, r6
 800083c:	d018      	beq.n	8000870 <__aeabi_ddiv+0x114>
 800083e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000842:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000846:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800084a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800084e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000852:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000856:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800085a:	d1c0      	bne.n	80007de <__aeabi_ddiv+0x82>
 800085c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000860:	d10b      	bne.n	800087a <__aeabi_ddiv+0x11e>
 8000862:	ea41 0100 	orr.w	r1, r1, r0
 8000866:	f04f 0000 	mov.w	r0, #0
 800086a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800086e:	e7b6      	b.n	80007de <__aeabi_ddiv+0x82>
 8000870:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000874:	bf04      	itt	eq
 8000876:	4301      	orreq	r1, r0
 8000878:	2000      	moveq	r0, #0
 800087a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800087e:	bf88      	it	hi
 8000880:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000884:	f63f aeaf 	bhi.w	80005e6 <__aeabi_dmul+0xde>
 8000888:	ebb5 0c03 	subs.w	ip, r5, r3
 800088c:	bf04      	itt	eq
 800088e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000892:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000896:	f150 0000 	adcs.w	r0, r0, #0
 800089a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800089e:	bd70      	pop	{r4, r5, r6, pc}
 80008a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008ac:	bfc2      	ittt	gt
 80008ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008b6:	bd70      	popgt	{r4, r5, r6, pc}
 80008b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80008bc:	f04f 0e00 	mov.w	lr, #0
 80008c0:	3c01      	subs	r4, #1
 80008c2:	e690      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008c4:	ea45 0e06 	orr.w	lr, r5, r6
 80008c8:	e68d      	b.n	80005e6 <__aeabi_dmul+0xde>
 80008ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008ce:	ea94 0f0c 	teq	r4, ip
 80008d2:	bf08      	it	eq
 80008d4:	ea95 0f0c 	teqeq	r5, ip
 80008d8:	f43f af3b 	beq.w	8000752 <__aeabi_dmul+0x24a>
 80008dc:	ea94 0f0c 	teq	r4, ip
 80008e0:	d10a      	bne.n	80008f8 <__aeabi_ddiv+0x19c>
 80008e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008e6:	f47f af34 	bne.w	8000752 <__aeabi_dmul+0x24a>
 80008ea:	ea95 0f0c 	teq	r5, ip
 80008ee:	f47f af25 	bne.w	800073c <__aeabi_dmul+0x234>
 80008f2:	4610      	mov	r0, r2
 80008f4:	4619      	mov	r1, r3
 80008f6:	e72c      	b.n	8000752 <__aeabi_dmul+0x24a>
 80008f8:	ea95 0f0c 	teq	r5, ip
 80008fc:	d106      	bne.n	800090c <__aeabi_ddiv+0x1b0>
 80008fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000902:	f43f aefd 	beq.w	8000700 <__aeabi_dmul+0x1f8>
 8000906:	4610      	mov	r0, r2
 8000908:	4619      	mov	r1, r3
 800090a:	e722      	b.n	8000752 <__aeabi_dmul+0x24a>
 800090c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000916:	f47f aec5 	bne.w	80006a4 <__aeabi_dmul+0x19c>
 800091a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800091e:	f47f af0d 	bne.w	800073c <__aeabi_dmul+0x234>
 8000922:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000926:	f47f aeeb 	bne.w	8000700 <__aeabi_dmul+0x1f8>
 800092a:	e712      	b.n	8000752 <__aeabi_dmul+0x24a>

0800092c <__gedf2>:
 800092c:	f04f 3cff 	mov.w	ip, #4294967295
 8000930:	e006      	b.n	8000940 <__cmpdf2+0x4>
 8000932:	bf00      	nop

08000934 <__ledf2>:
 8000934:	f04f 0c01 	mov.w	ip, #1
 8000938:	e002      	b.n	8000940 <__cmpdf2+0x4>
 800093a:	bf00      	nop

0800093c <__cmpdf2>:
 800093c:	f04f 0c01 	mov.w	ip, #1
 8000940:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000944:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000948:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800094c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000950:	bf18      	it	ne
 8000952:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000956:	d01b      	beq.n	8000990 <__cmpdf2+0x54>
 8000958:	b001      	add	sp, #4
 800095a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800095e:	bf0c      	ite	eq
 8000960:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000964:	ea91 0f03 	teqne	r1, r3
 8000968:	bf02      	ittt	eq
 800096a:	ea90 0f02 	teqeq	r0, r2
 800096e:	2000      	moveq	r0, #0
 8000970:	4770      	bxeq	lr
 8000972:	f110 0f00 	cmn.w	r0, #0
 8000976:	ea91 0f03 	teq	r1, r3
 800097a:	bf58      	it	pl
 800097c:	4299      	cmppl	r1, r3
 800097e:	bf08      	it	eq
 8000980:	4290      	cmpeq	r0, r2
 8000982:	bf2c      	ite	cs
 8000984:	17d8      	asrcs	r0, r3, #31
 8000986:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800098a:	f040 0001 	orr.w	r0, r0, #1
 800098e:	4770      	bx	lr
 8000990:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000994:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000998:	d102      	bne.n	80009a0 <__cmpdf2+0x64>
 800099a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800099e:	d107      	bne.n	80009b0 <__cmpdf2+0x74>
 80009a0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009a4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009a8:	d1d6      	bne.n	8000958 <__cmpdf2+0x1c>
 80009aa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009ae:	d0d3      	beq.n	8000958 <__cmpdf2+0x1c>
 80009b0:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop

080009b8 <__aeabi_cdrcmple>:
 80009b8:	4684      	mov	ip, r0
 80009ba:	4610      	mov	r0, r2
 80009bc:	4662      	mov	r2, ip
 80009be:	468c      	mov	ip, r1
 80009c0:	4619      	mov	r1, r3
 80009c2:	4663      	mov	r3, ip
 80009c4:	e000      	b.n	80009c8 <__aeabi_cdcmpeq>
 80009c6:	bf00      	nop

080009c8 <__aeabi_cdcmpeq>:
 80009c8:	b501      	push	{r0, lr}
 80009ca:	f7ff ffb7 	bl	800093c <__cmpdf2>
 80009ce:	2800      	cmp	r0, #0
 80009d0:	bf48      	it	mi
 80009d2:	f110 0f00 	cmnmi.w	r0, #0
 80009d6:	bd01      	pop	{r0, pc}

080009d8 <__aeabi_dcmpeq>:
 80009d8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009dc:	f7ff fff4 	bl	80009c8 <__aeabi_cdcmpeq>
 80009e0:	bf0c      	ite	eq
 80009e2:	2001      	moveq	r0, #1
 80009e4:	2000      	movne	r0, #0
 80009e6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ea:	bf00      	nop

080009ec <__aeabi_dcmplt>:
 80009ec:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009f0:	f7ff ffea 	bl	80009c8 <__aeabi_cdcmpeq>
 80009f4:	bf34      	ite	cc
 80009f6:	2001      	movcc	r0, #1
 80009f8:	2000      	movcs	r0, #0
 80009fa:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fe:	bf00      	nop

08000a00 <__aeabi_dcmple>:
 8000a00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a04:	f7ff ffe0 	bl	80009c8 <__aeabi_cdcmpeq>
 8000a08:	bf94      	ite	ls
 8000a0a:	2001      	movls	r0, #1
 8000a0c:	2000      	movhi	r0, #0
 8000a0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a12:	bf00      	nop

08000a14 <__aeabi_dcmpge>:
 8000a14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a18:	f7ff ffce 	bl	80009b8 <__aeabi_cdrcmple>
 8000a1c:	bf94      	ite	ls
 8000a1e:	2001      	movls	r0, #1
 8000a20:	2000      	movhi	r0, #0
 8000a22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a26:	bf00      	nop

08000a28 <__aeabi_dcmpgt>:
 8000a28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a2c:	f7ff ffc4 	bl	80009b8 <__aeabi_cdrcmple>
 8000a30:	bf34      	ite	cc
 8000a32:	2001      	movcc	r0, #1
 8000a34:	2000      	movcs	r0, #0
 8000a36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a3a:	bf00      	nop

08000a3c <__aeabi_dcmpun>:
 8000a3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a44:	d102      	bne.n	8000a4c <__aeabi_dcmpun+0x10>
 8000a46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a4a:	d10a      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a54:	d102      	bne.n	8000a5c <__aeabi_dcmpun+0x20>
 8000a56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a5a:	d102      	bne.n	8000a62 <__aeabi_dcmpun+0x26>
 8000a5c:	f04f 0000 	mov.w	r0, #0
 8000a60:	4770      	bx	lr
 8000a62:	f04f 0001 	mov.w	r0, #1
 8000a66:	4770      	bx	lr

08000a68 <__aeabi_d2iz>:
 8000a68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a70:	d215      	bcs.n	8000a9e <__aeabi_d2iz+0x36>
 8000a72:	d511      	bpl.n	8000a98 <__aeabi_d2iz+0x30>
 8000a74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a7c:	d912      	bls.n	8000aa4 <__aeabi_d2iz+0x3c>
 8000a7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a92:	bf18      	it	ne
 8000a94:	4240      	negne	r0, r0
 8000a96:	4770      	bx	lr
 8000a98:	f04f 0000 	mov.w	r0, #0
 8000a9c:	4770      	bx	lr
 8000a9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aa2:	d105      	bne.n	8000ab0 <__aeabi_d2iz+0x48>
 8000aa4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000aa8:	bf08      	it	eq
 8000aaa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000aae:	4770      	bx	lr
 8000ab0:	f04f 0000 	mov.w	r0, #0
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_d2uiz>:
 8000ab8:	004a      	lsls	r2, r1, #1
 8000aba:	d211      	bcs.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000abc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ac0:	d211      	bcs.n	8000ae6 <__aeabi_d2uiz+0x2e>
 8000ac2:	d50d      	bpl.n	8000ae0 <__aeabi_d2uiz+0x28>
 8000ac4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000acc:	d40e      	bmi.n	8000aec <__aeabi_d2uiz+0x34>
 8000ace:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ad2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	4770      	bx	lr
 8000ae0:	f04f 0000 	mov.w	r0, #0
 8000ae4:	4770      	bx	lr
 8000ae6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aea:	d102      	bne.n	8000af2 <__aeabi_d2uiz+0x3a>
 8000aec:	f04f 30ff 	mov.w	r0, #4294967295
 8000af0:	4770      	bx	lr
 8000af2:	f04f 0000 	mov.w	r0, #0
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_d2f>:
 8000af8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000afc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b00:	bf24      	itt	cs
 8000b02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b0a:	d90d      	bls.n	8000b28 <__aeabi_d2f+0x30>
 8000b0c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b18:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b20:	bf08      	it	eq
 8000b22:	f020 0001 	biceq.w	r0, r0, #1
 8000b26:	4770      	bx	lr
 8000b28:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b2c:	d121      	bne.n	8000b72 <__aeabi_d2f+0x7a>
 8000b2e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b32:	bfbc      	itt	lt
 8000b34:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b38:	4770      	bxlt	lr
 8000b3a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b42:	f1c2 0218 	rsb	r2, r2, #24
 8000b46:	f1c2 0c20 	rsb	ip, r2, #32
 8000b4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000b52:	bf18      	it	ne
 8000b54:	f040 0001 	orrne.w	r0, r0, #1
 8000b58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b64:	ea40 000c 	orr.w	r0, r0, ip
 8000b68:	fa23 f302 	lsr.w	r3, r3, r2
 8000b6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b70:	e7cc      	b.n	8000b0c <__aeabi_d2f+0x14>
 8000b72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b76:	d107      	bne.n	8000b88 <__aeabi_d2f+0x90>
 8000b78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b7c:	bf1e      	ittt	ne
 8000b7e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b82:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b86:	4770      	bxne	lr
 8000b88:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b8c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b90:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b94:	4770      	bx	lr
 8000b96:	bf00      	nop

08000b98 <__aeabi_frsub>:
 8000b98:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b9c:	e002      	b.n	8000ba4 <__addsf3>
 8000b9e:	bf00      	nop

08000ba0 <__aeabi_fsub>:
 8000ba0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ba4 <__addsf3>:
 8000ba4:	0042      	lsls	r2, r0, #1
 8000ba6:	bf1f      	itttt	ne
 8000ba8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000bac:	ea92 0f03 	teqne	r2, r3
 8000bb0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000bb4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bb8:	d06a      	beq.n	8000c90 <__addsf3+0xec>
 8000bba:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000bbe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000bc2:	bfc1      	itttt	gt
 8000bc4:	18d2      	addgt	r2, r2, r3
 8000bc6:	4041      	eorgt	r1, r0
 8000bc8:	4048      	eorgt	r0, r1
 8000bca:	4041      	eorgt	r1, r0
 8000bcc:	bfb8      	it	lt
 8000bce:	425b      	neglt	r3, r3
 8000bd0:	2b19      	cmp	r3, #25
 8000bd2:	bf88      	it	hi
 8000bd4:	4770      	bxhi	lr
 8000bd6:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000bda:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bde:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000be2:	bf18      	it	ne
 8000be4:	4240      	negne	r0, r0
 8000be6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bea:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000bee:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000bf2:	bf18      	it	ne
 8000bf4:	4249      	negne	r1, r1
 8000bf6:	ea92 0f03 	teq	r2, r3
 8000bfa:	d03f      	beq.n	8000c7c <__addsf3+0xd8>
 8000bfc:	f1a2 0201 	sub.w	r2, r2, #1
 8000c00:	fa41 fc03 	asr.w	ip, r1, r3
 8000c04:	eb10 000c 	adds.w	r0, r0, ip
 8000c08:	f1c3 0320 	rsb	r3, r3, #32
 8000c0c:	fa01 f103 	lsl.w	r1, r1, r3
 8000c10:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c14:	d502      	bpl.n	8000c1c <__addsf3+0x78>
 8000c16:	4249      	negs	r1, r1
 8000c18:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c1c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c20:	d313      	bcc.n	8000c4a <__addsf3+0xa6>
 8000c22:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c26:	d306      	bcc.n	8000c36 <__addsf3+0x92>
 8000c28:	0840      	lsrs	r0, r0, #1
 8000c2a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c2e:	f102 0201 	add.w	r2, r2, #1
 8000c32:	2afe      	cmp	r2, #254	; 0xfe
 8000c34:	d251      	bcs.n	8000cda <__addsf3+0x136>
 8000c36:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c3a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c3e:	bf08      	it	eq
 8000c40:	f020 0001 	biceq.w	r0, r0, #1
 8000c44:	ea40 0003 	orr.w	r0, r0, r3
 8000c48:	4770      	bx	lr
 8000c4a:	0049      	lsls	r1, r1, #1
 8000c4c:	eb40 0000 	adc.w	r0, r0, r0
 8000c50:	3a01      	subs	r2, #1
 8000c52:	bf28      	it	cs
 8000c54:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c58:	d2ed      	bcs.n	8000c36 <__addsf3+0x92>
 8000c5a:	fab0 fc80 	clz	ip, r0
 8000c5e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c62:	ebb2 020c 	subs.w	r2, r2, ip
 8000c66:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c6a:	bfaa      	itet	ge
 8000c6c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c70:	4252      	neglt	r2, r2
 8000c72:	4318      	orrge	r0, r3
 8000c74:	bfbc      	itt	lt
 8000c76:	40d0      	lsrlt	r0, r2
 8000c78:	4318      	orrlt	r0, r3
 8000c7a:	4770      	bx	lr
 8000c7c:	f092 0f00 	teq	r2, #0
 8000c80:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c84:	bf06      	itte	eq
 8000c86:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c8a:	3201      	addeq	r2, #1
 8000c8c:	3b01      	subne	r3, #1
 8000c8e:	e7b5      	b.n	8000bfc <__addsf3+0x58>
 8000c90:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c94:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c98:	bf18      	it	ne
 8000c9a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c9e:	d021      	beq.n	8000ce4 <__addsf3+0x140>
 8000ca0:	ea92 0f03 	teq	r2, r3
 8000ca4:	d004      	beq.n	8000cb0 <__addsf3+0x10c>
 8000ca6:	f092 0f00 	teq	r2, #0
 8000caa:	bf08      	it	eq
 8000cac:	4608      	moveq	r0, r1
 8000cae:	4770      	bx	lr
 8000cb0:	ea90 0f01 	teq	r0, r1
 8000cb4:	bf1c      	itt	ne
 8000cb6:	2000      	movne	r0, #0
 8000cb8:	4770      	bxne	lr
 8000cba:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000cbe:	d104      	bne.n	8000cca <__addsf3+0x126>
 8000cc0:	0040      	lsls	r0, r0, #1
 8000cc2:	bf28      	it	cs
 8000cc4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000cc8:	4770      	bx	lr
 8000cca:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000cce:	bf3c      	itt	cc
 8000cd0:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000cd4:	4770      	bxcc	lr
 8000cd6:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000cda:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000cde:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ce2:	4770      	bx	lr
 8000ce4:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ce8:	bf16      	itet	ne
 8000cea:	4608      	movne	r0, r1
 8000cec:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000cf0:	4601      	movne	r1, r0
 8000cf2:	0242      	lsls	r2, r0, #9
 8000cf4:	bf06      	itte	eq
 8000cf6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cfa:	ea90 0f01 	teqeq	r0, r1
 8000cfe:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d02:	4770      	bx	lr

08000d04 <__aeabi_ui2f>:
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e004      	b.n	8000d14 <__aeabi_i2f+0x8>
 8000d0a:	bf00      	nop

08000d0c <__aeabi_i2f>:
 8000d0c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d10:	bf48      	it	mi
 8000d12:	4240      	negmi	r0, r0
 8000d14:	ea5f 0c00 	movs.w	ip, r0
 8000d18:	bf08      	it	eq
 8000d1a:	4770      	bxeq	lr
 8000d1c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d20:	4601      	mov	r1, r0
 8000d22:	f04f 0000 	mov.w	r0, #0
 8000d26:	e01c      	b.n	8000d62 <__aeabi_l2f+0x2a>

08000d28 <__aeabi_ul2f>:
 8000d28:	ea50 0201 	orrs.w	r2, r0, r1
 8000d2c:	bf08      	it	eq
 8000d2e:	4770      	bxeq	lr
 8000d30:	f04f 0300 	mov.w	r3, #0
 8000d34:	e00a      	b.n	8000d4c <__aeabi_l2f+0x14>
 8000d36:	bf00      	nop

08000d38 <__aeabi_l2f>:
 8000d38:	ea50 0201 	orrs.w	r2, r0, r1
 8000d3c:	bf08      	it	eq
 8000d3e:	4770      	bxeq	lr
 8000d40:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d44:	d502      	bpl.n	8000d4c <__aeabi_l2f+0x14>
 8000d46:	4240      	negs	r0, r0
 8000d48:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d4c:	ea5f 0c01 	movs.w	ip, r1
 8000d50:	bf02      	ittt	eq
 8000d52:	4684      	moveq	ip, r0
 8000d54:	4601      	moveq	r1, r0
 8000d56:	2000      	moveq	r0, #0
 8000d58:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d5c:	bf08      	it	eq
 8000d5e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d62:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d66:	fabc f28c 	clz	r2, ip
 8000d6a:	3a08      	subs	r2, #8
 8000d6c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d70:	db10      	blt.n	8000d94 <__aeabi_l2f+0x5c>
 8000d72:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d76:	4463      	add	r3, ip
 8000d78:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d7c:	f1c2 0220 	rsb	r2, r2, #32
 8000d80:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d84:	fa20 f202 	lsr.w	r2, r0, r2
 8000d88:	eb43 0002 	adc.w	r0, r3, r2
 8000d8c:	bf08      	it	eq
 8000d8e:	f020 0001 	biceq.w	r0, r0, #1
 8000d92:	4770      	bx	lr
 8000d94:	f102 0220 	add.w	r2, r2, #32
 8000d98:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d9c:	f1c2 0220 	rsb	r2, r2, #32
 8000da0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000da4:	fa21 f202 	lsr.w	r2, r1, r2
 8000da8:	eb43 0002 	adc.w	r0, r3, r2
 8000dac:	bf08      	it	eq
 8000dae:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_fmul>:
 8000db4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000db8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000dbc:	bf1e      	ittt	ne
 8000dbe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000dc2:	ea92 0f0c 	teqne	r2, ip
 8000dc6:	ea93 0f0c 	teqne	r3, ip
 8000dca:	d06f      	beq.n	8000eac <__aeabi_fmul+0xf8>
 8000dcc:	441a      	add	r2, r3
 8000dce:	ea80 0c01 	eor.w	ip, r0, r1
 8000dd2:	0240      	lsls	r0, r0, #9
 8000dd4:	bf18      	it	ne
 8000dd6:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000dda:	d01e      	beq.n	8000e1a <__aeabi_fmul+0x66>
 8000ddc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000de0:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000de4:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000de8:	fba0 3101 	umull	r3, r1, r0, r1
 8000dec:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000df0:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000df4:	bf3e      	ittt	cc
 8000df6:	0049      	lslcc	r1, r1, #1
 8000df8:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000dfc:	005b      	lslcc	r3, r3, #1
 8000dfe:	ea40 0001 	orr.w	r0, r0, r1
 8000e02:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000e06:	2afd      	cmp	r2, #253	; 0xfd
 8000e08:	d81d      	bhi.n	8000e46 <__aeabi_fmul+0x92>
 8000e0a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000e0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000e12:	bf08      	it	eq
 8000e14:	f020 0001 	biceq.w	r0, r0, #1
 8000e18:	4770      	bx	lr
 8000e1a:	f090 0f00 	teq	r0, #0
 8000e1e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000e22:	bf08      	it	eq
 8000e24:	0249      	lsleq	r1, r1, #9
 8000e26:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000e2a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000e2e:	3a7f      	subs	r2, #127	; 0x7f
 8000e30:	bfc2      	ittt	gt
 8000e32:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000e36:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000e3a:	4770      	bxgt	lr
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	f04f 0300 	mov.w	r3, #0
 8000e44:	3a01      	subs	r2, #1
 8000e46:	dc5d      	bgt.n	8000f04 <__aeabi_fmul+0x150>
 8000e48:	f112 0f19 	cmn.w	r2, #25
 8000e4c:	bfdc      	itt	le
 8000e4e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000e52:	4770      	bxle	lr
 8000e54:	f1c2 0200 	rsb	r2, r2, #0
 8000e58:	0041      	lsls	r1, r0, #1
 8000e5a:	fa21 f102 	lsr.w	r1, r1, r2
 8000e5e:	f1c2 0220 	rsb	r2, r2, #32
 8000e62:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e66:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e6a:	f140 0000 	adc.w	r0, r0, #0
 8000e6e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e72:	bf08      	it	eq
 8000e74:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e78:	4770      	bx	lr
 8000e7a:	f092 0f00 	teq	r2, #0
 8000e7e:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000e82:	bf02      	ittt	eq
 8000e84:	0040      	lsleq	r0, r0, #1
 8000e86:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000e8a:	3a01      	subeq	r2, #1
 8000e8c:	d0f9      	beq.n	8000e82 <__aeabi_fmul+0xce>
 8000e8e:	ea40 000c 	orr.w	r0, r0, ip
 8000e92:	f093 0f00 	teq	r3, #0
 8000e96:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000e9a:	bf02      	ittt	eq
 8000e9c:	0049      	lsleq	r1, r1, #1
 8000e9e:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ea2:	3b01      	subeq	r3, #1
 8000ea4:	d0f9      	beq.n	8000e9a <__aeabi_fmul+0xe6>
 8000ea6:	ea41 010c 	orr.w	r1, r1, ip
 8000eaa:	e78f      	b.n	8000dcc <__aeabi_fmul+0x18>
 8000eac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000eb0:	ea92 0f0c 	teq	r2, ip
 8000eb4:	bf18      	it	ne
 8000eb6:	ea93 0f0c 	teqne	r3, ip
 8000eba:	d00a      	beq.n	8000ed2 <__aeabi_fmul+0x11e>
 8000ebc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000ec0:	bf18      	it	ne
 8000ec2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000ec6:	d1d8      	bne.n	8000e7a <__aeabi_fmul+0xc6>
 8000ec8:	ea80 0001 	eor.w	r0, r0, r1
 8000ecc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000ed0:	4770      	bx	lr
 8000ed2:	f090 0f00 	teq	r0, #0
 8000ed6:	bf17      	itett	ne
 8000ed8:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000edc:	4608      	moveq	r0, r1
 8000ede:	f091 0f00 	teqne	r1, #0
 8000ee2:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000ee6:	d014      	beq.n	8000f12 <__aeabi_fmul+0x15e>
 8000ee8:	ea92 0f0c 	teq	r2, ip
 8000eec:	d101      	bne.n	8000ef2 <__aeabi_fmul+0x13e>
 8000eee:	0242      	lsls	r2, r0, #9
 8000ef0:	d10f      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000ef2:	ea93 0f0c 	teq	r3, ip
 8000ef6:	d103      	bne.n	8000f00 <__aeabi_fmul+0x14c>
 8000ef8:	024b      	lsls	r3, r1, #9
 8000efa:	bf18      	it	ne
 8000efc:	4608      	movne	r0, r1
 8000efe:	d108      	bne.n	8000f12 <__aeabi_fmul+0x15e>
 8000f00:	ea80 0001 	eor.w	r0, r0, r1
 8000f04:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000f08:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f0c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f10:	4770      	bx	lr
 8000f12:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000f16:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000f1a:	4770      	bx	lr

08000f1c <__aeabi_fdiv>:
 8000f1c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000f20:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000f24:	bf1e      	ittt	ne
 8000f26:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000f2a:	ea92 0f0c 	teqne	r2, ip
 8000f2e:	ea93 0f0c 	teqne	r3, ip
 8000f32:	d069      	beq.n	8001008 <__aeabi_fdiv+0xec>
 8000f34:	eba2 0203 	sub.w	r2, r2, r3
 8000f38:	ea80 0c01 	eor.w	ip, r0, r1
 8000f3c:	0249      	lsls	r1, r1, #9
 8000f3e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000f42:	d037      	beq.n	8000fb4 <__aeabi_fdiv+0x98>
 8000f44:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000f48:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000f4c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000f50:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000f54:	428b      	cmp	r3, r1
 8000f56:	bf38      	it	cc
 8000f58:	005b      	lslcc	r3, r3, #1
 8000f5a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000f5e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000f62:	428b      	cmp	r3, r1
 8000f64:	bf24      	itt	cs
 8000f66:	1a5b      	subcs	r3, r3, r1
 8000f68:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f6c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f70:	bf24      	itt	cs
 8000f72:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f76:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f7a:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f7e:	bf24      	itt	cs
 8000f80:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f84:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f88:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f8c:	bf24      	itt	cs
 8000f8e:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f92:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f96:	011b      	lsls	r3, r3, #4
 8000f98:	bf18      	it	ne
 8000f9a:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f9e:	d1e0      	bne.n	8000f62 <__aeabi_fdiv+0x46>
 8000fa0:	2afd      	cmp	r2, #253	; 0xfd
 8000fa2:	f63f af50 	bhi.w	8000e46 <__aeabi_fmul+0x92>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000fac:	bf08      	it	eq
 8000fae:	f020 0001 	biceq.w	r0, r0, #1
 8000fb2:	4770      	bx	lr
 8000fb4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000fb8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000fbc:	327f      	adds	r2, #127	; 0x7f
 8000fbe:	bfc2      	ittt	gt
 8000fc0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000fc4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000fc8:	4770      	bxgt	lr
 8000fca:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000fce:	f04f 0300 	mov.w	r3, #0
 8000fd2:	3a01      	subs	r2, #1
 8000fd4:	e737      	b.n	8000e46 <__aeabi_fmul+0x92>
 8000fd6:	f092 0f00 	teq	r2, #0
 8000fda:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000fde:	bf02      	ittt	eq
 8000fe0:	0040      	lsleq	r0, r0, #1
 8000fe2:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000fe6:	3a01      	subeq	r2, #1
 8000fe8:	d0f9      	beq.n	8000fde <__aeabi_fdiv+0xc2>
 8000fea:	ea40 000c 	orr.w	r0, r0, ip
 8000fee:	f093 0f00 	teq	r3, #0
 8000ff2:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ff6:	bf02      	ittt	eq
 8000ff8:	0049      	lsleq	r1, r1, #1
 8000ffa:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000ffe:	3b01      	subeq	r3, #1
 8001000:	d0f9      	beq.n	8000ff6 <__aeabi_fdiv+0xda>
 8001002:	ea41 010c 	orr.w	r1, r1, ip
 8001006:	e795      	b.n	8000f34 <__aeabi_fdiv+0x18>
 8001008:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800100c:	ea92 0f0c 	teq	r2, ip
 8001010:	d108      	bne.n	8001024 <__aeabi_fdiv+0x108>
 8001012:	0242      	lsls	r2, r0, #9
 8001014:	f47f af7d 	bne.w	8000f12 <__aeabi_fmul+0x15e>
 8001018:	ea93 0f0c 	teq	r3, ip
 800101c:	f47f af70 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001020:	4608      	mov	r0, r1
 8001022:	e776      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001024:	ea93 0f0c 	teq	r3, ip
 8001028:	d104      	bne.n	8001034 <__aeabi_fdiv+0x118>
 800102a:	024b      	lsls	r3, r1, #9
 800102c:	f43f af4c 	beq.w	8000ec8 <__aeabi_fmul+0x114>
 8001030:	4608      	mov	r0, r1
 8001032:	e76e      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001034:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8001038:	bf18      	it	ne
 800103a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 800103e:	d1ca      	bne.n	8000fd6 <__aeabi_fdiv+0xba>
 8001040:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8001044:	f47f af5c 	bne.w	8000f00 <__aeabi_fmul+0x14c>
 8001048:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 800104c:	f47f af3c 	bne.w	8000ec8 <__aeabi_fmul+0x114>
 8001050:	e75f      	b.n	8000f12 <__aeabi_fmul+0x15e>
 8001052:	bf00      	nop

08001054 <__gesf2>:
 8001054:	f04f 3cff 	mov.w	ip, #4294967295
 8001058:	e006      	b.n	8001068 <__cmpsf2+0x4>
 800105a:	bf00      	nop

0800105c <__lesf2>:
 800105c:	f04f 0c01 	mov.w	ip, #1
 8001060:	e002      	b.n	8001068 <__cmpsf2+0x4>
 8001062:	bf00      	nop

08001064 <__cmpsf2>:
 8001064:	f04f 0c01 	mov.w	ip, #1
 8001068:	f84d cd04 	str.w	ip, [sp, #-4]!
 800106c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001070:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8001074:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8001078:	bf18      	it	ne
 800107a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 800107e:	d011      	beq.n	80010a4 <__cmpsf2+0x40>
 8001080:	b001      	add	sp, #4
 8001082:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8001086:	bf18      	it	ne
 8001088:	ea90 0f01 	teqne	r0, r1
 800108c:	bf58      	it	pl
 800108e:	ebb2 0003 	subspl.w	r0, r2, r3
 8001092:	bf88      	it	hi
 8001094:	17c8      	asrhi	r0, r1, #31
 8001096:	bf38      	it	cc
 8001098:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 800109c:	bf18      	it	ne
 800109e:	f040 0001 	orrne.w	r0, r0, #1
 80010a2:	4770      	bx	lr
 80010a4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 80010a8:	d102      	bne.n	80010b0 <__cmpsf2+0x4c>
 80010aa:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 80010ae:	d105      	bne.n	80010bc <__cmpsf2+0x58>
 80010b0:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 80010b4:	d1e4      	bne.n	8001080 <__cmpsf2+0x1c>
 80010b6:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 80010ba:	d0e1      	beq.n	8001080 <__cmpsf2+0x1c>
 80010bc:	f85d 0b04 	ldr.w	r0, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <__aeabi_cfrcmple>:
 80010c4:	4684      	mov	ip, r0
 80010c6:	4608      	mov	r0, r1
 80010c8:	4661      	mov	r1, ip
 80010ca:	e7ff      	b.n	80010cc <__aeabi_cfcmpeq>

080010cc <__aeabi_cfcmpeq>:
 80010cc:	b50f      	push	{r0, r1, r2, r3, lr}
 80010ce:	f7ff ffc9 	bl	8001064 <__cmpsf2>
 80010d2:	2800      	cmp	r0, #0
 80010d4:	bf48      	it	mi
 80010d6:	f110 0f00 	cmnmi.w	r0, #0
 80010da:	bd0f      	pop	{r0, r1, r2, r3, pc}

080010dc <__aeabi_fcmpeq>:
 80010dc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010e0:	f7ff fff4 	bl	80010cc <__aeabi_cfcmpeq>
 80010e4:	bf0c      	ite	eq
 80010e6:	2001      	moveq	r0, #1
 80010e8:	2000      	movne	r0, #0
 80010ea:	f85d fb08 	ldr.w	pc, [sp], #8
 80010ee:	bf00      	nop

080010f0 <__aeabi_fcmplt>:
 80010f0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80010f4:	f7ff ffea 	bl	80010cc <__aeabi_cfcmpeq>
 80010f8:	bf34      	ite	cc
 80010fa:	2001      	movcc	r0, #1
 80010fc:	2000      	movcs	r0, #0
 80010fe:	f85d fb08 	ldr.w	pc, [sp], #8
 8001102:	bf00      	nop

08001104 <__aeabi_fcmple>:
 8001104:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001108:	f7ff ffe0 	bl	80010cc <__aeabi_cfcmpeq>
 800110c:	bf94      	ite	ls
 800110e:	2001      	movls	r0, #1
 8001110:	2000      	movhi	r0, #0
 8001112:	f85d fb08 	ldr.w	pc, [sp], #8
 8001116:	bf00      	nop

08001118 <__aeabi_fcmpge>:
 8001118:	f84d ed08 	str.w	lr, [sp, #-8]!
 800111c:	f7ff ffd2 	bl	80010c4 <__aeabi_cfrcmple>
 8001120:	bf94      	ite	ls
 8001122:	2001      	movls	r0, #1
 8001124:	2000      	movhi	r0, #0
 8001126:	f85d fb08 	ldr.w	pc, [sp], #8
 800112a:	bf00      	nop

0800112c <__aeabi_fcmpgt>:
 800112c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001130:	f7ff ffc8 	bl	80010c4 <__aeabi_cfrcmple>
 8001134:	bf34      	ite	cc
 8001136:	2001      	movcc	r0, #1
 8001138:	2000      	movcs	r0, #0
 800113a:	f85d fb08 	ldr.w	pc, [sp], #8
 800113e:	bf00      	nop

08001140 <__aeabi_f2uiz>:
 8001140:	0042      	lsls	r2, r0, #1
 8001142:	d20e      	bcs.n	8001162 <__aeabi_f2uiz+0x22>
 8001144:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8001148:	d30b      	bcc.n	8001162 <__aeabi_f2uiz+0x22>
 800114a:	f04f 039e 	mov.w	r3, #158	; 0x9e
 800114e:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8001152:	d409      	bmi.n	8001168 <__aeabi_f2uiz+0x28>
 8001154:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8001158:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800115c:	fa23 f002 	lsr.w	r0, r3, r2
 8001160:	4770      	bx	lr
 8001162:	f04f 0000 	mov.w	r0, #0
 8001166:	4770      	bx	lr
 8001168:	f112 0f61 	cmn.w	r2, #97	; 0x61
 800116c:	d101      	bne.n	8001172 <__aeabi_f2uiz+0x32>
 800116e:	0242      	lsls	r2, r0, #9
 8001170:	d102      	bne.n	8001178 <__aeabi_f2uiz+0x38>
 8001172:	f04f 30ff 	mov.w	r0, #4294967295
 8001176:	4770      	bx	lr
 8001178:	f04f 0000 	mov.w	r0, #0
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop

08001180 <__aeabi_uldivmod>:
 8001180:	b953      	cbnz	r3, 8001198 <__aeabi_uldivmod+0x18>
 8001182:	b94a      	cbnz	r2, 8001198 <__aeabi_uldivmod+0x18>
 8001184:	2900      	cmp	r1, #0
 8001186:	bf08      	it	eq
 8001188:	2800      	cmpeq	r0, #0
 800118a:	bf1c      	itt	ne
 800118c:	f04f 31ff 	movne.w	r1, #4294967295
 8001190:	f04f 30ff 	movne.w	r0, #4294967295
 8001194:	f000 b96e 	b.w	8001474 <__aeabi_idiv0>
 8001198:	f1ad 0c08 	sub.w	ip, sp, #8
 800119c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80011a0:	f000 f806 	bl	80011b0 <__udivmoddi4>
 80011a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80011a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80011ac:	b004      	add	sp, #16
 80011ae:	4770      	bx	lr

080011b0 <__udivmoddi4>:
 80011b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80011b4:	9e08      	ldr	r6, [sp, #32]
 80011b6:	460d      	mov	r5, r1
 80011b8:	4604      	mov	r4, r0
 80011ba:	468e      	mov	lr, r1
 80011bc:	2b00      	cmp	r3, #0
 80011be:	f040 8083 	bne.w	80012c8 <__udivmoddi4+0x118>
 80011c2:	428a      	cmp	r2, r1
 80011c4:	4617      	mov	r7, r2
 80011c6:	d947      	bls.n	8001258 <__udivmoddi4+0xa8>
 80011c8:	fab2 f382 	clz	r3, r2
 80011cc:	b14b      	cbz	r3, 80011e2 <__udivmoddi4+0x32>
 80011ce:	f1c3 0120 	rsb	r1, r3, #32
 80011d2:	fa05 fe03 	lsl.w	lr, r5, r3
 80011d6:	fa20 f101 	lsr.w	r1, r0, r1
 80011da:	409f      	lsls	r7, r3
 80011dc:	ea41 0e0e 	orr.w	lr, r1, lr
 80011e0:	409c      	lsls	r4, r3
 80011e2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 80011e6:	fbbe fcf8 	udiv	ip, lr, r8
 80011ea:	fa1f f987 	uxth.w	r9, r7
 80011ee:	fb08 e21c 	mls	r2, r8, ip, lr
 80011f2:	fb0c f009 	mul.w	r0, ip, r9
 80011f6:	0c21      	lsrs	r1, r4, #16
 80011f8:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 80011fc:	4290      	cmp	r0, r2
 80011fe:	d90a      	bls.n	8001216 <__udivmoddi4+0x66>
 8001200:	18ba      	adds	r2, r7, r2
 8001202:	f10c 31ff 	add.w	r1, ip, #4294967295
 8001206:	f080 8118 	bcs.w	800143a <__udivmoddi4+0x28a>
 800120a:	4290      	cmp	r0, r2
 800120c:	f240 8115 	bls.w	800143a <__udivmoddi4+0x28a>
 8001210:	f1ac 0c02 	sub.w	ip, ip, #2
 8001214:	443a      	add	r2, r7
 8001216:	1a12      	subs	r2, r2, r0
 8001218:	fbb2 f0f8 	udiv	r0, r2, r8
 800121c:	fb08 2210 	mls	r2, r8, r0, r2
 8001220:	fb00 f109 	mul.w	r1, r0, r9
 8001224:	b2a4      	uxth	r4, r4
 8001226:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800122a:	42a1      	cmp	r1, r4
 800122c:	d909      	bls.n	8001242 <__udivmoddi4+0x92>
 800122e:	193c      	adds	r4, r7, r4
 8001230:	f100 32ff 	add.w	r2, r0, #4294967295
 8001234:	f080 8103 	bcs.w	800143e <__udivmoddi4+0x28e>
 8001238:	42a1      	cmp	r1, r4
 800123a:	f240 8100 	bls.w	800143e <__udivmoddi4+0x28e>
 800123e:	3802      	subs	r0, #2
 8001240:	443c      	add	r4, r7
 8001242:	1a64      	subs	r4, r4, r1
 8001244:	2100      	movs	r1, #0
 8001246:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800124a:	b11e      	cbz	r6, 8001254 <__udivmoddi4+0xa4>
 800124c:	2200      	movs	r2, #0
 800124e:	40dc      	lsrs	r4, r3
 8001250:	e9c6 4200 	strd	r4, r2, [r6]
 8001254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001258:	b902      	cbnz	r2, 800125c <__udivmoddi4+0xac>
 800125a:	deff      	udf	#255	; 0xff
 800125c:	fab2 f382 	clz	r3, r2
 8001260:	2b00      	cmp	r3, #0
 8001262:	d14f      	bne.n	8001304 <__udivmoddi4+0x154>
 8001264:	1a8d      	subs	r5, r1, r2
 8001266:	2101      	movs	r1, #1
 8001268:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800126c:	fa1f f882 	uxth.w	r8, r2
 8001270:	fbb5 fcfe 	udiv	ip, r5, lr
 8001274:	fb0e 551c 	mls	r5, lr, ip, r5
 8001278:	fb08 f00c 	mul.w	r0, r8, ip
 800127c:	0c22      	lsrs	r2, r4, #16
 800127e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8001282:	42a8      	cmp	r0, r5
 8001284:	d907      	bls.n	8001296 <__udivmoddi4+0xe6>
 8001286:	197d      	adds	r5, r7, r5
 8001288:	f10c 32ff 	add.w	r2, ip, #4294967295
 800128c:	d202      	bcs.n	8001294 <__udivmoddi4+0xe4>
 800128e:	42a8      	cmp	r0, r5
 8001290:	f200 80e9 	bhi.w	8001466 <__udivmoddi4+0x2b6>
 8001294:	4694      	mov	ip, r2
 8001296:	1a2d      	subs	r5, r5, r0
 8001298:	fbb5 f0fe 	udiv	r0, r5, lr
 800129c:	fb0e 5510 	mls	r5, lr, r0, r5
 80012a0:	fb08 f800 	mul.w	r8, r8, r0
 80012a4:	b2a4      	uxth	r4, r4
 80012a6:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80012aa:	45a0      	cmp	r8, r4
 80012ac:	d907      	bls.n	80012be <__udivmoddi4+0x10e>
 80012ae:	193c      	adds	r4, r7, r4
 80012b0:	f100 32ff 	add.w	r2, r0, #4294967295
 80012b4:	d202      	bcs.n	80012bc <__udivmoddi4+0x10c>
 80012b6:	45a0      	cmp	r8, r4
 80012b8:	f200 80d9 	bhi.w	800146e <__udivmoddi4+0x2be>
 80012bc:	4610      	mov	r0, r2
 80012be:	eba4 0408 	sub.w	r4, r4, r8
 80012c2:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80012c6:	e7c0      	b.n	800124a <__udivmoddi4+0x9a>
 80012c8:	428b      	cmp	r3, r1
 80012ca:	d908      	bls.n	80012de <__udivmoddi4+0x12e>
 80012cc:	2e00      	cmp	r6, #0
 80012ce:	f000 80b1 	beq.w	8001434 <__udivmoddi4+0x284>
 80012d2:	2100      	movs	r1, #0
 80012d4:	e9c6 0500 	strd	r0, r5, [r6]
 80012d8:	4608      	mov	r0, r1
 80012da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012de:	fab3 f183 	clz	r1, r3
 80012e2:	2900      	cmp	r1, #0
 80012e4:	d14b      	bne.n	800137e <__udivmoddi4+0x1ce>
 80012e6:	42ab      	cmp	r3, r5
 80012e8:	d302      	bcc.n	80012f0 <__udivmoddi4+0x140>
 80012ea:	4282      	cmp	r2, r0
 80012ec:	f200 80b9 	bhi.w	8001462 <__udivmoddi4+0x2b2>
 80012f0:	1a84      	subs	r4, r0, r2
 80012f2:	eb65 0303 	sbc.w	r3, r5, r3
 80012f6:	2001      	movs	r0, #1
 80012f8:	469e      	mov	lr, r3
 80012fa:	2e00      	cmp	r6, #0
 80012fc:	d0aa      	beq.n	8001254 <__udivmoddi4+0xa4>
 80012fe:	e9c6 4e00 	strd	r4, lr, [r6]
 8001302:	e7a7      	b.n	8001254 <__udivmoddi4+0xa4>
 8001304:	409f      	lsls	r7, r3
 8001306:	f1c3 0220 	rsb	r2, r3, #32
 800130a:	40d1      	lsrs	r1, r2
 800130c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8001310:	fbb1 f0fe 	udiv	r0, r1, lr
 8001314:	fa1f f887 	uxth.w	r8, r7
 8001318:	fb0e 1110 	mls	r1, lr, r0, r1
 800131c:	fa24 f202 	lsr.w	r2, r4, r2
 8001320:	409d      	lsls	r5, r3
 8001322:	fb00 fc08 	mul.w	ip, r0, r8
 8001326:	432a      	orrs	r2, r5
 8001328:	0c15      	lsrs	r5, r2, #16
 800132a:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
 800132e:	45ac      	cmp	ip, r5
 8001330:	fa04 f403 	lsl.w	r4, r4, r3
 8001334:	d909      	bls.n	800134a <__udivmoddi4+0x19a>
 8001336:	197d      	adds	r5, r7, r5
 8001338:	f100 31ff 	add.w	r1, r0, #4294967295
 800133c:	f080 808f 	bcs.w	800145e <__udivmoddi4+0x2ae>
 8001340:	45ac      	cmp	ip, r5
 8001342:	f240 808c 	bls.w	800145e <__udivmoddi4+0x2ae>
 8001346:	3802      	subs	r0, #2
 8001348:	443d      	add	r5, r7
 800134a:	eba5 050c 	sub.w	r5, r5, ip
 800134e:	fbb5 f1fe 	udiv	r1, r5, lr
 8001352:	fb0e 5c11 	mls	ip, lr, r1, r5
 8001356:	fb01 f908 	mul.w	r9, r1, r8
 800135a:	b295      	uxth	r5, r2
 800135c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8001360:	45a9      	cmp	r9, r5
 8001362:	d907      	bls.n	8001374 <__udivmoddi4+0x1c4>
 8001364:	197d      	adds	r5, r7, r5
 8001366:	f101 32ff 	add.w	r2, r1, #4294967295
 800136a:	d274      	bcs.n	8001456 <__udivmoddi4+0x2a6>
 800136c:	45a9      	cmp	r9, r5
 800136e:	d972      	bls.n	8001456 <__udivmoddi4+0x2a6>
 8001370:	3902      	subs	r1, #2
 8001372:	443d      	add	r5, r7
 8001374:	eba5 0509 	sub.w	r5, r5, r9
 8001378:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800137c:	e778      	b.n	8001270 <__udivmoddi4+0xc0>
 800137e:	f1c1 0720 	rsb	r7, r1, #32
 8001382:	408b      	lsls	r3, r1
 8001384:	fa22 fc07 	lsr.w	ip, r2, r7
 8001388:	ea4c 0c03 	orr.w	ip, ip, r3
 800138c:	fa25 f407 	lsr.w	r4, r5, r7
 8001390:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8001394:	fbb4 f9fe 	udiv	r9, r4, lr
 8001398:	fa1f f88c 	uxth.w	r8, ip
 800139c:	fb0e 4419 	mls	r4, lr, r9, r4
 80013a0:	fa20 f307 	lsr.w	r3, r0, r7
 80013a4:	fb09 fa08 	mul.w	sl, r9, r8
 80013a8:	408d      	lsls	r5, r1
 80013aa:	431d      	orrs	r5, r3
 80013ac:	0c2b      	lsrs	r3, r5, #16
 80013ae:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80013b2:	45a2      	cmp	sl, r4
 80013b4:	fa02 f201 	lsl.w	r2, r2, r1
 80013b8:	fa00 f301 	lsl.w	r3, r0, r1
 80013bc:	d909      	bls.n	80013d2 <__udivmoddi4+0x222>
 80013be:	eb1c 0404 	adds.w	r4, ip, r4
 80013c2:	f109 30ff 	add.w	r0, r9, #4294967295
 80013c6:	d248      	bcs.n	800145a <__udivmoddi4+0x2aa>
 80013c8:	45a2      	cmp	sl, r4
 80013ca:	d946      	bls.n	800145a <__udivmoddi4+0x2aa>
 80013cc:	f1a9 0902 	sub.w	r9, r9, #2
 80013d0:	4464      	add	r4, ip
 80013d2:	eba4 040a 	sub.w	r4, r4, sl
 80013d6:	fbb4 f0fe 	udiv	r0, r4, lr
 80013da:	fb0e 4410 	mls	r4, lr, r0, r4
 80013de:	fb00 fa08 	mul.w	sl, r0, r8
 80013e2:	b2ad      	uxth	r5, r5
 80013e4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80013e8:	45a2      	cmp	sl, r4
 80013ea:	d908      	bls.n	80013fe <__udivmoddi4+0x24e>
 80013ec:	eb1c 0404 	adds.w	r4, ip, r4
 80013f0:	f100 35ff 	add.w	r5, r0, #4294967295
 80013f4:	d22d      	bcs.n	8001452 <__udivmoddi4+0x2a2>
 80013f6:	45a2      	cmp	sl, r4
 80013f8:	d92b      	bls.n	8001452 <__udivmoddi4+0x2a2>
 80013fa:	3802      	subs	r0, #2
 80013fc:	4464      	add	r4, ip
 80013fe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8001402:	fba0 8902 	umull	r8, r9, r0, r2
 8001406:	eba4 040a 	sub.w	r4, r4, sl
 800140a:	454c      	cmp	r4, r9
 800140c:	46c6      	mov	lr, r8
 800140e:	464d      	mov	r5, r9
 8001410:	d319      	bcc.n	8001446 <__udivmoddi4+0x296>
 8001412:	d016      	beq.n	8001442 <__udivmoddi4+0x292>
 8001414:	b15e      	cbz	r6, 800142e <__udivmoddi4+0x27e>
 8001416:	ebb3 020e 	subs.w	r2, r3, lr
 800141a:	eb64 0405 	sbc.w	r4, r4, r5
 800141e:	fa04 f707 	lsl.w	r7, r4, r7
 8001422:	fa22 f301 	lsr.w	r3, r2, r1
 8001426:	431f      	orrs	r7, r3
 8001428:	40cc      	lsrs	r4, r1
 800142a:	e9c6 7400 	strd	r7, r4, [r6]
 800142e:	2100      	movs	r1, #0
 8001430:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001434:	4631      	mov	r1, r6
 8001436:	4630      	mov	r0, r6
 8001438:	e70c      	b.n	8001254 <__udivmoddi4+0xa4>
 800143a:	468c      	mov	ip, r1
 800143c:	e6eb      	b.n	8001216 <__udivmoddi4+0x66>
 800143e:	4610      	mov	r0, r2
 8001440:	e6ff      	b.n	8001242 <__udivmoddi4+0x92>
 8001442:	4543      	cmp	r3, r8
 8001444:	d2e6      	bcs.n	8001414 <__udivmoddi4+0x264>
 8001446:	ebb8 0e02 	subs.w	lr, r8, r2
 800144a:	eb69 050c 	sbc.w	r5, r9, ip
 800144e:	3801      	subs	r0, #1
 8001450:	e7e0      	b.n	8001414 <__udivmoddi4+0x264>
 8001452:	4628      	mov	r0, r5
 8001454:	e7d3      	b.n	80013fe <__udivmoddi4+0x24e>
 8001456:	4611      	mov	r1, r2
 8001458:	e78c      	b.n	8001374 <__udivmoddi4+0x1c4>
 800145a:	4681      	mov	r9, r0
 800145c:	e7b9      	b.n	80013d2 <__udivmoddi4+0x222>
 800145e:	4608      	mov	r0, r1
 8001460:	e773      	b.n	800134a <__udivmoddi4+0x19a>
 8001462:	4608      	mov	r0, r1
 8001464:	e749      	b.n	80012fa <__udivmoddi4+0x14a>
 8001466:	f1ac 0c02 	sub.w	ip, ip, #2
 800146a:	443d      	add	r5, r7
 800146c:	e713      	b.n	8001296 <__udivmoddi4+0xe6>
 800146e:	3802      	subs	r0, #2
 8001470:	443c      	add	r4, r7
 8001472:	e724      	b.n	80012be <__udivmoddi4+0x10e>

08001474 <__aeabi_idiv0>:
 8001474:	4770      	bx	lr
 8001476:	bf00      	nop

08001478 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800147e:	1d3b      	adds	r3, r7, #4
 8001480:	2200      	movs	r2, #0
 8001482:	601a      	str	r2, [r3, #0]
 8001484:	605a      	str	r2, [r3, #4]
 8001486:	609a      	str	r2, [r3, #8]
  /* USER CODE BEGIN ADC_Init 1 */

  /* USER CODE END ADC_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8001488:	4b3a      	ldr	r3, [pc, #232]	; (8001574 <MX_ADC_Init+0xfc>)
 800148a:	4a3b      	ldr	r2, [pc, #236]	; (8001578 <MX_ADC_Init+0x100>)
 800148c:	601a      	str	r2, [r3, #0]
  hadc.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV1;
 800148e:	4b39      	ldr	r3, [pc, #228]	; (8001574 <MX_ADC_Init+0xfc>)
 8001490:	2200      	movs	r2, #0
 8001492:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 8001494:	4b37      	ldr	r3, [pc, #220]	; (8001574 <MX_ADC_Init+0xfc>)
 8001496:	2200      	movs	r2, #0
 8001498:	609a      	str	r2, [r3, #8]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800149a:	4b36      	ldr	r3, [pc, #216]	; (8001574 <MX_ADC_Init+0xfc>)
 800149c:	2200      	movs	r2, #0
 800149e:	60da      	str	r2, [r3, #12]
  hadc.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80014a0:	4b34      	ldr	r3, [pc, #208]	; (8001574 <MX_ADC_Init+0xfc>)
 80014a2:	2200      	movs	r2, #0
 80014a4:	611a      	str	r2, [r3, #16]
  hadc.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 80014a6:	4b33      	ldr	r3, [pc, #204]	; (8001574 <MX_ADC_Init+0xfc>)
 80014a8:	2200      	movs	r2, #0
 80014aa:	615a      	str	r2, [r3, #20]
  hadc.Init.LowPowerAutoWait = ADC_AUTOWAIT_DISABLE;
 80014ac:	4b31      	ldr	r3, [pc, #196]	; (8001574 <MX_ADC_Init+0xfc>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerAutoPowerOff = ADC_AUTOPOWEROFF_DISABLE;
 80014b2:	4b30      	ldr	r3, [pc, #192]	; (8001574 <MX_ADC_Init+0xfc>)
 80014b4:	2200      	movs	r2, #0
 80014b6:	61da      	str	r2, [r3, #28]
  hadc.Init.ChannelsBank = ADC_CHANNELS_BANK_A;
 80014b8:	4b2e      	ldr	r3, [pc, #184]	; (8001574 <MX_ADC_Init+0xfc>)
 80014ba:	2200      	movs	r2, #0
 80014bc:	621a      	str	r2, [r3, #32]
  hadc.Init.ContinuousConvMode = DISABLE;
 80014be:	4b2d      	ldr	r3, [pc, #180]	; (8001574 <MX_ADC_Init+0xfc>)
 80014c0:	2200      	movs	r2, #0
 80014c2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc.Init.NbrOfConversion = 4;
 80014c6:	4b2b      	ldr	r3, [pc, #172]	; (8001574 <MX_ADC_Init+0xfc>)
 80014c8:	2204      	movs	r2, #4
 80014ca:	629a      	str	r2, [r3, #40]	; 0x28
  hadc.Init.DiscontinuousConvMode = DISABLE;
 80014cc:	4b29      	ldr	r3, [pc, #164]	; (8001574 <MX_ADC_Init+0xfc>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80014d4:	4b27      	ldr	r3, [pc, #156]	; (8001574 <MX_ADC_Init+0xfc>)
 80014d6:	2210      	movs	r2, #16
 80014d8:	635a      	str	r2, [r3, #52]	; 0x34
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80014da:	4b26      	ldr	r3, [pc, #152]	; (8001574 <MX_ADC_Init+0xfc>)
 80014dc:	2200      	movs	r2, #0
 80014de:	639a      	str	r2, [r3, #56]	; 0x38
  hadc.Init.DMAContinuousRequests = DISABLE;
 80014e0:	4b24      	ldr	r3, [pc, #144]	; (8001574 <MX_ADC_Init+0xfc>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80014e8:	4822      	ldr	r0, [pc, #136]	; (8001574 <MX_ADC_Init+0xfc>)
 80014ea:	f000 ff7d 	bl	80023e8 <HAL_ADC_Init>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d001      	beq.n	80014f8 <MX_ADC_Init+0x80>
  {
    Error_Handler();
 80014f4:	f000 fc2e 	bl	8001d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_5;
 80014f8:	2305      	movs	r3, #5
 80014fa:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80014fc:	2301      	movs	r3, #1
 80014fe:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_9CYCLES;
 8001500:	2301      	movs	r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	4619      	mov	r1, r3
 8001508:	481a      	ldr	r0, [pc, #104]	; (8001574 <MX_ADC_Init+0xfc>)
 800150a:	f001 f9af 	bl	800286c <HAL_ADC_ConfigChannel>
 800150e:	4603      	mov	r3, r0
 8001510:	2b00      	cmp	r3, #0
 8001512:	d001      	beq.n	8001518 <MX_ADC_Init+0xa0>
  {
    Error_Handler();
 8001514:	f000 fc1e 	bl	8001d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 8001518:	2308      	movs	r3, #8
 800151a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 800151c:	2302      	movs	r3, #2
 800151e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001520:	1d3b      	adds	r3, r7, #4
 8001522:	4619      	mov	r1, r3
 8001524:	4813      	ldr	r0, [pc, #76]	; (8001574 <MX_ADC_Init+0xfc>)
 8001526:	f001 f9a1 	bl	800286c <HAL_ADC_ConfigChannel>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MX_ADC_Init+0xbc>
  {
    Error_Handler();
 8001530:	f000 fc10 	bl	8001d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001534:	2307      	movs	r3, #7
 8001536:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 8001538:	2303      	movs	r3, #3
 800153a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 800153c:	1d3b      	adds	r3, r7, #4
 800153e:	4619      	mov	r1, r3
 8001540:	480c      	ldr	r0, [pc, #48]	; (8001574 <MX_ADC_Init+0xfc>)
 8001542:	f001 f993 	bl	800286c <HAL_ADC_ConfigChannel>
 8001546:	4603      	mov	r3, r0
 8001548:	2b00      	cmp	r3, #0
 800154a:	d001      	beq.n	8001550 <MX_ADC_Init+0xd8>
  {
    Error_Handler();
 800154c:	f000 fc02 	bl	8001d54 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001550:	2306      	movs	r3, #6
 8001552:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8001554:	2304      	movs	r3, #4
 8001556:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001558:	1d3b      	adds	r3, r7, #4
 800155a:	4619      	mov	r1, r3
 800155c:	4805      	ldr	r0, [pc, #20]	; (8001574 <MX_ADC_Init+0xfc>)
 800155e:	f001 f985 	bl	800286c <HAL_ADC_ConfigChannel>
 8001562:	4603      	mov	r3, r0
 8001564:	2b00      	cmp	r3, #0
 8001566:	d001      	beq.n	800156c <MX_ADC_Init+0xf4>
  {
    Error_Handler();
 8001568:	f000 fbf4 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 800156c:	bf00      	nop
 800156e:	3710      	adds	r7, #16
 8001570:	46bd      	mov	sp, r7
 8001572:	bd80      	pop	{r7, pc}
 8001574:	2000020c 	.word	0x2000020c
 8001578:	40012400 	.word	0x40012400

0800157c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	b08a      	sub	sp, #40	; 0x28
 8001580:	af00      	add	r7, sp, #0
 8001582:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001584:	f107 0314 	add.w	r3, r7, #20
 8001588:	2200      	movs	r2, #0
 800158a:	601a      	str	r2, [r3, #0]
 800158c:	605a      	str	r2, [r3, #4]
 800158e:	609a      	str	r2, [r3, #8]
 8001590:	60da      	str	r2, [r3, #12]
 8001592:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	4a21      	ldr	r2, [pc, #132]	; (8001620 <HAL_ADC_MspInit+0xa4>)
 800159a:	4293      	cmp	r3, r2
 800159c:	d13b      	bne.n	8001616 <HAL_ADC_MspInit+0x9a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800159e:	4b21      	ldr	r3, [pc, #132]	; (8001624 <HAL_ADC_MspInit+0xa8>)
 80015a0:	6a1b      	ldr	r3, [r3, #32]
 80015a2:	4a20      	ldr	r2, [pc, #128]	; (8001624 <HAL_ADC_MspInit+0xa8>)
 80015a4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80015a8:	6213      	str	r3, [r2, #32]
 80015aa:	4b1e      	ldr	r3, [pc, #120]	; (8001624 <HAL_ADC_MspInit+0xa8>)
 80015ac:	6a1b      	ldr	r3, [r3, #32]
 80015ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80015b2:	613b      	str	r3, [r7, #16]
 80015b4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80015b6:	4b1b      	ldr	r3, [pc, #108]	; (8001624 <HAL_ADC_MspInit+0xa8>)
 80015b8:	69db      	ldr	r3, [r3, #28]
 80015ba:	4a1a      	ldr	r2, [pc, #104]	; (8001624 <HAL_ADC_MspInit+0xa8>)
 80015bc:	f043 0301 	orr.w	r3, r3, #1
 80015c0:	61d3      	str	r3, [r2, #28]
 80015c2:	4b18      	ldr	r3, [pc, #96]	; (8001624 <HAL_ADC_MspInit+0xa8>)
 80015c4:	69db      	ldr	r3, [r3, #28]
 80015c6:	f003 0301 	and.w	r3, r3, #1
 80015ca:	60fb      	str	r3, [r7, #12]
 80015cc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ce:	4b15      	ldr	r3, [pc, #84]	; (8001624 <HAL_ADC_MspInit+0xa8>)
 80015d0:	69db      	ldr	r3, [r3, #28]
 80015d2:	4a14      	ldr	r2, [pc, #80]	; (8001624 <HAL_ADC_MspInit+0xa8>)
 80015d4:	f043 0302 	orr.w	r3, r3, #2
 80015d8:	61d3      	str	r3, [r2, #28]
 80015da:	4b12      	ldr	r3, [pc, #72]	; (8001624 <HAL_ADC_MspInit+0xa8>)
 80015dc:	69db      	ldr	r3, [r3, #28]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC_IN5
    PA6     ------> ADC_IN6
    PA7     ------> ADC_IN7
    PB0     ------> ADC_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80015e6:	23e0      	movs	r3, #224	; 0xe0
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80015ea:	2303      	movs	r3, #3
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015f2:	f107 0314 	add.w	r3, r7, #20
 80015f6:	4619      	mov	r1, r3
 80015f8:	480b      	ldr	r0, [pc, #44]	; (8001628 <HAL_ADC_MspInit+0xac>)
 80015fa:	f001 fc85 	bl	8002f08 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80015fe:	2301      	movs	r3, #1
 8001600:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001602:	2303      	movs	r3, #3
 8001604:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2300      	movs	r3, #0
 8001608:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800160a:	f107 0314 	add.w	r3, r7, #20
 800160e:	4619      	mov	r1, r3
 8001610:	4806      	ldr	r0, [pc, #24]	; (800162c <HAL_ADC_MspInit+0xb0>)
 8001612:	f001 fc79 	bl	8002f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8001616:	bf00      	nop
 8001618:	3728      	adds	r7, #40	; 0x28
 800161a:	46bd      	mov	sp, r7
 800161c:	bd80      	pop	{r7, pc}
 800161e:	bf00      	nop
 8001620:	40012400 	.word	0x40012400
 8001624:	40023800 	.word	0x40023800
 8001628:	40020000 	.word	0x40020000
 800162c:	40020400 	.word	0x40020400

08001630 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8001630:	b580      	push	{r7, lr}
 8001632:	b082      	sub	sp, #8
 8001634:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8001636:	463b      	mov	r3, r7
 8001638:	2200      	movs	r2, #0
 800163a:	601a      	str	r2, [r3, #0]
 800163c:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <MX_DAC_Init+0x4c>)
 8001640:	4a0f      	ldr	r2, [pc, #60]	; (8001680 <MX_DAC_Init+0x50>)
 8001642:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8001644:	480d      	ldr	r0, [pc, #52]	; (800167c <MX_DAC_Init+0x4c>)
 8001646:	f001 fbca 	bl	8002dde <HAL_DAC_Init>
 800164a:	4603      	mov	r3, r0
 800164c:	2b00      	cmp	r3, #0
 800164e:	d001      	beq.n	8001654 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001650:	f000 fb80 	bl	8001d54 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8001654:	2300      	movs	r3, #0
 8001656:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001658:	2300      	movs	r3, #0
 800165a:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 800165c:	463b      	mov	r3, r7
 800165e:	2200      	movs	r2, #0
 8001660:	4619      	mov	r1, r3
 8001662:	4806      	ldr	r0, [pc, #24]	; (800167c <MX_DAC_Init+0x4c>)
 8001664:	f001 fc01 	bl	8002e6a <HAL_DAC_ConfigChannel>
 8001668:	4603      	mov	r3, r0
 800166a:	2b00      	cmp	r3, #0
 800166c:	d001      	beq.n	8001672 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800166e:	f000 fb71 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8001672:	bf00      	nop
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
 800167a:	bf00      	nop
 800167c:	20000260 	.word	0x20000260
 8001680:	40007400 	.word	0x40007400

08001684 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	b08a      	sub	sp, #40	; 0x28
 8001688:	af00      	add	r7, sp, #0
 800168a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	2200      	movs	r2, #0
 8001692:	601a      	str	r2, [r3, #0]
 8001694:	605a      	str	r2, [r3, #4]
 8001696:	609a      	str	r2, [r3, #8]
 8001698:	60da      	str	r2, [r3, #12]
 800169a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a15      	ldr	r2, [pc, #84]	; (80016f8 <HAL_DAC_MspInit+0x74>)
 80016a2:	4293      	cmp	r3, r2
 80016a4:	d123      	bne.n	80016ee <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 80016a6:	4b15      	ldr	r3, [pc, #84]	; (80016fc <HAL_DAC_MspInit+0x78>)
 80016a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016aa:	4a14      	ldr	r2, [pc, #80]	; (80016fc <HAL_DAC_MspInit+0x78>)
 80016ac:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80016b0:	6253      	str	r3, [r2, #36]	; 0x24
 80016b2:	4b12      	ldr	r3, [pc, #72]	; (80016fc <HAL_DAC_MspInit+0x78>)
 80016b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016b6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80016ba:	613b      	str	r3, [r7, #16]
 80016bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016be:	4b0f      	ldr	r3, [pc, #60]	; (80016fc <HAL_DAC_MspInit+0x78>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	4a0e      	ldr	r2, [pc, #56]	; (80016fc <HAL_DAC_MspInit+0x78>)
 80016c4:	f043 0301 	orr.w	r3, r3, #1
 80016c8:	61d3      	str	r3, [r2, #28]
 80016ca:	4b0c      	ldr	r3, [pc, #48]	; (80016fc <HAL_DAC_MspInit+0x78>)
 80016cc:	69db      	ldr	r3, [r3, #28]
 80016ce:	f003 0301 	and.w	r3, r3, #1
 80016d2:	60fb      	str	r3, [r7, #12]
 80016d4:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80016d6:	2310      	movs	r3, #16
 80016d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80016da:	2303      	movs	r3, #3
 80016dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016de:	2300      	movs	r3, #0
 80016e0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016e2:	f107 0314 	add.w	r3, r7, #20
 80016e6:	4619      	mov	r1, r3
 80016e8:	4805      	ldr	r0, [pc, #20]	; (8001700 <HAL_DAC_MspInit+0x7c>)
 80016ea:	f001 fc0d 	bl	8002f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 80016ee:	bf00      	nop
 80016f0:	3728      	adds	r7, #40	; 0x28
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40007400 	.word	0x40007400
 80016fc:	40023800 	.word	0x40023800
 8001700:	40020000 	.word	0x40020000

08001704 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b088      	sub	sp, #32
 8001708:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170a:	f107 030c 	add.w	r3, r7, #12
 800170e:	2200      	movs	r2, #0
 8001710:	601a      	str	r2, [r3, #0]
 8001712:	605a      	str	r2, [r3, #4]
 8001714:	609a      	str	r2, [r3, #8]
 8001716:	60da      	str	r2, [r3, #12]
 8001718:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800171a:	4b25      	ldr	r3, [pc, #148]	; (80017b0 <MX_GPIO_Init+0xac>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	4a24      	ldr	r2, [pc, #144]	; (80017b0 <MX_GPIO_Init+0xac>)
 8001720:	f043 0320 	orr.w	r3, r3, #32
 8001724:	61d3      	str	r3, [r2, #28]
 8001726:	4b22      	ldr	r3, [pc, #136]	; (80017b0 <MX_GPIO_Init+0xac>)
 8001728:	69db      	ldr	r3, [r3, #28]
 800172a:	f003 0320 	and.w	r3, r3, #32
 800172e:	60bb      	str	r3, [r7, #8]
 8001730:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001732:	4b1f      	ldr	r3, [pc, #124]	; (80017b0 <MX_GPIO_Init+0xac>)
 8001734:	69db      	ldr	r3, [r3, #28]
 8001736:	4a1e      	ldr	r2, [pc, #120]	; (80017b0 <MX_GPIO_Init+0xac>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	61d3      	str	r3, [r2, #28]
 800173e:	4b1c      	ldr	r3, [pc, #112]	; (80017b0 <MX_GPIO_Init+0xac>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	607b      	str	r3, [r7, #4]
 8001748:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800174a:	4b19      	ldr	r3, [pc, #100]	; (80017b0 <MX_GPIO_Init+0xac>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	4a18      	ldr	r2, [pc, #96]	; (80017b0 <MX_GPIO_Init+0xac>)
 8001750:	f043 0302 	orr.w	r3, r3, #2
 8001754:	61d3      	str	r3, [r2, #28]
 8001756:	4b16      	ldr	r3, [pc, #88]	; (80017b0 <MX_GPIO_Init+0xac>)
 8001758:	69db      	ldr	r3, [r3, #28]
 800175a:	f003 0302 	and.w	r3, r3, #2
 800175e:	603b      	str	r3, [r7, #0]
 8001760:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, GPIO_PIN_RESET);
 8001762:	2200      	movs	r2, #0
 8001764:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001768:	4812      	ldr	r0, [pc, #72]	; (80017b4 <MX_GPIO_Init+0xb0>)
 800176a:	f001 fd4d 	bl	8003208 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USER_BUTTON_1_Pin;
 800176e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001772:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001774:	2300      	movs	r3, #0
 8001776:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(USER_BUTTON_1_GPIO_Port, &GPIO_InitStruct);
 800177c:	f107 030c 	add.w	r3, r7, #12
 8001780:	4619      	mov	r1, r3
 8001782:	480c      	ldr	r0, [pc, #48]	; (80017b4 <MX_GPIO_Init+0xb0>)
 8001784:	f001 fbc0 	bl	8002f08 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD1_Pin;
 8001788:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800178c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800178e:	2301      	movs	r3, #1
 8001790:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001792:	2300      	movs	r3, #0
 8001794:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001796:	2300      	movs	r3, #0
 8001798:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LD1_GPIO_Port, &GPIO_InitStruct);
 800179a:	f107 030c 	add.w	r3, r7, #12
 800179e:	4619      	mov	r1, r3
 80017a0:	4804      	ldr	r0, [pc, #16]	; (80017b4 <MX_GPIO_Init+0xb0>)
 80017a2:	f001 fbb1 	bl	8002f08 <HAL_GPIO_Init>

}
 80017a6:	bf00      	nop
 80017a8:	3720      	adds	r7, #32
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}
 80017ae:	bf00      	nop
 80017b0:	40023800 	.word	0x40023800
 80017b4:	40020400 	.word	0x40020400

080017b8 <SV_PopulateKalmanFilter>:
// Function definitions
//--------------------------------------------------------------

//Initialize kalman structure
void SV_PopulateKalmanFilter(SV_KalmanFilter *kalmanFilter, const float measurementUncertainty, const float estimateError, const float processNoise)
    {
 80017b8:	b480      	push	{r7}
 80017ba:	b085      	sub	sp, #20
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	60b9      	str	r1, [r7, #8]
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	603b      	str	r3, [r7, #0]
	kalmanFilter->measurementUncertainty = measurementUncertainty;
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	68ba      	ldr	r2, [r7, #8]
 80017ca:	601a      	str	r2, [r3, #0]
	kalmanFilter->estimateError = estimateError;
 80017cc:	68fb      	ldr	r3, [r7, #12]
 80017ce:	687a      	ldr	r2, [r7, #4]
 80017d0:	605a      	str	r2, [r3, #4]
	kalmanFilter->processNoise = processNoise;
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	683a      	ldr	r2, [r7, #0]
 80017d6:	609a      	str	r2, [r3, #8]
	kalmanFilter->lastEstimate = 0;
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	60da      	str	r2, [r3, #12]
    }
 80017e0:	bf00      	nop
 80017e2:	3714      	adds	r7, #20
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bc80      	pop	{r7}
 80017e8:	4770      	bx	lr
	...

080017ec <SV_UpdateEstimate>:

//Update filtred value
float SV_UpdateEstimate(SV_KalmanFilter *kalmanFilter, const float measurement)
    {
 80017ec:	b5b0      	push	{r4, r5, r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
	float kalmanGain = 0;
 80017f6:	f04f 0300 	mov.w	r3, #0
 80017fa:	60fb      	str	r3, [r7, #12]
	float currentEstimate = 0;
 80017fc:	f04f 0300 	mov.w	r3, #0
 8001800:	60bb      	str	r3, [r7, #8]

	kalmanGain      = kalmanFilter->estimateError / (kalmanFilter->estimateError + kalmanFilter->measurementUncertainty);
 8001802:	687b      	ldr	r3, [r7, #4]
 8001804:	685c      	ldr	r4, [r3, #4]
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	685a      	ldr	r2, [r3, #4]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4619      	mov	r1, r3
 8001810:	4610      	mov	r0, r2
 8001812:	f7ff f9c7 	bl	8000ba4 <__addsf3>
 8001816:	4603      	mov	r3, r0
 8001818:	4619      	mov	r1, r3
 800181a:	4620      	mov	r0, r4
 800181c:	f7ff fb7e 	bl	8000f1c <__aeabi_fdiv>
 8001820:	4603      	mov	r3, r0
 8001822:	60fb      	str	r3, [r7, #12]
	currentEstimate = kalmanFilter->lastEstimate + kalmanGain * (measurement - kalmanFilter->lastEstimate);
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	68dc      	ldr	r4, [r3, #12]
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	4619      	mov	r1, r3
 800182e:	6838      	ldr	r0, [r7, #0]
 8001830:	f7ff f9b6 	bl	8000ba0 <__aeabi_fsub>
 8001834:	4603      	mov	r3, r0
 8001836:	68f9      	ldr	r1, [r7, #12]
 8001838:	4618      	mov	r0, r3
 800183a:	f7ff fabb 	bl	8000db4 <__aeabi_fmul>
 800183e:	4603      	mov	r3, r0
 8001840:	4619      	mov	r1, r3
 8001842:	4620      	mov	r0, r4
 8001844:	f7ff f9ae 	bl	8000ba4 <__addsf3>
 8001848:	4603      	mov	r3, r0
 800184a:	60bb      	str	r3, [r7, #8]

	if(kalmanFilter->lastEstimate > currentEstimate)
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	68db      	ldr	r3, [r3, #12]
 8001850:	4619      	mov	r1, r3
 8001852:	68b8      	ldr	r0, [r7, #8]
 8001854:	f7ff fc4c 	bl	80010f0 <__aeabi_fcmplt>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d03e      	beq.n	80018dc <SV_UpdateEstimate+0xf0>
	{
	    kalmanFilter->estimateError = (1.0 - kalmanGain) * kalmanFilter->estimateError + (kalmanFilter->lastEstimate - currentEstimate) * kalmanFilter->processNoise;
 800185e:	68f8      	ldr	r0, [r7, #12]
 8001860:	f7fe fdfa 	bl	8000458 <__aeabi_f2d>
 8001864:	4602      	mov	r2, r0
 8001866:	460b      	mov	r3, r1
 8001868:	f04f 0000 	mov.w	r0, #0
 800186c:	493e      	ldr	r1, [pc, #248]	; (8001968 <SV_UpdateEstimate+0x17c>)
 800186e:	f7fe fc93 	bl	8000198 <__aeabi_dsub>
 8001872:	4602      	mov	r2, r0
 8001874:	460b      	mov	r3, r1
 8001876:	4614      	mov	r4, r2
 8001878:	461d      	mov	r5, r3
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	685b      	ldr	r3, [r3, #4]
 800187e:	4618      	mov	r0, r3
 8001880:	f7fe fdea 	bl	8000458 <__aeabi_f2d>
 8001884:	4602      	mov	r2, r0
 8001886:	460b      	mov	r3, r1
 8001888:	4620      	mov	r0, r4
 800188a:	4629      	mov	r1, r5
 800188c:	f7fe fe3c 	bl	8000508 <__aeabi_dmul>
 8001890:	4602      	mov	r2, r0
 8001892:	460b      	mov	r3, r1
 8001894:	4614      	mov	r4, r2
 8001896:	461d      	mov	r5, r3
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	68db      	ldr	r3, [r3, #12]
 800189c:	68b9      	ldr	r1, [r7, #8]
 800189e:	4618      	mov	r0, r3
 80018a0:	f7ff f97e 	bl	8000ba0 <__aeabi_fsub>
 80018a4:	4603      	mov	r3, r0
 80018a6:	461a      	mov	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	689b      	ldr	r3, [r3, #8]
 80018ac:	4619      	mov	r1, r3
 80018ae:	4610      	mov	r0, r2
 80018b0:	f7ff fa80 	bl	8000db4 <__aeabi_fmul>
 80018b4:	4603      	mov	r3, r0
 80018b6:	4618      	mov	r0, r3
 80018b8:	f7fe fdce 	bl	8000458 <__aeabi_f2d>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4620      	mov	r0, r4
 80018c2:	4629      	mov	r1, r5
 80018c4:	f7fe fc6a 	bl	800019c <__adddf3>
 80018c8:	4602      	mov	r2, r0
 80018ca:	460b      	mov	r3, r1
 80018cc:	4610      	mov	r0, r2
 80018ce:	4619      	mov	r1, r3
 80018d0:	f7ff f912 	bl	8000af8 <__aeabi_d2f>
 80018d4:	4602      	mov	r2, r0
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	605a      	str	r2, [r3, #4]
 80018da:	e03d      	b.n	8001958 <SV_UpdateEstimate+0x16c>
	}
	else
	{
	    kalmanFilter->estimateError = (1.0 - kalmanGain) * kalmanFilter->estimateError + (currentEstimate - kalmanFilter->lastEstimate) * kalmanFilter->processNoise;
 80018dc:	68f8      	ldr	r0, [r7, #12]
 80018de:	f7fe fdbb 	bl	8000458 <__aeabi_f2d>
 80018e2:	4602      	mov	r2, r0
 80018e4:	460b      	mov	r3, r1
 80018e6:	f04f 0000 	mov.w	r0, #0
 80018ea:	491f      	ldr	r1, [pc, #124]	; (8001968 <SV_UpdateEstimate+0x17c>)
 80018ec:	f7fe fc54 	bl	8000198 <__aeabi_dsub>
 80018f0:	4602      	mov	r2, r0
 80018f2:	460b      	mov	r3, r1
 80018f4:	4614      	mov	r4, r2
 80018f6:	461d      	mov	r5, r3
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	4618      	mov	r0, r3
 80018fe:	f7fe fdab 	bl	8000458 <__aeabi_f2d>
 8001902:	4602      	mov	r2, r0
 8001904:	460b      	mov	r3, r1
 8001906:	4620      	mov	r0, r4
 8001908:	4629      	mov	r1, r5
 800190a:	f7fe fdfd 	bl	8000508 <__aeabi_dmul>
 800190e:	4602      	mov	r2, r0
 8001910:	460b      	mov	r3, r1
 8001912:	4614      	mov	r4, r2
 8001914:	461d      	mov	r5, r3
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	68db      	ldr	r3, [r3, #12]
 800191a:	4619      	mov	r1, r3
 800191c:	68b8      	ldr	r0, [r7, #8]
 800191e:	f7ff f93f 	bl	8000ba0 <__aeabi_fsub>
 8001922:	4603      	mov	r3, r0
 8001924:	461a      	mov	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	4619      	mov	r1, r3
 800192c:	4610      	mov	r0, r2
 800192e:	f7ff fa41 	bl	8000db4 <__aeabi_fmul>
 8001932:	4603      	mov	r3, r0
 8001934:	4618      	mov	r0, r3
 8001936:	f7fe fd8f 	bl	8000458 <__aeabi_f2d>
 800193a:	4602      	mov	r2, r0
 800193c:	460b      	mov	r3, r1
 800193e:	4620      	mov	r0, r4
 8001940:	4629      	mov	r1, r5
 8001942:	f7fe fc2b 	bl	800019c <__adddf3>
 8001946:	4602      	mov	r2, r0
 8001948:	460b      	mov	r3, r1
 800194a:	4610      	mov	r0, r2
 800194c:	4619      	mov	r1, r3
 800194e:	f7ff f8d3 	bl	8000af8 <__aeabi_d2f>
 8001952:	4602      	mov	r2, r0
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	605a      	str	r2, [r3, #4]
	}

	kalmanFilter->lastEstimate = currentEstimate;
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	68ba      	ldr	r2, [r7, #8]
 800195c:	60da      	str	r2, [r3, #12]
	return currentEstimate;
 800195e:	68bb      	ldr	r3, [r7, #8]
    }
 8001960:	4618      	mov	r0, r3
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bdb0      	pop	{r4, r5, r7, pc}
 8001968:	3ff00000 	.word	0x3ff00000

0800196c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800196c:	b580      	push	{r7, lr}
 800196e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001970:	f000 fccb 	bl	800230a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001974:	f000 f84c 	bl	8001a10 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001978:	f7ff fec4 	bl	8001704 <MX_GPIO_Init>
  MX_ADC_Init();
 800197c:	f7ff fd7c 	bl	8001478 <MX_ADC_Init>
  MX_USART1_UART_Init();
 8001980:	f000 fc30 	bl	80021e4 <MX_USART1_UART_Init>
  MX_TIM2_Init();
 8001984:	f000 fbc6 	bl	8002114 <MX_TIM2_Init>
  MX_RTC_Init();
 8001988:	f000 fab0 	bl	8001eec <MX_RTC_Init>
  MX_DAC_Init();
 800198c:	f7ff fe50 	bl	8001630 <MX_DAC_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8001990:	f000 f8a6 	bl	8001ae0 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  RetargetInit(&huart1);
 8001994:	4816      	ldr	r0, [pc, #88]	; (80019f0 <main+0x84>)
 8001996:	f000 f9e3 	bl	8001d60 <RetargetInit>

  SV_PopulateKalmanFilter(&AdcKalman1, 2, 2, 0.1);
 800199a:	4b16      	ldr	r3, [pc, #88]	; (80019f4 <main+0x88>)
 800199c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019a0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019a4:	4814      	ldr	r0, [pc, #80]	; (80019f8 <main+0x8c>)
 80019a6:	f7ff ff07 	bl	80017b8 <SV_PopulateKalmanFilter>
  SV_PopulateKalmanFilter(&AdcKalman2, 2, 2, 0.1);
 80019aa:	4b12      	ldr	r3, [pc, #72]	; (80019f4 <main+0x88>)
 80019ac:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019b0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019b4:	4811      	ldr	r0, [pc, #68]	; (80019fc <main+0x90>)
 80019b6:	f7ff feff 	bl	80017b8 <SV_PopulateKalmanFilter>
  SV_PopulateKalmanFilter(&AdcKalman3, 2, 2, 0.1);
 80019ba:	4b0e      	ldr	r3, [pc, #56]	; (80019f4 <main+0x88>)
 80019bc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019c0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019c4:	480e      	ldr	r0, [pc, #56]	; (8001a00 <main+0x94>)
 80019c6:	f7ff fef7 	bl	80017b8 <SV_PopulateKalmanFilter>
  SV_PopulateKalmanFilter(&AdcKalman4, 2, 2, 0.1);
 80019ca:	4b0a      	ldr	r3, [pc, #40]	; (80019f4 <main+0x88>)
 80019cc:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80019d0:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019d4:	480b      	ldr	r0, [pc, #44]	; (8001a04 <main+0x98>)
 80019d6:	f7ff feef 	bl	80017b8 <SV_PopulateKalmanFilter>

  HAL_GPIO_WritePin(LD1_GPIO_Port, LD1_Pin, SET);
 80019da:	2201      	movs	r2, #1
 80019dc:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80019e0:	4809      	ldr	r0, [pc, #36]	; (8001a08 <main+0x9c>)
 80019e2:	f001 fc11 	bl	8003208 <HAL_GPIO_WritePin>
  HAL_TIM_Base_Start_IT(&htim2);
 80019e6:	4809      	ldr	r0, [pc, #36]	; (8001a0c <main+0xa0>)
 80019e8:	f002 fd8c 	bl	8004504 <HAL_TIM_Base_Start_IT>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80019ec:	e7fe      	b.n	80019ec <main+0x80>
 80019ee:	bf00      	nop
 80019f0:	20000304 	.word	0x20000304
 80019f4:	3dcccccd 	.word	0x3dcccccd
 80019f8:	200002b4 	.word	0x200002b4
 80019fc:	20000348 	.word	0x20000348
 8001a00:	20000278 	.word	0x20000278
 8001a04:	20000288 	.word	0x20000288
 8001a08:	40020400 	.word	0x40020400
 8001a0c:	20000390 	.word	0x20000390

08001a10 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b096      	sub	sp, #88	; 0x58
 8001a14:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a16:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a1a:	2234      	movs	r2, #52	; 0x34
 8001a1c:	2100      	movs	r1, #0
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f003 fbc4 	bl	80051ac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a24:	f107 0310 	add.w	r3, r7, #16
 8001a28:	2200      	movs	r2, #0
 8001a2a:	601a      	str	r2, [r3, #0]
 8001a2c:	605a      	str	r2, [r3, #4]
 8001a2e:	609a      	str	r2, [r3, #8]
 8001a30:	60da      	str	r2, [r3, #12]
 8001a32:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a34:	1d3b      	adds	r3, r7, #4
 8001a36:	2200      	movs	r2, #0
 8001a38:	601a      	str	r2, [r3, #0]
 8001a3a:	605a      	str	r2, [r3, #4]
 8001a3c:	609a      	str	r2, [r3, #8]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001a3e:	4b27      	ldr	r3, [pc, #156]	; (8001adc <SystemClock_Config+0xcc>)
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f423 53c0 	bic.w	r3, r3, #6144	; 0x1800
 8001a46:	4a25      	ldr	r2, [pc, #148]	; (8001adc <SystemClock_Config+0xcc>)
 8001a48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001a4c:	6013      	str	r3, [r2, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI
 8001a4e:	230b      	movs	r3, #11
 8001a50:	627b      	str	r3, [r7, #36]	; 0x24
                              |RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001a52:	2301      	movs	r3, #1
 8001a54:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a56:	2301      	movs	r3, #1
 8001a58:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a5a:	2310      	movs	r3, #16
 8001a5c:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001a5e:	2301      	movs	r3, #1
 8001a60:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a62:	2302      	movs	r3, #2
 8001a64:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001a66:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001a6a:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL12;
 8001a6c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8001a70:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLDIV = RCC_PLL_DIV3;
 8001a72:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 8001a76:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a78:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f001 fbdb 	bl	8003238 <HAL_RCC_OscConfig>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2b00      	cmp	r3, #0
 8001a86:	d001      	beq.n	8001a8c <SystemClock_Config+0x7c>
  {
    Error_Handler();
 8001a88:	f000 f964 	bl	8001d54 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a8c:	230f      	movs	r3, #15
 8001a8e:	613b      	str	r3, [r7, #16]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a90:	2303      	movs	r3, #3
 8001a92:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a94:	2300      	movs	r3, #0
 8001a96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001aa0:	f107 0310 	add.w	r3, r7, #16
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f001 fef6 	bl	8003898 <HAL_RCC_ClockConfig>
 8001aac:	4603      	mov	r3, r0
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d001      	beq.n	8001ab6 <SystemClock_Config+0xa6>
  {
    Error_Handler();
 8001ab2:	f000 f94f 	bl	8001d54 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001ab6:	2301      	movs	r3, #1
 8001ab8:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001aba:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001abe:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001ac0:	1d3b      	adds	r3, r7, #4
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f002 f97c 	bl	8003dc0 <HAL_RCCEx_PeriphCLKConfig>
 8001ac8:	4603      	mov	r3, r0
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d001      	beq.n	8001ad2 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001ace:	f000 f941 	bl	8001d54 <Error_Handler>
  }
}
 8001ad2:	bf00      	nop
 8001ad4:	3758      	adds	r7, #88	; 0x58
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	40007000 	.word	0x40007000

08001ae0 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	af00      	add	r7, sp, #0
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	2100      	movs	r1, #0
 8001ae8:	201c      	movs	r0, #28
 8001aea:	f001 f942 	bl	8002d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001aee:	201c      	movs	r0, #28
 8001af0:	f001 f95b 	bl	8002daa <HAL_NVIC_EnableIRQ>
}
 8001af4:	bf00      	nop
 8001af6:	bd80      	pop	{r7, pc}

08001af8 <SetChannel>:

/* USER CODE BEGIN 4 */

//set ADC channel for next sampling
void SetChannel(uint32_t Channel)
{
 8001af8:	b580      	push	{r7, lr}
 8001afa:	b086      	sub	sp, #24
 8001afc:	af00      	add	r7, sp, #0
 8001afe:	6078      	str	r0, [r7, #4]
	  ADC_ChannelConfTypeDef sConfig = {0};
 8001b00:	f107 030c 	add.w	r3, r7, #12
 8001b04:	2200      	movs	r2, #0
 8001b06:	601a      	str	r2, [r3, #0]
 8001b08:	605a      	str	r2, [r3, #4]
 8001b0a:	609a      	str	r2, [r3, #8]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = Channel;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	60fb      	str	r3, [r7, #12]
	  sConfig.Rank = 1;
 8001b10:	2301      	movs	r3, #1
 8001b12:	613b      	str	r3, [r7, #16]
	  sConfig.SamplingTime = ADC_SAMPLETIME_9CYCLES;
 8001b14:	2301      	movs	r3, #1
 8001b16:	617b      	str	r3, [r7, #20]
	  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8001b18:	f107 030c 	add.w	r3, r7, #12
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4806      	ldr	r0, [pc, #24]	; (8001b38 <SetChannel+0x40>)
 8001b20:	f000 fea4 	bl	800286c <HAL_ADC_ConfigChannel>
 8001b24:	4603      	mov	r3, r0
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d001      	beq.n	8001b2e <SetChannel+0x36>
	  {
	    Error_Handler();
 8001b2a:	f000 f913 	bl	8001d54 <Error_Handler>
	  }
}
 8001b2e:	bf00      	nop
 8001b30:	3718      	adds	r7, #24
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000020c 	.word	0x2000020c

08001b3c <ReadMultiADC>:

// reads four ADC channels in polling method
void ReadMultiADC()
{
 8001b3c:	b580      	push	{r7, lr}
 8001b3e:	af00      	add	r7, sp, #0

	  // SWITCH TO CH0
	  SetChannel(ADC_CHANNEL_5);
 8001b40:	2005      	movs	r0, #5
 8001b42:	f7ff ffd9 	bl	8001af8 <SetChannel>
	  // CH0
	  HAL_ADC_Start(&hadc);
 8001b46:	4827      	ldr	r0, [pc, #156]	; (8001be4 <ReadMultiADC+0xa8>)
 8001b48:	f000 fd94 	bl	8002674 <HAL_ADC_Start>

	  if(HAL_ADC_PollForConversion(&hadc, 10) == HAL_OK)
 8001b4c:	210a      	movs	r1, #10
 8001b4e:	4825      	ldr	r0, [pc, #148]	; (8001be4 <ReadMultiADC+0xa8>)
 8001b50:	f000 fdf0 	bl	8002734 <HAL_ADC_PollForConversion>
 8001b54:	4603      	mov	r3, r0
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d106      	bne.n	8001b68 <ReadMultiADC+0x2c>
	  {
	      Adc_Values[0] = HAL_ADC_GetValue(&hadc);
 8001b5a:	4822      	ldr	r0, [pc, #136]	; (8001be4 <ReadMultiADC+0xa8>)
 8001b5c:	f000 fe7a 	bl	8002854 <HAL_ADC_GetValue>
 8001b60:	4603      	mov	r3, r0
 8001b62:	b29a      	uxth	r2, r3
 8001b64:	4b20      	ldr	r3, [pc, #128]	; (8001be8 <ReadMultiADC+0xac>)
 8001b66:	801a      	strh	r2, [r3, #0]
	  }

	  // SWITCH TO CH1
	  SetChannel(ADC_CHANNEL_8);
 8001b68:	2008      	movs	r0, #8
 8001b6a:	f7ff ffc5 	bl	8001af8 <SetChannel>
	  //CH1
	  HAL_ADC_Start(&hadc);
 8001b6e:	481d      	ldr	r0, [pc, #116]	; (8001be4 <ReadMultiADC+0xa8>)
 8001b70:	f000 fd80 	bl	8002674 <HAL_ADC_Start>

	  if(HAL_ADC_PollForConversion(&hadc, 10) == HAL_OK)
 8001b74:	210a      	movs	r1, #10
 8001b76:	481b      	ldr	r0, [pc, #108]	; (8001be4 <ReadMultiADC+0xa8>)
 8001b78:	f000 fddc 	bl	8002734 <HAL_ADC_PollForConversion>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d106      	bne.n	8001b90 <ReadMultiADC+0x54>
	  {
	      Adc_Values[1] = HAL_ADC_GetValue(&hadc);
 8001b82:	4818      	ldr	r0, [pc, #96]	; (8001be4 <ReadMultiADC+0xa8>)
 8001b84:	f000 fe66 	bl	8002854 <HAL_ADC_GetValue>
 8001b88:	4603      	mov	r3, r0
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	4b16      	ldr	r3, [pc, #88]	; (8001be8 <ReadMultiADC+0xac>)
 8001b8e:	805a      	strh	r2, [r3, #2]
	  }

	  // SWITCH TO CH1
	  SetChannel(ADC_CHANNEL_7);
 8001b90:	2007      	movs	r0, #7
 8001b92:	f7ff ffb1 	bl	8001af8 <SetChannel>
	  //CH1
	  HAL_ADC_Start(&hadc);
 8001b96:	4813      	ldr	r0, [pc, #76]	; (8001be4 <ReadMultiADC+0xa8>)
 8001b98:	f000 fd6c 	bl	8002674 <HAL_ADC_Start>

	  if(HAL_ADC_PollForConversion(&hadc, 10) == HAL_OK)
 8001b9c:	210a      	movs	r1, #10
 8001b9e:	4811      	ldr	r0, [pc, #68]	; (8001be4 <ReadMultiADC+0xa8>)
 8001ba0:	f000 fdc8 	bl	8002734 <HAL_ADC_PollForConversion>
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	d106      	bne.n	8001bb8 <ReadMultiADC+0x7c>
	  {
	      Adc_Values[2] = HAL_ADC_GetValue(&hadc);
 8001baa:	480e      	ldr	r0, [pc, #56]	; (8001be4 <ReadMultiADC+0xa8>)
 8001bac:	f000 fe52 	bl	8002854 <HAL_ADC_GetValue>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	b29a      	uxth	r2, r3
 8001bb4:	4b0c      	ldr	r3, [pc, #48]	; (8001be8 <ReadMultiADC+0xac>)
 8001bb6:	809a      	strh	r2, [r3, #4]
	  }

	  // SWITCH TO CH1
	  SetChannel(ADC_CHANNEL_6);
 8001bb8:	2006      	movs	r0, #6
 8001bba:	f7ff ff9d 	bl	8001af8 <SetChannel>
	  //CH1
	  HAL_ADC_Start(&hadc);
 8001bbe:	4809      	ldr	r0, [pc, #36]	; (8001be4 <ReadMultiADC+0xa8>)
 8001bc0:	f000 fd58 	bl	8002674 <HAL_ADC_Start>

	  if(HAL_ADC_PollForConversion(&hadc, 10) == HAL_OK)
 8001bc4:	210a      	movs	r1, #10
 8001bc6:	4807      	ldr	r0, [pc, #28]	; (8001be4 <ReadMultiADC+0xa8>)
 8001bc8:	f000 fdb4 	bl	8002734 <HAL_ADC_PollForConversion>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	d106      	bne.n	8001be0 <ReadMultiADC+0xa4>
	  {
	      Adc_Values[3] = HAL_ADC_GetValue(&hadc);
 8001bd2:	4804      	ldr	r0, [pc, #16]	; (8001be4 <ReadMultiADC+0xa8>)
 8001bd4:	f000 fe3e 	bl	8002854 <HAL_ADC_GetValue>
 8001bd8:	4603      	mov	r3, r0
 8001bda:	b29a      	uxth	r2, r3
 8001bdc:	4b02      	ldr	r3, [pc, #8]	; (8001be8 <ReadMultiADC+0xac>)
 8001bde:	80da      	strh	r2, [r3, #6]
	  }


}
 8001be0:	bf00      	nop
 8001be2:	bd80      	pop	{r7, pc}
 8001be4:	2000020c 	.word	0x2000020c
 8001be8:	20000298 	.word	0x20000298
 8001bec:	00000000 	.word	0x00000000

08001bf0 <HAL_TIM_PeriodElapsedCallback>:

//
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
    {
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b082      	sub	sp, #8
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
	static uint32_t tempDAC;

	if(htim->Instance == TIM2)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001c00:	f040 8088 	bne.w	8001d14 <HAL_TIM_PeriodElapsedCallback+0x124>
	{
	    ReadMultiADC();
 8001c04:	f7ff ff9a 	bl	8001b3c <ReadMultiADC>
	    Adc_Kalman_calc[0] = SV_UpdateEstimate(&AdcKalman1 , Adc_Values[0]);
 8001c08:	4b47      	ldr	r3, [pc, #284]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001c0a:	881b      	ldrh	r3, [r3, #0]
 8001c0c:	4618      	mov	r0, r3
 8001c0e:	f7ff f879 	bl	8000d04 <__aeabi_ui2f>
 8001c12:	4603      	mov	r3, r0
 8001c14:	4619      	mov	r1, r3
 8001c16:	4845      	ldr	r0, [pc, #276]	; (8001d2c <HAL_TIM_PeriodElapsedCallback+0x13c>)
 8001c18:	f7ff fde8 	bl	80017ec <SV_UpdateEstimate>
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	4a44      	ldr	r2, [pc, #272]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c20:	6013      	str	r3, [r2, #0]
	    Adc_Kalman_calc[1] = SV_UpdateEstimate(&AdcKalman2 , Adc_Values[1]);
 8001c22:	4b41      	ldr	r3, [pc, #260]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001c24:	885b      	ldrh	r3, [r3, #2]
 8001c26:	4618      	mov	r0, r3
 8001c28:	f7ff f86c 	bl	8000d04 <__aeabi_ui2f>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4840      	ldr	r0, [pc, #256]	; (8001d34 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001c32:	f7ff fddb 	bl	80017ec <SV_UpdateEstimate>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4a3d      	ldr	r2, [pc, #244]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c3a:	6053      	str	r3, [r2, #4]
	    Adc_Kalman_calc[2] = SV_UpdateEstimate(&AdcKalman3 , Adc_Values[2]);
 8001c3c:	4b3a      	ldr	r3, [pc, #232]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001c3e:	889b      	ldrh	r3, [r3, #4]
 8001c40:	4618      	mov	r0, r3
 8001c42:	f7ff f85f 	bl	8000d04 <__aeabi_ui2f>
 8001c46:	4603      	mov	r3, r0
 8001c48:	4619      	mov	r1, r3
 8001c4a:	483b      	ldr	r0, [pc, #236]	; (8001d38 <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001c4c:	f7ff fdce 	bl	80017ec <SV_UpdateEstimate>
 8001c50:	4603      	mov	r3, r0
 8001c52:	4a37      	ldr	r2, [pc, #220]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c54:	6093      	str	r3, [r2, #8]
	    Adc_Kalman_calc[3] = SV_UpdateEstimate(&AdcKalman4 , Adc_Values[3]);
 8001c56:	4b34      	ldr	r3, [pc, #208]	; (8001d28 <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001c58:	88db      	ldrh	r3, [r3, #6]
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	f7ff f852 	bl	8000d04 <__aeabi_ui2f>
 8001c60:	4603      	mov	r3, r0
 8001c62:	4619      	mov	r1, r3
 8001c64:	4835      	ldr	r0, [pc, #212]	; (8001d3c <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001c66:	f7ff fdc1 	bl	80017ec <SV_UpdateEstimate>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4a30      	ldr	r2, [pc, #192]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c6e:	60d3      	str	r3, [r2, #12]

	    ADC_Mean = (Adc_Kalman_calc[0] + Adc_Kalman_calc[1] + Adc_Kalman_calc[2] + Adc_Kalman_calc[4]) / 4;
 8001c70:	4b2f      	ldr	r3, [pc, #188]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a2e      	ldr	r2, [pc, #184]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c76:	6852      	ldr	r2, [r2, #4]
 8001c78:	4611      	mov	r1, r2
 8001c7a:	4618      	mov	r0, r3
 8001c7c:	f7fe ff92 	bl	8000ba4 <__addsf3>
 8001c80:	4603      	mov	r3, r0
 8001c82:	461a      	mov	r2, r3
 8001c84:	4b2a      	ldr	r3, [pc, #168]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c86:	689b      	ldr	r3, [r3, #8]
 8001c88:	4619      	mov	r1, r3
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	f7fe ff8a 	bl	8000ba4 <__addsf3>
 8001c90:	4603      	mov	r3, r0
 8001c92:	461a      	mov	r2, r3
 8001c94:	4b26      	ldr	r3, [pc, #152]	; (8001d30 <HAL_TIM_PeriodElapsedCallback+0x140>)
 8001c96:	691b      	ldr	r3, [r3, #16]
 8001c98:	4619      	mov	r1, r3
 8001c9a:	4610      	mov	r0, r2
 8001c9c:	f7fe ff82 	bl	8000ba4 <__addsf3>
 8001ca0:	4603      	mov	r3, r0
 8001ca2:	f04f 4181 	mov.w	r1, #1082130432	; 0x40800000
 8001ca6:	4618      	mov	r0, r3
 8001ca8:	f7ff f938 	bl	8000f1c <__aeabi_fdiv>
 8001cac:	4603      	mov	r3, r0
 8001cae:	461a      	mov	r2, r3
 8001cb0:	4b23      	ldr	r3, [pc, #140]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001cb2:	601a      	str	r2, [r3, #0]

	    if(generate_sound_flag == true)
 8001cb4:	4b23      	ldr	r3, [pc, #140]	; (8001d44 <HAL_TIM_PeriodElapsedCallback+0x154>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	b2db      	uxtb	r3, r3
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d01f      	beq.n	8001cfe <HAL_TIM_PeriodElapsedCallback+0x10e>
	    {
		tempDAC = ADC_Mean * (0xFFF + 1)/3.3;
 8001cbe:	4b20      	ldr	r3, [pc, #128]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f04f 418b 	mov.w	r1, #1166016512	; 0x45800000
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff f874 	bl	8000db4 <__aeabi_fmul>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fbc2 	bl	8000458 <__aeabi_f2d>
 8001cd4:	a312      	add	r3, pc, #72	; (adr r3, 8001d20 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	f7fe fd3f 	bl	800075c <__aeabi_ddiv>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f7fe fee7 	bl	8000ab8 <__aeabi_d2uiz>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4a16      	ldr	r2, [pc, #88]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001cee:	6013      	str	r3, [r2, #0]
		HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, tempDAC);
 8001cf0:	4b15      	ldr	r3, [pc, #84]	; (8001d48 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	2100      	movs	r1, #0
 8001cf8:	4814      	ldr	r0, [pc, #80]	; (8001d4c <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001cfa:	f001 f892 	bl	8002e22 <HAL_DAC_SetValue>
	    }

	    printf("%d \r\n" , (uint16_t) ADC_Mean); //add CRC?
 8001cfe:	4b10      	ldr	r3, [pc, #64]	; (8001d40 <HAL_TIM_PeriodElapsedCallback+0x150>)
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	4618      	mov	r0, r3
 8001d04:	f7ff fa1c 	bl	8001140 <__aeabi_f2uiz>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	b29b      	uxth	r3, r3
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4810      	ldr	r0, [pc, #64]	; (8001d50 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001d10:	f003 feb4 	bl	8005a7c <iprintf>
	}
    }
 8001d14:	bf00      	nop
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}
 8001d1c:	f3af 8000 	nop.w
 8001d20:	66666666 	.word	0x66666666
 8001d24:	400a6666 	.word	0x400a6666
 8001d28:	20000298 	.word	0x20000298
 8001d2c:	200002b4 	.word	0x200002b4
 8001d30:	20000358 	.word	0x20000358
 8001d34:	20000348 	.word	0x20000348
 8001d38:	20000278 	.word	0x20000278
 8001d3c:	20000288 	.word	0x20000288
 8001d40:	20000274 	.word	0x20000274
 8001d44:	200001f8 	.word	0x200001f8
 8001d48:	200001fc 	.word	0x200001fc
 8001d4c:	20000260 	.word	0x20000260
 8001d50:	08007d60 	.word	0x08007d60

08001d54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001d58:	bf00      	nop
 8001d5a:	46bd      	mov	sp, r7
 8001d5c:	bc80      	pop	{r7}
 8001d5e:	4770      	bx	lr

08001d60 <RetargetInit>:
#define STDOUT_FILENO 1
#define STDERR_FILENO 2

UART_HandleTypeDef *gHuart;

void RetargetInit(UART_HandleTypeDef *huart) {
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b082      	sub	sp, #8
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  gHuart = huart;
 8001d68:	4a07      	ldr	r2, [pc, #28]	; (8001d88 <RetargetInit+0x28>)
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	6013      	str	r3, [r2, #0]

  /* Disable I/O buffering for STDOUT stream, so that
   * chars are sent out as soon as they are printed. */
  setvbuf(stdout, NULL, _IONBF, 0);
 8001d6e:	4b07      	ldr	r3, [pc, #28]	; (8001d8c <RetargetInit+0x2c>)
 8001d70:	681b      	ldr	r3, [r3, #0]
 8001d72:	6898      	ldr	r0, [r3, #8]
 8001d74:	2300      	movs	r3, #0
 8001d76:	2202      	movs	r2, #2
 8001d78:	2100      	movs	r1, #0
 8001d7a:	f003 fe97 	bl	8005aac <setvbuf>
}
 8001d7e:	bf00      	nop
 8001d80:	3708      	adds	r7, #8
 8001d82:	46bd      	mov	sp, r7
 8001d84:	bd80      	pop	{r7, pc}
 8001d86:	bf00      	nop
 8001d88:	2000036c 	.word	0x2000036c
 8001d8c:	2000000c 	.word	0x2000000c

08001d90 <_isatty>:

int _isatty(int fd) {
 8001d90:	b580      	push	{r7, lr}
 8001d92:	b082      	sub	sp, #8
 8001d94:	af00      	add	r7, sp, #0
 8001d96:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db04      	blt.n	8001da8 <_isatty+0x18>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	2b02      	cmp	r3, #2
 8001da2:	dc01      	bgt.n	8001da8 <_isatty+0x18>
    return 1;
 8001da4:	2301      	movs	r3, #1
 8001da6:	e005      	b.n	8001db4 <_isatty+0x24>

  errno = EBADF;
 8001da8:	f003 f9d6 	bl	8005158 <__errno>
 8001dac:	4603      	mov	r3, r0
 8001dae:	2209      	movs	r2, #9
 8001db0:	601a      	str	r2, [r3, #0]
  return 0;
 8001db2:	2300      	movs	r3, #0
}
 8001db4:	4618      	mov	r0, r3
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}

08001dbc <_write>:

int _write(int fd, char* ptr, int len) {
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	60f8      	str	r0, [r7, #12]
 8001dc4:	60b9      	str	r1, [r7, #8]
 8001dc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDOUT_FILENO || fd == STDERR_FILENO) {
 8001dc8:	68fb      	ldr	r3, [r7, #12]
 8001dca:	2b01      	cmp	r3, #1
 8001dcc:	d002      	beq.n	8001dd4 <_write+0x18>
 8001dce:	68fb      	ldr	r3, [r7, #12]
 8001dd0:	2b02      	cmp	r3, #2
 8001dd2:	d111      	bne.n	8001df8 <_write+0x3c>
    hstatus = HAL_UART_Transmit(gHuart, (uint8_t *) ptr, len, HAL_MAX_DELAY);
 8001dd4:	4b0e      	ldr	r3, [pc, #56]	; (8001e10 <_write+0x54>)
 8001dd6:	6818      	ldr	r0, [r3, #0]
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	b29a      	uxth	r2, r3
 8001ddc:	f04f 33ff 	mov.w	r3, #4294967295
 8001de0:	68b9      	ldr	r1, [r7, #8]
 8001de2:	f002 ff56 	bl	8004c92 <HAL_UART_Transmit>
 8001de6:	4603      	mov	r3, r0
 8001de8:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001dea:	7dfb      	ldrb	r3, [r7, #23]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d101      	bne.n	8001df4 <_write+0x38>
      return len;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	e008      	b.n	8001e06 <_write+0x4a>
    else
      return EIO;
 8001df4:	2305      	movs	r3, #5
 8001df6:	e006      	b.n	8001e06 <_write+0x4a>
  }
  errno = EBADF;
 8001df8:	f003 f9ae 	bl	8005158 <__errno>
 8001dfc:	4603      	mov	r3, r0
 8001dfe:	2209      	movs	r2, #9
 8001e00:	601a      	str	r2, [r3, #0]
  return -1;
 8001e02:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	3718      	adds	r7, #24
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	2000036c 	.word	0x2000036c

08001e14 <_close>:

int _close(int fd) {
 8001e14:	b580      	push	{r7, lr}
 8001e16:	b082      	sub	sp, #8
 8001e18:	af00      	add	r7, sp, #0
 8001e1a:	6078      	str	r0, [r7, #4]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	db04      	blt.n	8001e2c <_close+0x18>
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	2b02      	cmp	r3, #2
 8001e26:	dc01      	bgt.n	8001e2c <_close+0x18>
    return 0;
 8001e28:	2300      	movs	r3, #0
 8001e2a:	e006      	b.n	8001e3a <_close+0x26>

  errno = EBADF;
 8001e2c:	f003 f994 	bl	8005158 <__errno>
 8001e30:	4603      	mov	r3, r0
 8001e32:	2209      	movs	r2, #9
 8001e34:	601a      	str	r2, [r3, #0]
  return -1;
 8001e36:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3708      	adds	r7, #8
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd80      	pop	{r7, pc}

08001e42 <_lseek>:

int _lseek(int fd, int ptr, int dir) {
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b084      	sub	sp, #16
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	60f8      	str	r0, [r7, #12]
 8001e4a:	60b9      	str	r1, [r7, #8]
 8001e4c:	607a      	str	r2, [r7, #4]
  (void) fd;
  (void) ptr;
  (void) dir;

  errno = EBADF;
 8001e4e:	f003 f983 	bl	8005158 <__errno>
 8001e52:	4603      	mov	r3, r0
 8001e54:	2209      	movs	r2, #9
 8001e56:	601a      	str	r2, [r3, #0]
  return -1;
 8001e58:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3710      	adds	r7, #16
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <_read>:

int _read(int fd, char* ptr, int len) {
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b086      	sub	sp, #24
 8001e68:	af00      	add	r7, sp, #0
 8001e6a:	60f8      	str	r0, [r7, #12]
 8001e6c:	60b9      	str	r1, [r7, #8]
 8001e6e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef hstatus;

  if (fd == STDIN_FILENO) {
 8001e70:	68fb      	ldr	r3, [r7, #12]
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d110      	bne.n	8001e98 <_read+0x34>
    hstatus = HAL_UART_Receive(gHuart, (uint8_t *) ptr, 1, HAL_MAX_DELAY);
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <_read+0x4c>)
 8001e78:	6818      	ldr	r0, [r3, #0]
 8001e7a:	f04f 33ff 	mov.w	r3, #4294967295
 8001e7e:	2201      	movs	r2, #1
 8001e80:	68b9      	ldr	r1, [r7, #8]
 8001e82:	f002 ff98 	bl	8004db6 <HAL_UART_Receive>
 8001e86:	4603      	mov	r3, r0
 8001e88:	75fb      	strb	r3, [r7, #23]
    if (hstatus == HAL_OK)
 8001e8a:	7dfb      	ldrb	r3, [r7, #23]
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d101      	bne.n	8001e94 <_read+0x30>
      return 1;
 8001e90:	2301      	movs	r3, #1
 8001e92:	e008      	b.n	8001ea6 <_read+0x42>
    else
      return EIO;
 8001e94:	2305      	movs	r3, #5
 8001e96:	e006      	b.n	8001ea6 <_read+0x42>
  }
  errno = EBADF;
 8001e98:	f003 f95e 	bl	8005158 <__errno>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2209      	movs	r2, #9
 8001ea0:	601a      	str	r2, [r3, #0]
  return -1;
 8001ea2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea6:	4618      	mov	r0, r3
 8001ea8:	3718      	adds	r7, #24
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000036c 	.word	0x2000036c

08001eb4 <_fstat>:

int _fstat(int fd, struct stat* st) {
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b082      	sub	sp, #8
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
 8001ebc:	6039      	str	r1, [r7, #0]
  if (fd >= STDIN_FILENO && fd <= STDERR_FILENO) {
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	db08      	blt.n	8001ed6 <_fstat+0x22>
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	2b02      	cmp	r3, #2
 8001ec8:	dc05      	bgt.n	8001ed6 <_fstat+0x22>
    st->st_mode = S_IFCHR;
 8001eca:	683b      	ldr	r3, [r7, #0]
 8001ecc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001ed0:	605a      	str	r2, [r3, #4]
    return 0;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	e005      	b.n	8001ee2 <_fstat+0x2e>
  }

  errno = EBADF;
 8001ed6:	f003 f93f 	bl	8005158 <__errno>
 8001eda:	4603      	mov	r3, r0
 8001edc:	2209      	movs	r2, #9
 8001ede:	601a      	str	r2, [r3, #0]
  return 0;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
	...

08001eec <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8001eec:	b580      	push	{r7, lr}
 8001eee:	b086      	sub	sp, #24
 8001ef0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ef2:	1d3b      	adds	r3, r7, #4
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	601a      	str	r2, [r3, #0]
 8001ef8:	605a      	str	r2, [r3, #4]
 8001efa:	609a      	str	r2, [r3, #8]
 8001efc:	60da      	str	r2, [r3, #12]
 8001efe:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8001f00:	2300      	movs	r3, #0
 8001f02:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001f04:	4b24      	ldr	r3, [pc, #144]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f06:	4a25      	ldr	r2, [pc, #148]	; (8001f9c <MX_RTC_Init+0xb0>)
 8001f08:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001f0a:	4b23      	ldr	r3, [pc, #140]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f0c:	2200      	movs	r2, #0
 8001f0e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8001f10:	4b21      	ldr	r3, [pc, #132]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f12:	227f      	movs	r2, #127	; 0x7f
 8001f14:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001f16:	4b20      	ldr	r3, [pc, #128]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f18:	22ff      	movs	r2, #255	; 0xff
 8001f1a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001f1c:	4b1e      	ldr	r3, [pc, #120]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f1e:	2200      	movs	r2, #0
 8001f20:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8001f22:	4b1d      	ldr	r3, [pc, #116]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001f28:	4b1b      	ldr	r3, [pc, #108]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f2a:	2200      	movs	r2, #0
 8001f2c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001f2e:	481a      	ldr	r0, [pc, #104]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f30:	f002 f850 	bl	8003fd4 <HAL_RTC_Init>
 8001f34:	4603      	mov	r3, r0
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d001      	beq.n	8001f3e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8001f3a:	f7ff ff0b 	bl	8001d54 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8001f42:	2300      	movs	r3, #0
 8001f44:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8001f46:	2300      	movs	r3, #0
 8001f48:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8001f52:	1d3b      	adds	r3, r7, #4
 8001f54:	2201      	movs	r2, #1
 8001f56:	4619      	mov	r1, r3
 8001f58:	480f      	ldr	r0, [pc, #60]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f5a:	f002 f8cc 	bl	80040f6 <HAL_RTC_SetTime>
 8001f5e:	4603      	mov	r3, r0
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d001      	beq.n	8001f68 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8001f64:	f7ff fef6 	bl	8001d54 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 8001f70:	2301      	movs	r3, #1
 8001f72:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8001f78:	463b      	mov	r3, r7
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	4806      	ldr	r0, [pc, #24]	; (8001f98 <MX_RTC_Init+0xac>)
 8001f80:	f002 f96d 	bl	800425e <HAL_RTC_SetDate>
 8001f84:	4603      	mov	r3, r0
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d001      	beq.n	8001f8e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8001f8a:	f7ff fee3 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001f8e:	bf00      	nop
 8001f90:	3718      	adds	r7, #24
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}
 8001f96:	bf00      	nop
 8001f98:	20000370 	.word	0x20000370
 8001f9c:	40002800 	.word	0x40002800

08001fa0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001fa0:	b480      	push	{r7}
 8001fa2:	b083      	sub	sp, #12
 8001fa4:	af00      	add	r7, sp, #0
 8001fa6:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	4a05      	ldr	r2, [pc, #20]	; (8001fc4 <HAL_RTC_MspInit+0x24>)
 8001fae:	4293      	cmp	r3, r2
 8001fb0:	d102      	bne.n	8001fb8 <HAL_RTC_MspInit+0x18>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fb2:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_RTC_MspInit+0x28>)
 8001fb4:	2201      	movs	r2, #1
 8001fb6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001fb8:	bf00      	nop
 8001fba:	370c      	adds	r7, #12
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	bc80      	pop	{r7}
 8001fc0:	4770      	bx	lr
 8001fc2:	bf00      	nop
 8001fc4:	40002800 	.word	0x40002800
 8001fc8:	424706d8 	.word	0x424706d8

08001fcc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b085      	sub	sp, #20
 8001fd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 8001fd2:	4b14      	ldr	r3, [pc, #80]	; (8002024 <HAL_MspInit+0x58>)
 8001fd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fd6:	4a13      	ldr	r2, [pc, #76]	; (8002024 <HAL_MspInit+0x58>)
 8001fd8:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001fdc:	6253      	str	r3, [r2, #36]	; 0x24
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <HAL_MspInit+0x58>)
 8001fe0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fe2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001fe6:	60fb      	str	r3, [r7, #12]
 8001fe8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001fea:	4b0e      	ldr	r3, [pc, #56]	; (8002024 <HAL_MspInit+0x58>)
 8001fec:	6a1b      	ldr	r3, [r3, #32]
 8001fee:	4a0d      	ldr	r2, [pc, #52]	; (8002024 <HAL_MspInit+0x58>)
 8001ff0:	f043 0301 	orr.w	r3, r3, #1
 8001ff4:	6213      	str	r3, [r2, #32]
 8001ff6:	4b0b      	ldr	r3, [pc, #44]	; (8002024 <HAL_MspInit+0x58>)
 8001ff8:	6a1b      	ldr	r3, [r3, #32]
 8001ffa:	f003 0301 	and.w	r3, r3, #1
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002002:	4b08      	ldr	r3, [pc, #32]	; (8002024 <HAL_MspInit+0x58>)
 8002004:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002006:	4a07      	ldr	r2, [pc, #28]	; (8002024 <HAL_MspInit+0x58>)
 8002008:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800200c:	6253      	str	r3, [r2, #36]	; 0x24
 800200e:	4b05      	ldr	r3, [pc, #20]	; (8002024 <HAL_MspInit+0x58>)
 8002010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002012:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002016:	607b      	str	r3, [r7, #4]
 8002018:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800201a:	bf00      	nop
 800201c:	3714      	adds	r7, #20
 800201e:	46bd      	mov	sp, r7
 8002020:	bc80      	pop	{r7}
 8002022:	4770      	bx	lr
 8002024:	40023800 	.word	0x40023800

08002028 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002028:	b480      	push	{r7}
 800202a:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 800202c:	bf00      	nop
 800202e:	46bd      	mov	sp, r7
 8002030:	bc80      	pop	{r7}
 8002032:	4770      	bx	lr

08002034 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002034:	b480      	push	{r7}
 8002036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002038:	e7fe      	b.n	8002038 <HardFault_Handler+0x4>

0800203a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800203a:	b480      	push	{r7}
 800203c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800203e:	e7fe      	b.n	800203e <MemManage_Handler+0x4>

08002040 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002044:	e7fe      	b.n	8002044 <BusFault_Handler+0x4>

08002046 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002046:	b480      	push	{r7}
 8002048:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800204a:	e7fe      	b.n	800204a <UsageFault_Handler+0x4>

0800204c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800204c:	b480      	push	{r7}
 800204e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8002050:	bf00      	nop
 8002052:	46bd      	mov	sp, r7
 8002054:	bc80      	pop	{r7}
 8002056:	4770      	bx	lr

08002058 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002058:	b480      	push	{r7}
 800205a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800205c:	bf00      	nop
 800205e:	46bd      	mov	sp, r7
 8002060:	bc80      	pop	{r7}
 8002062:	4770      	bx	lr

08002064 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002064:	b480      	push	{r7}
 8002066:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002068:	bf00      	nop
 800206a:	46bd      	mov	sp, r7
 800206c:	bc80      	pop	{r7}
 800206e:	4770      	bx	lr

08002070 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002070:	b580      	push	{r7, lr}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002074:	f000 f99c 	bl	80023b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002078:	bf00      	nop
 800207a:	bd80      	pop	{r7, pc}

0800207c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800207c:	b580      	push	{r7, lr}
 800207e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002080:	4802      	ldr	r0, [pc, #8]	; (800208c <TIM2_IRQHandler+0x10>)
 8002082:	f002 fa91 	bl	80045a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002086:	bf00      	nop
 8002088:	bd80      	pop	{r7, pc}
 800208a:	bf00      	nop
 800208c:	20000390 	.word	0x20000390

08002090 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	b086      	sub	sp, #24
 8002094:	af00      	add	r7, sp, #0
 8002096:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002098:	4a14      	ldr	r2, [pc, #80]	; (80020ec <_sbrk+0x5c>)
 800209a:	4b15      	ldr	r3, [pc, #84]	; (80020f0 <_sbrk+0x60>)
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020a4:	4b13      	ldr	r3, [pc, #76]	; (80020f4 <_sbrk+0x64>)
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d102      	bne.n	80020b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020ac:	4b11      	ldr	r3, [pc, #68]	; (80020f4 <_sbrk+0x64>)
 80020ae:	4a12      	ldr	r2, [pc, #72]	; (80020f8 <_sbrk+0x68>)
 80020b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020b2:	4b10      	ldr	r3, [pc, #64]	; (80020f4 <_sbrk+0x64>)
 80020b4:	681a      	ldr	r2, [r3, #0]
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	4413      	add	r3, r2
 80020ba:	693a      	ldr	r2, [r7, #16]
 80020bc:	429a      	cmp	r2, r3
 80020be:	d207      	bcs.n	80020d0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020c0:	f003 f84a 	bl	8005158 <__errno>
 80020c4:	4603      	mov	r3, r0
 80020c6:	220c      	movs	r2, #12
 80020c8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80020ca:	f04f 33ff 	mov.w	r3, #4294967295
 80020ce:	e009      	b.n	80020e4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80020d0:	4b08      	ldr	r3, [pc, #32]	; (80020f4 <_sbrk+0x64>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80020d6:	4b07      	ldr	r3, [pc, #28]	; (80020f4 <_sbrk+0x64>)
 80020d8:	681a      	ldr	r2, [r3, #0]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	4413      	add	r3, r2
 80020de:	4a05      	ldr	r2, [pc, #20]	; (80020f4 <_sbrk+0x64>)
 80020e0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80020e2:	68fb      	ldr	r3, [r7, #12]
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3718      	adds	r7, #24
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}
 80020ec:	20008000 	.word	0x20008000
 80020f0:	00000400 	.word	0x00000400
 80020f4:	20000200 	.word	0x20000200
 80020f8:	200003e8 	.word	0x200003e8

080020fc <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80020fc:	b480      	push	{r7}
 80020fe:	af00      	add	r7, sp, #0
#endif /* DATA_IN_ExtSRAM */
    
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH. */
 8002100:	4b03      	ldr	r3, [pc, #12]	; (8002110 <SystemInit+0x14>)
 8002102:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002106:	609a      	str	r2, [r3, #8]
#endif
}
 8002108:	bf00      	nop
 800210a:	46bd      	mov	sp, r7
 800210c:	bc80      	pop	{r7}
 800210e:	4770      	bx	lr
 8002110:	e000ed00 	.word	0xe000ed00

08002114 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002114:	b580      	push	{r7, lr}
 8002116:	b086      	sub	sp, #24
 8002118:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800211a:	f107 0308 	add.w	r3, r7, #8
 800211e:	2200      	movs	r2, #0
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	605a      	str	r2, [r3, #4]
 8002124:	609a      	str	r2, [r3, #8]
 8002126:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002128:	463b      	mov	r3, r7
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
 800212e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8002130:	4b1d      	ldr	r3, [pc, #116]	; (80021a8 <MX_TIM2_Init+0x94>)
 8002132:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002136:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 31;
 8002138:	4b1b      	ldr	r3, [pc, #108]	; (80021a8 <MX_TIM2_Init+0x94>)
 800213a:	221f      	movs	r2, #31
 800213c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800213e:	4b1a      	ldr	r3, [pc, #104]	; (80021a8 <MX_TIM2_Init+0x94>)
 8002140:	2200      	movs	r2, #0
 8002142:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8002144:	4b18      	ldr	r3, [pc, #96]	; (80021a8 <MX_TIM2_Init+0x94>)
 8002146:	f240 32e7 	movw	r2, #999	; 0x3e7
 800214a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800214c:	4b16      	ldr	r3, [pc, #88]	; (80021a8 <MX_TIM2_Init+0x94>)
 800214e:	2200      	movs	r2, #0
 8002150:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002152:	4b15      	ldr	r3, [pc, #84]	; (80021a8 <MX_TIM2_Init+0x94>)
 8002154:	2200      	movs	r2, #0
 8002156:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002158:	4813      	ldr	r0, [pc, #76]	; (80021a8 <MX_TIM2_Init+0x94>)
 800215a:	f002 f994 	bl	8004486 <HAL_TIM_Base_Init>
 800215e:	4603      	mov	r3, r0
 8002160:	2b00      	cmp	r3, #0
 8002162:	d001      	beq.n	8002168 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8002164:	f7ff fdf6 	bl	8001d54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002168:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800216c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800216e:	f107 0308 	add.w	r3, r7, #8
 8002172:	4619      	mov	r1, r3
 8002174:	480c      	ldr	r0, [pc, #48]	; (80021a8 <MX_TIM2_Init+0x94>)
 8002176:	f002 faf3 	bl	8004760 <HAL_TIM_ConfigClockSource>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d001      	beq.n	8002184 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8002180:	f7ff fde8 	bl	8001d54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002184:	2300      	movs	r3, #0
 8002186:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002188:	2300      	movs	r3, #0
 800218a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800218c:	463b      	mov	r3, r7
 800218e:	4619      	mov	r1, r3
 8002190:	4805      	ldr	r0, [pc, #20]	; (80021a8 <MX_TIM2_Init+0x94>)
 8002192:	f002 fcd3 	bl	8004b3c <HAL_TIMEx_MasterConfigSynchronization>
 8002196:	4603      	mov	r3, r0
 8002198:	2b00      	cmp	r3, #0
 800219a:	d001      	beq.n	80021a0 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 800219c:	f7ff fdda 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80021a0:	bf00      	nop
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20000390 	.word	0x20000390

080021ac <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80021ac:	b480      	push	{r7}
 80021ae:	b085      	sub	sp, #20
 80021b0:	af00      	add	r7, sp, #0
 80021b2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021bc:	d10b      	bne.n	80021d6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021be:	4b08      	ldr	r3, [pc, #32]	; (80021e0 <HAL_TIM_Base_MspInit+0x34>)
 80021c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021c2:	4a07      	ldr	r2, [pc, #28]	; (80021e0 <HAL_TIM_Base_MspInit+0x34>)
 80021c4:	f043 0301 	orr.w	r3, r3, #1
 80021c8:	6253      	str	r3, [r2, #36]	; 0x24
 80021ca:	4b05      	ldr	r3, [pc, #20]	; (80021e0 <HAL_TIM_Base_MspInit+0x34>)
 80021cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80021ce:	f003 0301 	and.w	r3, r3, #1
 80021d2:	60fb      	str	r3, [r7, #12]
 80021d4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80021d6:	bf00      	nop
 80021d8:	3714      	adds	r7, #20
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr
 80021e0:	40023800 	.word	0x40023800

080021e4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80021e4:	b580      	push	{r7, lr}
 80021e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80021e8:	4b11      	ldr	r3, [pc, #68]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 80021ea:	4a12      	ldr	r2, [pc, #72]	; (8002234 <MX_USART1_UART_Init+0x50>)
 80021ec:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80021ee:	4b10      	ldr	r3, [pc, #64]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 80021f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80021f4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80021f6:	4b0e      	ldr	r3, [pc, #56]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 80021f8:	2200      	movs	r2, #0
 80021fa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80021fc:	4b0c      	ldr	r3, [pc, #48]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 80021fe:	2200      	movs	r2, #0
 8002200:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002202:	4b0b      	ldr	r3, [pc, #44]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 8002204:	2200      	movs	r2, #0
 8002206:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002208:	4b09      	ldr	r3, [pc, #36]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 800220a:	220c      	movs	r2, #12
 800220c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800220e:	4b08      	ldr	r3, [pc, #32]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 8002210:	2200      	movs	r2, #0
 8002212:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002214:	4b06      	ldr	r3, [pc, #24]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 8002216:	2200      	movs	r2, #0
 8002218:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800221a:	4805      	ldr	r0, [pc, #20]	; (8002230 <MX_USART1_UART_Init+0x4c>)
 800221c:	f002 fcec 	bl	8004bf8 <HAL_UART_Init>
 8002220:	4603      	mov	r3, r0
 8002222:	2b00      	cmp	r3, #0
 8002224:	d001      	beq.n	800222a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002226:	f7ff fd95 	bl	8001d54 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800222a:	bf00      	nop
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop
 8002230:	20000304 	.word	0x20000304
 8002234:	40013800 	.word	0x40013800

08002238 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002238:	b580      	push	{r7, lr}
 800223a:	b08a      	sub	sp, #40	; 0x28
 800223c:	af00      	add	r7, sp, #0
 800223e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	2200      	movs	r2, #0
 8002246:	601a      	str	r2, [r3, #0]
 8002248:	605a      	str	r2, [r3, #4]
 800224a:	609a      	str	r2, [r3, #8]
 800224c:	60da      	str	r2, [r3, #12]
 800224e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a17      	ldr	r2, [pc, #92]	; (80022b4 <HAL_UART_MspInit+0x7c>)
 8002256:	4293      	cmp	r3, r2
 8002258:	d128      	bne.n	80022ac <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800225a:	4b17      	ldr	r3, [pc, #92]	; (80022b8 <HAL_UART_MspInit+0x80>)
 800225c:	6a1b      	ldr	r3, [r3, #32]
 800225e:	4a16      	ldr	r2, [pc, #88]	; (80022b8 <HAL_UART_MspInit+0x80>)
 8002260:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002264:	6213      	str	r3, [r2, #32]
 8002266:	4b14      	ldr	r3, [pc, #80]	; (80022b8 <HAL_UART_MspInit+0x80>)
 8002268:	6a1b      	ldr	r3, [r3, #32]
 800226a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800226e:	613b      	str	r3, [r7, #16]
 8002270:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002272:	4b11      	ldr	r3, [pc, #68]	; (80022b8 <HAL_UART_MspInit+0x80>)
 8002274:	69db      	ldr	r3, [r3, #28]
 8002276:	4a10      	ldr	r2, [pc, #64]	; (80022b8 <HAL_UART_MspInit+0x80>)
 8002278:	f043 0301 	orr.w	r3, r3, #1
 800227c:	61d3      	str	r3, [r2, #28]
 800227e:	4b0e      	ldr	r3, [pc, #56]	; (80022b8 <HAL_UART_MspInit+0x80>)
 8002280:	69db      	ldr	r3, [r3, #28]
 8002282:	f003 0301 	and.w	r3, r3, #1
 8002286:	60fb      	str	r3, [r7, #12]
 8002288:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800228a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800228e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002290:	2302      	movs	r3, #2
 8002292:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002294:	2300      	movs	r3, #0
 8002296:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002298:	2303      	movs	r3, #3
 800229a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800229c:	2307      	movs	r3, #7
 800229e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a0:	f107 0314 	add.w	r3, r7, #20
 80022a4:	4619      	mov	r1, r3
 80022a6:	4805      	ldr	r0, [pc, #20]	; (80022bc <HAL_UART_MspInit+0x84>)
 80022a8:	f000 fe2e 	bl	8002f08 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 80022ac:	bf00      	nop
 80022ae:	3728      	adds	r7, #40	; 0x28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bd80      	pop	{r7, pc}
 80022b4:	40013800 	.word	0x40013800
 80022b8:	40023800 	.word	0x40023800
 80022bc:	40020000 	.word	0x40020000

080022c0 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  movs r1, #0
 80022c0:	2100      	movs	r1, #0
  b LoopCopyDataInit
 80022c2:	e003      	b.n	80022cc <LoopCopyDataInit>

080022c4 <CopyDataInit>:

CopyDataInit:
  ldr r3, =_sidata
 80022c4:	4b0b      	ldr	r3, [pc, #44]	; (80022f4 <LoopFillZerobss+0x14>)
  ldr r3, [r3, r1]
 80022c6:	585b      	ldr	r3, [r3, r1]
  str r3, [r0, r1]
 80022c8:	5043      	str	r3, [r0, r1]
  adds r1, r1, #4
 80022ca:	3104      	adds	r1, #4

080022cc <LoopCopyDataInit>:

LoopCopyDataInit:
  ldr r0, =_sdata
 80022cc:	480a      	ldr	r0, [pc, #40]	; (80022f8 <LoopFillZerobss+0x18>)
  ldr r3, =_edata
 80022ce:	4b0b      	ldr	r3, [pc, #44]	; (80022fc <LoopFillZerobss+0x1c>)
  adds r2, r0, r1
 80022d0:	1842      	adds	r2, r0, r1
  cmp r2, r3
 80022d2:	429a      	cmp	r2, r3
  bcc CopyDataInit
 80022d4:	d3f6      	bcc.n	80022c4 <CopyDataInit>
  ldr r2, =_sbss
 80022d6:	4a0a      	ldr	r2, [pc, #40]	; (8002300 <LoopFillZerobss+0x20>)
  b LoopFillZerobss
 80022d8:	e002      	b.n	80022e0 <LoopFillZerobss>

080022da <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
  movs r3, #0
 80022da:	2300      	movs	r3, #0
  str r3, [r2], #4
 80022dc:	f842 3b04 	str.w	r3, [r2], #4

080022e0 <LoopFillZerobss>:

LoopFillZerobss:
  ldr r3, = _ebss
 80022e0:	4b08      	ldr	r3, [pc, #32]	; (8002304 <LoopFillZerobss+0x24>)
  cmp r2, r3
 80022e2:	429a      	cmp	r2, r3
  bcc FillZerobss
 80022e4:	d3f9      	bcc.n	80022da <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80022e6:	f7ff ff09 	bl	80020fc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022ea:	f002 ff3b 	bl	8005164 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022ee:	f7ff fb3d 	bl	800196c <main>
  bx lr
 80022f2:	4770      	bx	lr
  ldr r3, =_sidata
 80022f4:	0800817c 	.word	0x0800817c
  ldr r0, =_sdata
 80022f8:	20000000 	.word	0x20000000
  ldr r3, =_edata
 80022fc:	200001dc 	.word	0x200001dc
  ldr r2, =_sbss
 8002300:	200001dc 	.word	0x200001dc
  ldr r3, = _ebss
 8002304:	200003e4 	.word	0x200003e4

08002308 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002308:	e7fe      	b.n	8002308 <ADC1_IRQHandler>

0800230a <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800230a:	b580      	push	{r7, lr}
 800230c:	b082      	sub	sp, #8
 800230e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002310:	2300      	movs	r3, #0
 8002312:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002314:	2003      	movs	r0, #3
 8002316:	f000 fd21 	bl	8002d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800231a:	2000      	movs	r0, #0
 800231c:	f000 f80e 	bl	800233c <HAL_InitTick>
 8002320:	4603      	mov	r3, r0
 8002322:	2b00      	cmp	r3, #0
 8002324:	d002      	beq.n	800232c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8002326:	2301      	movs	r3, #1
 8002328:	71fb      	strb	r3, [r7, #7]
 800232a:	e001      	b.n	8002330 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800232c:	f7ff fe4e 	bl	8001fcc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002330:	79fb      	ldrb	r3, [r7, #7]
}
 8002332:	4618      	mov	r0, r3
 8002334:	3708      	adds	r7, #8
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
	...

0800233c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800233c:	b580      	push	{r7, lr}
 800233e:	b084      	sub	sp, #16
 8002340:	af00      	add	r7, sp, #0
 8002342:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8002344:	2300      	movs	r3, #0
 8002346:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8002348:	4b16      	ldr	r3, [pc, #88]	; (80023a4 <HAL_InitTick+0x68>)
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	2b00      	cmp	r3, #0
 800234e:	d022      	beq.n	8002396 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8002350:	4b15      	ldr	r3, [pc, #84]	; (80023a8 <HAL_InitTick+0x6c>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b13      	ldr	r3, [pc, #76]	; (80023a4 <HAL_InitTick+0x68>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800235c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002360:	fbb2 f3f3 	udiv	r3, r2, r3
 8002364:	4618      	mov	r0, r3
 8002366:	f000 fd2e 	bl	8002dc6 <HAL_SYSTICK_Config>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d10f      	bne.n	8002390 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	2b0f      	cmp	r3, #15
 8002374:	d809      	bhi.n	800238a <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002376:	2200      	movs	r2, #0
 8002378:	6879      	ldr	r1, [r7, #4]
 800237a:	f04f 30ff 	mov.w	r0, #4294967295
 800237e:	f000 fcf8 	bl	8002d72 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002382:	4a0a      	ldr	r2, [pc, #40]	; (80023ac <HAL_InitTick+0x70>)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6013      	str	r3, [r2, #0]
 8002388:	e007      	b.n	800239a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	73fb      	strb	r3, [r7, #15]
 800238e:	e004      	b.n	800239a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8002390:	2301      	movs	r3, #1
 8002392:	73fb      	strb	r3, [r7, #15]
 8002394:	e001      	b.n	800239a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8002396:	2301      	movs	r3, #1
 8002398:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 800239a:	7bfb      	ldrb	r3, [r7, #15]
}
 800239c:	4618      	mov	r0, r3
 800239e:	3710      	adds	r7, #16
 80023a0:	46bd      	mov	sp, r7
 80023a2:	bd80      	pop	{r7, pc}
 80023a4:	20000008 	.word	0x20000008
 80023a8:	20000000 	.word	0x20000000
 80023ac:	20000004 	.word	0x20000004

080023b0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023b0:	b480      	push	{r7}
 80023b2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023b4:	4b05      	ldr	r3, [pc, #20]	; (80023cc <HAL_IncTick+0x1c>)
 80023b6:	681a      	ldr	r2, [r3, #0]
 80023b8:	4b05      	ldr	r3, [pc, #20]	; (80023d0 <HAL_IncTick+0x20>)
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	4413      	add	r3, r2
 80023be:	4a03      	ldr	r2, [pc, #12]	; (80023cc <HAL_IncTick+0x1c>)
 80023c0:	6013      	str	r3, [r2, #0]
}
 80023c2:	bf00      	nop
 80023c4:	46bd      	mov	sp, r7
 80023c6:	bc80      	pop	{r7}
 80023c8:	4770      	bx	lr
 80023ca:	bf00      	nop
 80023cc:	200003d0 	.word	0x200003d0
 80023d0:	20000008 	.word	0x20000008

080023d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d4:	b480      	push	{r7}
 80023d6:	af00      	add	r7, sp, #0
  return uwTick;
 80023d8:	4b02      	ldr	r3, [pc, #8]	; (80023e4 <HAL_GetTick+0x10>)
 80023da:	681b      	ldr	r3, [r3, #0]
}
 80023dc:	4618      	mov	r0, r3
 80023de:	46bd      	mov	sp, r7
 80023e0:	bc80      	pop	{r7}
 80023e2:	4770      	bx	lr
 80023e4:	200003d0 	.word	0x200003d0

080023e8 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08e      	sub	sp, #56	; 0x38
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80023f0:	2300      	movs	r3, #0
 80023f2:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  uint32_t tmp_cr1 = 0;
 80023f6:	2300      	movs	r3, #0
 80023f8:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t tmp_cr2 = 0;
 80023fa:	2300      	movs	r3, #0
 80023fc:	62fb      	str	r3, [r7, #44]	; 0x2c
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	2b00      	cmp	r3, #0
 8002402:	d101      	bne.n	8002408 <HAL_ADC_Init+0x20>
  {
    return HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	e127      	b.n	8002658 <HAL_ADC_Init+0x270>
  assert_param(IS_ADC_CHANNELSBANK(hadc->Init.ChannelsBank));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	691b      	ldr	r3, [r3, #16]
 800240c:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800240e:	687b      	ldr	r3, [r7, #4]
 8002410:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002412:	2b00      	cmp	r3, #0
 8002414:	d115      	bne.n	8002442 <HAL_ADC_Init+0x5a>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	2200      	movs	r2, #0
 800241a:	651a      	str	r2, [r3, #80]	; 0x50
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Enable SYSCFG clock to control the routing Interface (RI) */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002424:	4b8e      	ldr	r3, [pc, #568]	; (8002660 <HAL_ADC_Init+0x278>)
 8002426:	6a1b      	ldr	r3, [r3, #32]
 8002428:	4a8d      	ldr	r2, [pc, #564]	; (8002660 <HAL_ADC_Init+0x278>)
 800242a:	f043 0301 	orr.w	r3, r3, #1
 800242e:	6213      	str	r3, [r2, #32]
 8002430:	4b8b      	ldr	r3, [pc, #556]	; (8002660 <HAL_ADC_Init+0x278>)
 8002432:	6a1b      	ldr	r3, [r3, #32]
 8002434:	f003 0301 	and.w	r3, r3, #1
 8002438:	60bb      	str	r3, [r7, #8]
 800243a:	68bb      	ldr	r3, [r7, #8]
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800243c:	6878      	ldr	r0, [r7, #4]
 800243e:	f7ff f89d 	bl	800157c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002446:	f003 0310 	and.w	r3, r3, #16
 800244a:	2b00      	cmp	r3, #0
 800244c:	f040 80ff 	bne.w	800264e <HAL_ADC_Init+0x266>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002454:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002458:	f023 0302 	bic.w	r3, r3, #2
 800245c:	f043 0202 	orr.w	r2, r3, #2
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Set ADC parameters */
    
    /* Configuration of common ADC clock: clock source HSI with selectable    */
    /* prescaler                                                              */
    MODIFY_REG(ADC->CCR                 ,
 8002464:	4b7f      	ldr	r3, [pc, #508]	; (8002664 <HAL_ADC_Init+0x27c>)
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	497c      	ldr	r1, [pc, #496]	; (8002664 <HAL_ADC_Init+0x27c>)
 8002472:	4313      	orrs	r3, r2
 8002474:	604b      	str	r3, [r1, #4]
    /*  - external trigger polarity                                           */
    /*  - End of conversion selection                                         */
    /*  - DMA continuous request                                              */
    /*  - Channels bank (Banks availability depends on devices categories)    */
    /*  - continuous conversion mode                                          */
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	68da      	ldr	r2, [r3, #12]
                hadc->Init.EOCSelection                                        |
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	695b      	ldr	r3, [r3, #20]
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 800247e:	431a      	orrs	r2, r3
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002486:	4619      	mov	r1, r3
 8002488:	f44f 7300 	mov.w	r3, #512	; 0x200
 800248c:	623b      	str	r3, [r7, #32]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800248e:	6a3b      	ldr	r3, [r7, #32]
 8002490:	fa93 f3a3 	rbit	r3, r3
 8002494:	61fb      	str	r3, [r7, #28]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002496:	69fb      	ldr	r3, [r7, #28]
 8002498:	fab3 f383 	clz	r3, r3
 800249c:	b2db      	uxtb	r3, r3
 800249e:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.EOCSelection                                        |
 80024a2:	431a      	orrs	r2, r3
                hadc->Init.ChannelsBank                                        |
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
                ADC_CR2_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 80024a8:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)     );
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80024b0:	4619      	mov	r1, r3
 80024b2:	2302      	movs	r3, #2
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80024b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024b8:	fa93 f3a3 	rbit	r3, r3
 80024bc:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80024be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024c0:	fab3 f383 	clz	r3, r3
 80024c4:	b2db      	uxtb	r3, r3
 80024c6:	fa01 f303 	lsl.w	r3, r1, r3
                hadc->Init.ChannelsBank                                        |
 80024ca:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                           |
 80024cc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024ce:	4313      	orrs	r3, r2
 80024d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80024d6:	2b10      	cmp	r3, #16
 80024d8:	d007      	beq.n	80024ea <HAL_ADC_Init+0x102>
    {
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
                  hadc->Init.ExternalTrigConvEdge );
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
      tmp_cr2 |= ( hadc->Init.ExternalTrigConv    |
 80024e2:	4313      	orrs	r3, r2
 80024e4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024e6:	4313      	orrs	r3, r2
 80024e8:	62fb      	str	r3, [r7, #44]	; 0x2c
    /*  - resolution                                                          */
    /*  - auto power off (LowPowerAutoPowerOff mode)                          */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    if ((ADC_IS_ENABLE(hadc) == RESET))
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80024f4:	2b40      	cmp	r3, #64	; 0x40
 80024f6:	d04f      	beq.n	8002598 <HAL_ADC_Init+0x1b0>
    {
      tmp_cr2 |= hadc->Init.LowPowerAutoWait;
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	699b      	ldr	r3, [r3, #24]
 80024fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80024fe:	4313      	orrs	r3, r2
 8002500:	62fb      	str	r3, [r7, #44]	; 0x2c
      
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	689a      	ldr	r2, [r3, #8]
                  hadc->Init.LowPowerAutoPowerOff           |
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	69db      	ldr	r3, [r3, #28]
      tmp_cr1 |= (hadc->Init.Resolution                     |
 800250a:	4313      	orrs	r3, r2
                  ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode)  );
 800250c:	687a      	ldr	r2, [r7, #4]
 800250e:	6912      	ldr	r2, [r2, #16]
 8002510:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
 8002514:	d003      	beq.n	800251e <HAL_ADC_Init+0x136>
 8002516:	687a      	ldr	r2, [r7, #4]
 8002518:	6912      	ldr	r2, [r2, #16]
 800251a:	2a01      	cmp	r2, #1
 800251c:	d102      	bne.n	8002524 <HAL_ADC_Init+0x13c>
 800251e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002522:	e000      	b.n	8002526 <HAL_ADC_Init+0x13e>
 8002524:	2200      	movs	r2, #0
                  hadc->Init.LowPowerAutoPowerOff           |
 8002526:	4313      	orrs	r3, r2
      tmp_cr1 |= (hadc->Init.Resolution                     |
 8002528:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800252a:	4313      	orrs	r3, r2
 800252c:	633b      	str	r3, [r7, #48]	; 0x30
      
      /* Enable discontinuous mode only if continuous mode is disabled */
      /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter  */
      /*       discontinuous is set anyway, but has no effect on ADC HW.      */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8002534:	2b01      	cmp	r3, #1
 8002536:	d125      	bne.n	8002584 <HAL_ADC_Init+0x19c>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800253e:	2b00      	cmp	r3, #0
 8002540:	d114      	bne.n	800256c <HAL_ADC_Init+0x184>
        {
          /* Enable the selected ADC regular discontinuous mode */
          /* Set the number of channels to be converted in discontinuous mode */
          SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002546:	3b01      	subs	r3, #1
 8002548:	f44f 4260 	mov.w	r2, #57344	; 0xe000
 800254c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800254e:	69ba      	ldr	r2, [r7, #24]
 8002550:	fa92 f2a2 	rbit	r2, r2
 8002554:	617a      	str	r2, [r7, #20]
  return result;
 8002556:	697a      	ldr	r2, [r7, #20]
 8002558:	fab2 f282 	clz	r2, r2
 800255c:	b2d2      	uxtb	r2, r2
 800255e:	4093      	lsls	r3, r2
 8002560:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002564:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002566:	4313      	orrs	r3, r2
 8002568:	633b      	str	r3, [r7, #48]	; 0x30
 800256a:	e00b      	b.n	8002584 <HAL_ADC_Init+0x19c>
        {
          /* ADC regular group settings continuous and sequencer discontinuous*/
          /* cannot be enabled simultaneously.                                */
          
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002570:	f043 0220 	orr.w	r2, r3, #32
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	64da      	str	r2, [r3, #76]	; 0x4c
          
          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800257c:	f043 0201 	orr.w	r2, r3, #1
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	651a      	str	r2, [r3, #80]	; 0x50
        }
      }
      
      /* Update ADC configuration register CR1 with previous settings */
        MODIFY_REG(hadc->Instance->CR1,
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	685a      	ldr	r2, [r3, #4]
 800258a:	4b37      	ldr	r3, [pc, #220]	; (8002668 <HAL_ADC_Init+0x280>)
 800258c:	4013      	ands	r3, r2
 800258e:	687a      	ldr	r2, [r7, #4]
 8002590:	6812      	ldr	r2, [r2, #0]
 8002592:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002594:	430b      	orrs	r3, r1
 8002596:	6053      	str	r3, [r2, #4]
                   ADC_CR1_SCAN     ,
                   tmp_cr1           );
    }
    
    /* Update ADC configuration register CR2 with previous settings */
    MODIFY_REG(hadc->Instance->CR2    ,
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	689a      	ldr	r2, [r3, #8]
 800259e:	4b33      	ldr	r3, [pc, #204]	; (800266c <HAL_ADC_Init+0x284>)
 80025a0:	4013      	ands	r3, r2
 80025a2:	687a      	ldr	r2, [r7, #4]
 80025a4:	6812      	ldr	r2, [r2, #0]
 80025a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80025a8:	430b      	orrs	r3, r1
 80025aa:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	691b      	ldr	r3, [r3, #16]
 80025b0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80025b4:	d003      	beq.n	80025be <HAL_ADC_Init+0x1d6>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	691b      	ldr	r3, [r3, #16]
 80025ba:	2b01      	cmp	r3, #1
 80025bc:	d119      	bne.n	80025f2 <HAL_ADC_Init+0x20a>
    {
      MODIFY_REG(hadc->Instance->SQR1                         ,
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c4:	f023 71f8 	bic.w	r1, r3, #32505856	; 0x1f00000
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80025cc:	3b01      	subs	r3, #1
 80025ce:	f04f 72f8 	mov.w	r2, #32505856	; 0x1f00000
 80025d2:	613a      	str	r2, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025d4:	693a      	ldr	r2, [r7, #16]
 80025d6:	fa92 f2a2 	rbit	r2, r2
 80025da:	60fa      	str	r2, [r7, #12]
  return result;
 80025dc:	68fa      	ldr	r2, [r7, #12]
 80025de:	fab2 f282 	clz	r2, r2
 80025e2:	b2d2      	uxtb	r2, r2
 80025e4:	fa03 f202 	lsl.w	r2, r3, r2
 80025e8:	687b      	ldr	r3, [r7, #4]
 80025ea:	681b      	ldr	r3, [r3, #0]
 80025ec:	430a      	orrs	r2, r1
 80025ee:	631a      	str	r2, [r3, #48]	; 0x30
 80025f0:	e007      	b.n	8002602 <HAL_ADC_Init+0x21a>
                 ADC_SQR1_L                                   ,
                 ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion)  );
    }
    else
    {
      MODIFY_REG(hadc->Instance->SQR1,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	681b      	ldr	r3, [r3, #0]
 80025fc:	f022 72f8 	bic.w	r2, r2, #32505856	; 0x1f00000
 8002600:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding execution control bits ADON,     */
    /* JSWSTART, SWSTART and injected trigger bits JEXTEN and JEXTSEL).       */
    if ((READ_REG(hadc->Instance->CR2) & ~(ADC_CR2_ADON |
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	689a      	ldr	r2, [r3, #8]
 8002608:	4b19      	ldr	r3, [pc, #100]	; (8002670 <HAL_ADC_Init+0x288>)
 800260a:	4013      	ands	r3, r2
 800260c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800260e:	429a      	cmp	r2, r3
 8002610:	d10b      	bne.n	800262a <HAL_ADC_Init+0x242>
                                           ADC_CR2_SWSTART | ADC_CR2_JSWSTART |
                                           ADC_CR2_JEXTEN  | ADC_CR2_JEXTSEL   ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	2200      	movs	r2, #0
 8002616:	651a      	str	r2, [r3, #80]	; 0x50
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800261c:	f023 0303 	bic.w	r3, r3, #3
 8002620:	f043 0201 	orr.w	r2, r3, #1
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	64da      	str	r2, [r3, #76]	; 0x4c
 8002628:	e014      	b.n	8002654 <HAL_ADC_Init+0x26c>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800262e:	f023 0312 	bic.w	r3, r3, #18
 8002632:	f043 0210 	orr.w	r2, r3, #16
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	64da      	str	r2, [r3, #76]	; 0x4c
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800263e:	f043 0201 	orr.w	r2, r3, #1
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	651a      	str	r2, [r3, #80]	; 0x50
      
      tmp_hal_status = HAL_ERROR;
 8002646:	2301      	movs	r3, #1
 8002648:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 800264c:	e002      	b.n	8002654 <HAL_ADC_Init+0x26c>
    }
    
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  }
  
  /* Return function status */
  return tmp_hal_status;
 8002654:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
}
 8002658:	4618      	mov	r0, r3
 800265a:	3738      	adds	r7, #56	; 0x38
 800265c:	46bd      	mov	sp, r7
 800265e:	bd80      	pop	{r7, pc}
 8002660:	40023800 	.word	0x40023800
 8002664:	40012700 	.word	0x40012700
 8002668:	fcfc16ff 	.word	0xfcfc16ff
 800266c:	c0fff189 	.word	0xc0fff189
 8002670:	bf80fffe 	.word	0xbf80fffe

08002674 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800267c:	2300      	movs	r3, #0
 800267e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002686:	2b01      	cmp	r3, #1
 8002688:	d101      	bne.n	800268e <HAL_ADC_Start+0x1a>
 800268a:	2302      	movs	r3, #2
 800268c:	e04e      	b.n	800272c <HAL_ADC_Start+0xb8>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	2201      	movs	r2, #1
 8002692:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f000 fa38 	bl	8002b0c <ADC_Enable>
 800269c:	4603      	mov	r3, r0
 800269e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d141      	bne.n	800272a <HAL_ADC_Start+0xb6>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026aa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80026ae:	f023 0301 	bic.w	r3, r3, #1
 80026b2:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	64da      	str	r2, [r3, #76]	; 0x4c
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	681b      	ldr	r3, [r3, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d007      	beq.n	80026d8 <HAL_ADC_Start+0x64>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026cc:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026d0:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	64da      	str	r2, [r3, #76]	; 0x4c
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80026dc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026e4:	d106      	bne.n	80026f4 <HAL_ADC_Start+0x80>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80026ea:	f023 0206 	bic.w	r2, r3, #6
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	651a      	str	r2, [r3, #80]	; 0x50
 80026f2:	e002      	b.n	80026fa <HAL_ADC_Start+0x86>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	2200      	movs	r2, #0
 80026f8:	651a      	str	r2, [r3, #80]	; 0x50
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	2200      	movs	r2, #0
 80026fe:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	f06f 0222 	mvn.w	r2, #34	; 0x22
 800270a:	601a      	str	r2, [r3, #0]
    
    /* Enable conversion of regular group.                                    */
    /* If software start has been selected, conversion starts immediately.    */
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	689b      	ldr	r3, [r3, #8]
 8002712:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002716:	2b00      	cmp	r3, #0
 8002718:	d107      	bne.n	800272a <HAL_ADC_Start+0xb6>
    {
      /* Start ADC conversion on regular group */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_SWSTART);
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	681b      	ldr	r3, [r3, #0]
 800271e:	689a      	ldr	r2, [r3, #8]
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002728:	609a      	str	r2, [r3, #8]
    }
  }
  
  /* Return function status */
  return tmp_hal_status;
 800272a:	7bfb      	ldrb	r3, [r7, #15]
}
 800272c:	4618      	mov	r0, r3
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002734:	b580      	push	{r7, lr}
 8002736:	b084      	sub	sp, #16
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800273e:	2300      	movs	r3, #0
 8002740:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and and polling for end of each conversion. */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689b      	ldr	r3, [r3, #8]
 8002748:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800274c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002750:	d113      	bne.n	800277a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	689b      	ldr	r3, [r3, #8]
 8002758:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800275c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002760:	d10b      	bne.n	800277a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002766:	f043 0220 	orr.w	r2, r3, #32
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	64da      	str	r2, [r3, #76]	; 0x4c
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	2200      	movs	r2, #0
 8002772:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
    
    return HAL_ERROR;
 8002776:	2301      	movs	r3, #1
 8002778:	e068      	b.n	800284c <HAL_ADC_PollForConversion+0x118>
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800277a:	f7ff fe2b 	bl	80023d4 <HAL_GetTick>
 800277e:	60f8      	str	r0, [r7, #12]
  
  /* Wait until End of Conversion flag is raised */
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002780:	e021      	b.n	80027c6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002788:	d01d      	beq.n	80027c6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 800278a:	683b      	ldr	r3, [r7, #0]
 800278c:	2b00      	cmp	r3, #0
 800278e:	d007      	beq.n	80027a0 <HAL_ADC_PollForConversion+0x6c>
 8002790:	f7ff fe20 	bl	80023d4 <HAL_GetTick>
 8002794:	4602      	mov	r2, r0
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	1ad3      	subs	r3, r2, r3
 800279a:	683a      	ldr	r2, [r7, #0]
 800279c:	429a      	cmp	r2, r3
 800279e:	d212      	bcs.n	80027c6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	f003 0302 	and.w	r3, r3, #2
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d10b      	bne.n	80027c6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027b2:	f043 0204 	orr.w	r2, r3, #4
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_TIMEOUT;
 80027c2:	2303      	movs	r3, #3
 80027c4:	e042      	b.n	800284c <HAL_ADC_PollForConversion+0x118>
  while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0302 	and.w	r3, r3, #2
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d0d6      	beq.n	8002782 <HAL_ADC_PollForConversion+0x4e>
  }
  
  /* Clear end of conversion flag of regular group if low power feature     */
  /* "Auto Wait" is disabled, to not interfere with this feature until data */
  /* register is read using function HAL_ADC_GetValue().                    */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	699b      	ldr	r3, [r3, #24]
 80027d8:	2b00      	cmp	r3, #0
 80027da:	d104      	bne.n	80027e6 <HAL_ADC_PollForConversion+0xb2>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	f06f 0212 	mvn.w	r2, #18
 80027e4:	601a      	str	r2, [r3, #0]
  }
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80027ea:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	64da      	str	r2, [r3, #76]	; 0x4c
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32L1, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689b      	ldr	r3, [r3, #8]
 80027f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d124      	bne.n	800284a <HAL_ADC_PollForConversion+0x116>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002806:	2b00      	cmp	r3, #0
 8002808:	d11f      	bne.n	800284a <HAL_ADC_PollForConversion+0x116>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002810:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002814:	2b00      	cmp	r3, #0
 8002816:	d006      	beq.n	8002826 <HAL_ADC_PollForConversion+0xf2>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	689b      	ldr	r3, [r3, #8]
 800281e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002822:	2b00      	cmp	r3, #0
 8002824:	d111      	bne.n	800284a <HAL_ADC_PollForConversion+0x116>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800282a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	64da      	str	r2, [r3, #76]	; 0x4c
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002836:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800283a:	2b00      	cmp	r3, #0
 800283c:	d105      	bne.n	800284a <HAL_ADC_PollForConversion+0x116>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002842:	f043 0201 	orr.w	r2, r3, #1
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	64da      	str	r2, [r3, #76]	; 0x4c
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800284a:	2300      	movs	r3, #0
}
 800284c:	4618      	mov	r0, r3
 800284e:	3710      	adds	r7, #16
 8002850:	46bd      	mov	sp, r7
 8002852:	bd80      	pop	{r7, pc}

08002854 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002854:	b480      	push	{r7}
 8002856:	b083      	sub	sp, #12
 8002858:	af00      	add	r7, sp, #0
 800285a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002862:	4618      	mov	r0, r3
 8002864:	370c      	adds	r7, #12
 8002866:	46bd      	mov	sp, r7
 8002868:	bc80      	pop	{r7}
 800286a:	4770      	bx	lr

0800286c <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002876:	2300      	movs	r3, #0
 8002878:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0;
 800287a:	2300      	movs	r3, #0
 800287c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	f893 3048 	ldrb.w	r3, [r3, #72]	; 0x48
 8002884:	2b01      	cmp	r3, #1
 8002886:	d101      	bne.n	800288c <HAL_ADC_ConfigChannel+0x20>
 8002888:	2302      	movs	r3, #2
 800288a:	e134      	b.n	8002af6 <HAL_ADC_ConfigChannel+0x28a>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	2201      	movs	r2, #1
 8002890:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
   
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8002894:	683b      	ldr	r3, [r7, #0]
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	2b06      	cmp	r3, #6
 800289a:	d81c      	bhi.n	80028d6 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR5,
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	4613      	mov	r3, r2
 80028a8:	009b      	lsls	r3, r3, #2
 80028aa:	4413      	add	r3, r2
 80028ac:	3b05      	subs	r3, #5
 80028ae:	221f      	movs	r2, #31
 80028b0:	fa02 f303 	lsl.w	r3, r2, r3
 80028b4:	43db      	mvns	r3, r3
 80028b6:	4019      	ands	r1, r3
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	6818      	ldr	r0, [r3, #0]
 80028bc:	683b      	ldr	r3, [r7, #0]
 80028be:	685a      	ldr	r2, [r3, #4]
 80028c0:	4613      	mov	r3, r2
 80028c2:	009b      	lsls	r3, r3, #2
 80028c4:	4413      	add	r3, r2
 80028c6:	3b05      	subs	r3, #5
 80028c8:	fa00 f203 	lsl.w	r2, r0, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	430a      	orrs	r2, r1
 80028d2:	641a      	str	r2, [r3, #64]	; 0x40
 80028d4:	e07e      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR5_RK(ADC_SQR5_SQ1, sConfig->Rank),
               ADC_SQR5_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80028d6:	683b      	ldr	r3, [r7, #0]
 80028d8:	685b      	ldr	r3, [r3, #4]
 80028da:	2b0c      	cmp	r3, #12
 80028dc:	d81c      	bhi.n	8002918 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR4,
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	6bd9      	ldr	r1, [r3, #60]	; 0x3c
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	685a      	ldr	r2, [r3, #4]
 80028e8:	4613      	mov	r3, r2
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	4413      	add	r3, r2
 80028ee:	3b23      	subs	r3, #35	; 0x23
 80028f0:	221f      	movs	r2, #31
 80028f2:	fa02 f303 	lsl.w	r3, r2, r3
 80028f6:	43db      	mvns	r3, r3
 80028f8:	4019      	ands	r1, r3
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	6818      	ldr	r0, [r3, #0]
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	685a      	ldr	r2, [r3, #4]
 8002902:	4613      	mov	r3, r2
 8002904:	009b      	lsls	r3, r3, #2
 8002906:	4413      	add	r3, r2
 8002908:	3b23      	subs	r3, #35	; 0x23
 800290a:	fa00 f203 	lsl.w	r2, r0, r3
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	430a      	orrs	r2, r1
 8002914:	63da      	str	r2, [r3, #60]	; 0x3c
 8002916:	e05d      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR4_RK(ADC_SQR4_SQ7, sConfig->Rank),
               ADC_SQR4_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 18 */
  else if (sConfig->Rank < 19)
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	685b      	ldr	r3, [r3, #4]
 800291c:	2b12      	cmp	r3, #18
 800291e:	d81c      	bhi.n	800295a <HAL_ADC_ConfigChannel+0xee>
  {
    MODIFY_REG(hadc->Instance->SQR3,
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	6b99      	ldr	r1, [r3, #56]	; 0x38
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	685a      	ldr	r2, [r3, #4]
 800292a:	4613      	mov	r3, r2
 800292c:	009b      	lsls	r3, r3, #2
 800292e:	4413      	add	r3, r2
 8002930:	3b41      	subs	r3, #65	; 0x41
 8002932:	221f      	movs	r2, #31
 8002934:	fa02 f303 	lsl.w	r3, r2, r3
 8002938:	43db      	mvns	r3, r3
 800293a:	4019      	ands	r1, r3
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	6818      	ldr	r0, [r3, #0]
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	4413      	add	r3, r2
 800294a:	3b41      	subs	r3, #65	; 0x41
 800294c:	fa00 f203 	lsl.w	r2, r0, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	430a      	orrs	r2, r1
 8002956:	639a      	str	r2, [r3, #56]	; 0x38
 8002958:	e03c      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR3_RK(ADC_SQR3_SQ13, sConfig->Rank),
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 19 to 24 */
  else if (sConfig->Rank < 25)
 800295a:	683b      	ldr	r3, [r7, #0]
 800295c:	685b      	ldr	r3, [r3, #4]
 800295e:	2b18      	cmp	r3, #24
 8002960:	d81c      	bhi.n	800299c <HAL_ADC_ConfigChannel+0x130>
  {
    MODIFY_REG(hadc->Instance->SQR2,
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	3b5f      	subs	r3, #95	; 0x5f
 8002974:	221f      	movs	r2, #31
 8002976:	fa02 f303 	lsl.w	r3, r2, r3
 800297a:	43db      	mvns	r3, r3
 800297c:	4019      	ands	r1, r3
 800297e:	683b      	ldr	r3, [r7, #0]
 8002980:	6818      	ldr	r0, [r3, #0]
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685a      	ldr	r2, [r3, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	009b      	lsls	r3, r3, #2
 800298a:	4413      	add	r3, r2
 800298c:	3b5f      	subs	r3, #95	; 0x5f
 800298e:	fa00 f203 	lsl.w	r2, r0, r3
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	430a      	orrs	r2, r1
 8002998:	635a      	str	r2, [r3, #52]	; 0x34
 800299a:	e01b      	b.n	80029d4 <HAL_ADC_ConfigChannel+0x168>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 25 to 28 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1,
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685a      	ldr	r2, [r3, #4]
 80029a6:	4613      	mov	r3, r2
 80029a8:	009b      	lsls	r3, r3, #2
 80029aa:	4413      	add	r3, r2
 80029ac:	3b7d      	subs	r3, #125	; 0x7d
 80029ae:	221f      	movs	r2, #31
 80029b0:	fa02 f303 	lsl.w	r3, r2, r3
 80029b4:	43db      	mvns	r3, r3
 80029b6:	4019      	ands	r1, r3
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	6818      	ldr	r0, [r3, #0]
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	4613      	mov	r3, r2
 80029c2:	009b      	lsls	r3, r3, #2
 80029c4:	4413      	add	r3, r2
 80029c6:	3b7d      	subs	r3, #125	; 0x7d
 80029c8:	fa00 f203 	lsl.w	r2, r0, r3
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	430a      	orrs	r2, r1
 80029d2:	631a      	str	r2, [r3, #48]	; 0x30
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 0 to 9 */
  if (sConfig->Channel < ADC_CHANNEL_10)
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	2b09      	cmp	r3, #9
 80029da:	d81a      	bhi.n	8002a12 <HAL_ADC_ConfigChannel+0x1a6>
  {
    MODIFY_REG(hadc->Instance->SMPR3,
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	6959      	ldr	r1, [r3, #20]
 80029e2:	683b      	ldr	r3, [r7, #0]
 80029e4:	681a      	ldr	r2, [r3, #0]
 80029e6:	4613      	mov	r3, r2
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	4413      	add	r3, r2
 80029ec:	2207      	movs	r2, #7
 80029ee:	fa02 f303 	lsl.w	r3, r2, r3
 80029f2:	43db      	mvns	r3, r3
 80029f4:	4019      	ands	r1, r3
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	6898      	ldr	r0, [r3, #8]
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4613      	mov	r3, r2
 8002a00:	005b      	lsls	r3, r3, #1
 8002a02:	4413      	add	r3, r2
 8002a04:	fa00 f203 	lsl.w	r2, r0, r3
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	430a      	orrs	r2, r1
 8002a0e:	615a      	str	r2, [r3, #20]
 8002a10:	e042      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR3(ADC_SMPR3_SMP0, sConfig->Channel),
               ADC_SMPR3(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 10 to 19 */
  else if (sConfig->Channel < ADC_CHANNEL_20)
 8002a12:	683b      	ldr	r3, [r7, #0]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2b13      	cmp	r3, #19
 8002a18:	d81c      	bhi.n	8002a54 <HAL_ADC_ConfigChannel+0x1e8>
  {
    MODIFY_REG(hadc->Instance->SMPR2,
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	6919      	ldr	r1, [r3, #16]
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	681a      	ldr	r2, [r3, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	4413      	add	r3, r2
 8002a2a:	3b1e      	subs	r3, #30
 8002a2c:	2207      	movs	r2, #7
 8002a2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002a32:	43db      	mvns	r3, r3
 8002a34:	4019      	ands	r1, r3
 8002a36:	683b      	ldr	r3, [r7, #0]
 8002a38:	6898      	ldr	r0, [r3, #8]
 8002a3a:	683b      	ldr	r3, [r7, #0]
 8002a3c:	681a      	ldr	r2, [r3, #0]
 8002a3e:	4613      	mov	r3, r2
 8002a40:	005b      	lsls	r3, r3, #1
 8002a42:	4413      	add	r3, r2
 8002a44:	3b1e      	subs	r3, #30
 8002a46:	fa00 f203 	lsl.w	r2, r0, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	430a      	orrs	r2, r1
 8002a50:	611a      	str	r2, [r3, #16]
 8002a52:	e021      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR2(ADC_SMPR2_SMP10, sConfig->Channel),
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 20 to 26 for devices Cat.1, Cat.2, Cat.3 */
  /* For channels 20 to 29 for devices Cat4, Cat.5 */
  else if (sConfig->Channel <= ADC_SMPR1_CHANNEL_MAX)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	2b1a      	cmp	r3, #26
 8002a5a:	d81c      	bhi.n	8002a96 <HAL_ADC_ConfigChannel+0x22a>
  {
    MODIFY_REG(hadc->Instance->SMPR1,
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	68d9      	ldr	r1, [r3, #12]
 8002a62:	683b      	ldr	r3, [r7, #0]
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4613      	mov	r3, r2
 8002a68:	005b      	lsls	r3, r3, #1
 8002a6a:	4413      	add	r3, r2
 8002a6c:	3b3c      	subs	r3, #60	; 0x3c
 8002a6e:	2207      	movs	r2, #7
 8002a70:	fa02 f303 	lsl.w	r3, r2, r3
 8002a74:	43db      	mvns	r3, r3
 8002a76:	4019      	ands	r1, r3
 8002a78:	683b      	ldr	r3, [r7, #0]
 8002a7a:	6898      	ldr	r0, [r3, #8]
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	681a      	ldr	r2, [r3, #0]
 8002a80:	4613      	mov	r3, r2
 8002a82:	005b      	lsls	r3, r3, #1
 8002a84:	4413      	add	r3, r2
 8002a86:	3b3c      	subs	r3, #60	; 0x3c
 8002a88:	fa00 f203 	lsl.w	r2, r0, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	430a      	orrs	r2, r1
 8002a92:	60da      	str	r2, [r3, #12]
 8002a94:	e000      	b.n	8002a98 <HAL_ADC_ConfigChannel+0x22c>
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  /* For channels 30 to 31 for devices Cat4, Cat.5 */
  else
  {
    ADC_SMPR0_CHANNEL_SET(hadc, sConfig->SamplingTime, sConfig->Channel);
 8002a96:	bf00      	nop
  }

  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	2b10      	cmp	r3, #16
 8002a9e:	d003      	beq.n	8002aa8 <HAL_ADC_ConfigChannel+0x23c>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002aa4:	2b11      	cmp	r3, #17
 8002aa6:	d121      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x280>
  {
      if (READ_BIT(ADC->CCR, ADC_CCR_TSVREFE) == RESET)
 8002aa8:	4b15      	ldr	r3, [pc, #84]	; (8002b00 <HAL_ADC_ConfigChannel+0x294>)
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d11b      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x280>
      {
        SET_BIT(ADC->CCR, ADC_CCR_TSVREFE);
 8002ab4:	4b12      	ldr	r3, [pc, #72]	; (8002b00 <HAL_ADC_ConfigChannel+0x294>)
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	4a11      	ldr	r2, [pc, #68]	; (8002b00 <HAL_ADC_ConfigChannel+0x294>)
 8002aba:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002abe:	6053      	str	r3, [r2, #4]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002ac0:	683b      	ldr	r3, [r7, #0]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	2b10      	cmp	r3, #16
 8002ac6:	d111      	bne.n	8002aec <HAL_ADC_ConfigChannel+0x280>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8002ac8:	4b0e      	ldr	r3, [pc, #56]	; (8002b04 <HAL_ADC_ConfigChannel+0x298>)
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	4a0e      	ldr	r2, [pc, #56]	; (8002b08 <HAL_ADC_ConfigChannel+0x29c>)
 8002ace:	fba2 2303 	umull	r2, r3, r2, r3
 8002ad2:	0c9a      	lsrs	r2, r3, #18
 8002ad4:	4613      	mov	r3, r2
 8002ad6:	009b      	lsls	r3, r3, #2
 8002ad8:	4413      	add	r3, r2
 8002ada:	005b      	lsls	r3, r3, #1
 8002adc:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002ade:	e002      	b.n	8002ae6 <HAL_ADC_ConfigChannel+0x27a>
          {
            wait_loop_index--;
 8002ae0:	68bb      	ldr	r3, [r7, #8]
 8002ae2:	3b01      	subs	r3, #1
 8002ae4:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0)
 8002ae6:	68bb      	ldr	r3, [r7, #8]
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d1f9      	bne.n	8002ae0 <HAL_ADC_ConfigChannel+0x274>
        }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2200      	movs	r2, #0
 8002af0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48
  
  /* Return function status */
  return tmp_hal_status;
 8002af4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af6:	4618      	mov	r0, r3
 8002af8:	3714      	adds	r7, #20
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bc80      	pop	{r7}
 8002afe:	4770      	bx	lr
 8002b00:	40012700 	.word	0x40012700
 8002b04:	20000000 	.word	0x20000000
 8002b08:	431bde83 	.word	0x431bde83

08002b0c <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b0c:	b580      	push	{r7, lr}
 8002b0e:	b084      	sub	sp, #16
 8002b10:	af00      	add	r7, sp, #0
 8002b12:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b26:	2b40      	cmp	r3, #64	; 0x40
 8002b28:	d043      	beq.n	8002bb2 <ADC_Enable+0xa6>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	689a      	ldr	r2, [r3, #8]
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	f042 0201 	orr.w	r2, r2, #1
 8002b38:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8002b3a:	4b20      	ldr	r3, [pc, #128]	; (8002bbc <ADC_Enable+0xb0>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4a20      	ldr	r2, [pc, #128]	; (8002bc0 <ADC_Enable+0xb4>)
 8002b40:	fba2 2303 	umull	r2, r3, r2, r3
 8002b44:	0c9a      	lsrs	r2, r3, #18
 8002b46:	4613      	mov	r3, r2
 8002b48:	005b      	lsls	r3, r3, #1
 8002b4a:	4413      	add	r3, r2
 8002b4c:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002b4e:	e002      	b.n	8002b56 <ADC_Enable+0x4a>
    {
      wait_loop_index--;
 8002b50:	68bb      	ldr	r3, [r7, #8]
 8002b52:	3b01      	subs	r3, #1
 8002b54:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0)
 8002b56:	68bb      	ldr	r3, [r7, #8]
 8002b58:	2b00      	cmp	r3, #0
 8002b5a:	d1f9      	bne.n	8002b50 <ADC_Enable+0x44>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();    
 8002b5c:	f7ff fc3a 	bl	80023d4 <HAL_GetTick>
 8002b60:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b62:	e01f      	b.n	8002ba4 <ADC_Enable+0x98>
    {
      if((HAL_GetTick() - tickstart ) > ADC_ENABLE_TIMEOUT)
 8002b64:	f7ff fc36 	bl	80023d4 <HAL_GetTick>
 8002b68:	4602      	mov	r2, r0
 8002b6a:	68fb      	ldr	r3, [r7, #12]
 8002b6c:	1ad3      	subs	r3, r2, r3
 8002b6e:	2b02      	cmp	r3, #2
 8002b70:	d918      	bls.n	8002ba4 <ADC_Enable+0x98>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b7c:	2b40      	cmp	r3, #64	; 0x40
 8002b7e:	d011      	beq.n	8002ba4 <ADC_Enable+0x98>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002b84:	f043 0210 	orr.w	r2, r3, #16
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	64da      	str	r2, [r3, #76]	; 0x4c

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002b90:	f043 0201 	orr.w	r2, r3, #1
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	651a      	str	r2, [r3, #80]	; 0x50

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

          return HAL_ERROR;
 8002ba0:	2301      	movs	r3, #1
 8002ba2:	e007      	b.n	8002bb4 <ADC_Enable+0xa8>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002bae:	2b40      	cmp	r3, #64	; 0x40
 8002bb0:	d1d8      	bne.n	8002b64 <ADC_Enable+0x58>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002bb2:	2300      	movs	r3, #0
}
 8002bb4:	4618      	mov	r0, r3
 8002bb6:	3710      	adds	r7, #16
 8002bb8:	46bd      	mov	sp, r7
 8002bba:	bd80      	pop	{r7, pc}
 8002bbc:	20000000 	.word	0x20000000
 8002bc0:	431bde83 	.word	0x431bde83

08002bc4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bc4:	b480      	push	{r7}
 8002bc6:	b085      	sub	sp, #20
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	f003 0307 	and.w	r3, r3, #7
 8002bd2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002bd4:	4b0c      	ldr	r3, [pc, #48]	; (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bd6:	68db      	ldr	r3, [r3, #12]
 8002bd8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002bda:	68ba      	ldr	r2, [r7, #8]
 8002bdc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002be0:	4013      	ands	r3, r2
 8002be2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002be8:	68bb      	ldr	r3, [r7, #8]
 8002bea:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002bec:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002bf0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002bf4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002bf6:	4a04      	ldr	r2, [pc, #16]	; (8002c08 <__NVIC_SetPriorityGrouping+0x44>)
 8002bf8:	68bb      	ldr	r3, [r7, #8]
 8002bfa:	60d3      	str	r3, [r2, #12]
}
 8002bfc:	bf00      	nop
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bc80      	pop	{r7}
 8002c04:	4770      	bx	lr
 8002c06:	bf00      	nop
 8002c08:	e000ed00 	.word	0xe000ed00

08002c0c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c0c:	b480      	push	{r7}
 8002c0e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c10:	4b04      	ldr	r3, [pc, #16]	; (8002c24 <__NVIC_GetPriorityGrouping+0x18>)
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	0a1b      	lsrs	r3, r3, #8
 8002c16:	f003 0307 	and.w	r3, r3, #7
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	bc80      	pop	{r7}
 8002c20:	4770      	bx	lr
 8002c22:	bf00      	nop
 8002c24:	e000ed00 	.word	0xe000ed00

08002c28 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	b083      	sub	sp, #12
 8002c2c:	af00      	add	r7, sp, #0
 8002c2e:	4603      	mov	r3, r0
 8002c30:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	db0b      	blt.n	8002c52 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c3a:	79fb      	ldrb	r3, [r7, #7]
 8002c3c:	f003 021f 	and.w	r2, r3, #31
 8002c40:	4906      	ldr	r1, [pc, #24]	; (8002c5c <__NVIC_EnableIRQ+0x34>)
 8002c42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c46:	095b      	lsrs	r3, r3, #5
 8002c48:	2001      	movs	r0, #1
 8002c4a:	fa00 f202 	lsl.w	r2, r0, r2
 8002c4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002c52:	bf00      	nop
 8002c54:	370c      	adds	r7, #12
 8002c56:	46bd      	mov	sp, r7
 8002c58:	bc80      	pop	{r7}
 8002c5a:	4770      	bx	lr
 8002c5c:	e000e100 	.word	0xe000e100

08002c60 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	4603      	mov	r3, r0
 8002c68:	6039      	str	r1, [r7, #0]
 8002c6a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	2b00      	cmp	r3, #0
 8002c72:	db0a      	blt.n	8002c8a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	b2da      	uxtb	r2, r3
 8002c78:	490c      	ldr	r1, [pc, #48]	; (8002cac <__NVIC_SetPriority+0x4c>)
 8002c7a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c7e:	0112      	lsls	r2, r2, #4
 8002c80:	b2d2      	uxtb	r2, r2
 8002c82:	440b      	add	r3, r1
 8002c84:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c88:	e00a      	b.n	8002ca0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	b2da      	uxtb	r2, r3
 8002c8e:	4908      	ldr	r1, [pc, #32]	; (8002cb0 <__NVIC_SetPriority+0x50>)
 8002c90:	79fb      	ldrb	r3, [r7, #7]
 8002c92:	f003 030f 	and.w	r3, r3, #15
 8002c96:	3b04      	subs	r3, #4
 8002c98:	0112      	lsls	r2, r2, #4
 8002c9a:	b2d2      	uxtb	r2, r2
 8002c9c:	440b      	add	r3, r1
 8002c9e:	761a      	strb	r2, [r3, #24]
}
 8002ca0:	bf00      	nop
 8002ca2:	370c      	adds	r7, #12
 8002ca4:	46bd      	mov	sp, r7
 8002ca6:	bc80      	pop	{r7}
 8002ca8:	4770      	bx	lr
 8002caa:	bf00      	nop
 8002cac:	e000e100 	.word	0xe000e100
 8002cb0:	e000ed00 	.word	0xe000ed00

08002cb4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cb4:	b480      	push	{r7}
 8002cb6:	b089      	sub	sp, #36	; 0x24
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	60b9      	str	r1, [r7, #8]
 8002cbe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	f003 0307 	and.w	r3, r3, #7
 8002cc6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cc8:	69fb      	ldr	r3, [r7, #28]
 8002cca:	f1c3 0307 	rsb	r3, r3, #7
 8002cce:	2b04      	cmp	r3, #4
 8002cd0:	bf28      	it	cs
 8002cd2:	2304      	movcs	r3, #4
 8002cd4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002cd6:	69fb      	ldr	r3, [r7, #28]
 8002cd8:	3304      	adds	r3, #4
 8002cda:	2b06      	cmp	r3, #6
 8002cdc:	d902      	bls.n	8002ce4 <NVIC_EncodePriority+0x30>
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	3b03      	subs	r3, #3
 8002ce2:	e000      	b.n	8002ce6 <NVIC_EncodePriority+0x32>
 8002ce4:	2300      	movs	r3, #0
 8002ce6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ce8:	f04f 32ff 	mov.w	r2, #4294967295
 8002cec:	69bb      	ldr	r3, [r7, #24]
 8002cee:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf2:	43da      	mvns	r2, r3
 8002cf4:	68bb      	ldr	r3, [r7, #8]
 8002cf6:	401a      	ands	r2, r3
 8002cf8:	697b      	ldr	r3, [r7, #20]
 8002cfa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002cfc:	f04f 31ff 	mov.w	r1, #4294967295
 8002d00:	697b      	ldr	r3, [r7, #20]
 8002d02:	fa01 f303 	lsl.w	r3, r1, r3
 8002d06:	43d9      	mvns	r1, r3
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d0c:	4313      	orrs	r3, r2
         );
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3724      	adds	r7, #36	; 0x24
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bc80      	pop	{r7}
 8002d16:	4770      	bx	lr

08002d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b082      	sub	sp, #8
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	3b01      	subs	r3, #1
 8002d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002d28:	d301      	bcc.n	8002d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d2a:	2301      	movs	r3, #1
 8002d2c:	e00f      	b.n	8002d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d2e:	4a0a      	ldr	r2, [pc, #40]	; (8002d58 <SysTick_Config+0x40>)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	3b01      	subs	r3, #1
 8002d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d36:	210f      	movs	r1, #15
 8002d38:	f04f 30ff 	mov.w	r0, #4294967295
 8002d3c:	f7ff ff90 	bl	8002c60 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d40:	4b05      	ldr	r3, [pc, #20]	; (8002d58 <SysTick_Config+0x40>)
 8002d42:	2200      	movs	r2, #0
 8002d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d46:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <SysTick_Config+0x40>)
 8002d48:	2207      	movs	r2, #7
 8002d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	3708      	adds	r7, #8
 8002d52:	46bd      	mov	sp, r7
 8002d54:	bd80      	pop	{r7, pc}
 8002d56:	bf00      	nop
 8002d58:	e000e010 	.word	0xe000e010

08002d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b082      	sub	sp, #8
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f7ff ff2d 	bl	8002bc4 <__NVIC_SetPriorityGrouping>
}
 8002d6a:	bf00      	nop
 8002d6c:	3708      	adds	r7, #8
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d72:	b580      	push	{r7, lr}
 8002d74:	b086      	sub	sp, #24
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	4603      	mov	r3, r0
 8002d7a:	60b9      	str	r1, [r7, #8]
 8002d7c:	607a      	str	r2, [r7, #4]
 8002d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8002d80:	2300      	movs	r3, #0
 8002d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002d84:	f7ff ff42 	bl	8002c0c <__NVIC_GetPriorityGrouping>
 8002d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002d8a:	687a      	ldr	r2, [r7, #4]
 8002d8c:	68b9      	ldr	r1, [r7, #8]
 8002d8e:	6978      	ldr	r0, [r7, #20]
 8002d90:	f7ff ff90 	bl	8002cb4 <NVIC_EncodePriority>
 8002d94:	4602      	mov	r2, r0
 8002d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002d9a:	4611      	mov	r1, r2
 8002d9c:	4618      	mov	r0, r3
 8002d9e:	f7ff ff5f 	bl	8002c60 <__NVIC_SetPriority>
}
 8002da2:	bf00      	nop
 8002da4:	3718      	adds	r7, #24
 8002da6:	46bd      	mov	sp, r7
 8002da8:	bd80      	pop	{r7, pc}

08002daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002daa:	b580      	push	{r7, lr}
 8002dac:	b082      	sub	sp, #8
 8002dae:	af00      	add	r7, sp, #0
 8002db0:	4603      	mov	r3, r0
 8002db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7ff ff35 	bl	8002c28 <__NVIC_EnableIRQ>
}
 8002dbe:	bf00      	nop
 8002dc0:	3708      	adds	r7, #8
 8002dc2:	46bd      	mov	sp, r7
 8002dc4:	bd80      	pop	{r7, pc}

08002dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dc6:	b580      	push	{r7, lr}
 8002dc8:	b082      	sub	sp, #8
 8002dca:	af00      	add	r7, sp, #0
 8002dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002dce:	6878      	ldr	r0, [r7, #4]
 8002dd0:	f7ff ffa2 	bl	8002d18 <SysTick_Config>
 8002dd4:	4603      	mov	r3, r0
}
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	3708      	adds	r7, #8
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d101      	bne.n	8002df0 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8002dec:	2301      	movs	r3, #1
 8002dee:	e014      	b.n	8002e1a <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	791b      	ldrb	r3, [r3, #4]
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	2b00      	cmp	r3, #0
 8002df8:	d105      	bne.n	8002e06 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2200      	movs	r2, #0
 8002dfe:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8002e00:	6878      	ldr	r0, [r7, #4]
 8002e02:	f7fe fc3f 	bl	8001684 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e06:	687b      	ldr	r3, [r7, #4]
 8002e08:	2202      	movs	r2, #2
 8002e0a:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	2200      	movs	r2, #0
 8002e10:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	2201      	movs	r2, #1
 8002e16:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8002e18:	2300      	movs	r3, #0
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}

08002e22 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8002e22:	b480      	push	{r7}
 8002e24:	b087      	sub	sp, #28
 8002e26:	af00      	add	r7, sp, #0
 8002e28:	60f8      	str	r0, [r7, #12]
 8002e2a:	60b9      	str	r1, [r7, #8]
 8002e2c:	607a      	str	r2, [r7, #4]
 8002e2e:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8002e3a:	68bb      	ldr	r3, [r7, #8]
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d105      	bne.n	8002e4c <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8002e40:	697a      	ldr	r2, [r7, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	4413      	add	r3, r2
 8002e46:	3308      	adds	r3, #8
 8002e48:	617b      	str	r3, [r7, #20]
 8002e4a:	e004      	b.n	8002e56 <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8002e4c:	697a      	ldr	r2, [r7, #20]
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	4413      	add	r3, r2
 8002e52:	3314      	adds	r3, #20
 8002e54:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8002e56:	697b      	ldr	r3, [r7, #20]
 8002e58:	461a      	mov	r2, r3
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8002e5e:	2300      	movs	r3, #0
}
 8002e60:	4618      	mov	r0, r3
 8002e62:	371c      	adds	r7, #28
 8002e64:	46bd      	mov	sp, r7
 8002e66:	bc80      	pop	{r7}
 8002e68:	4770      	bx	lr

08002e6a <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8002e6a:	b480      	push	{r7}
 8002e6c:	b087      	sub	sp, #28
 8002e6e:	af00      	add	r7, sp, #0
 8002e70:	60f8      	str	r0, [r7, #12]
 8002e72:	60b9      	str	r1, [r7, #8]
 8002e74:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8002e76:	68fb      	ldr	r3, [r7, #12]
 8002e78:	795b      	ldrb	r3, [r3, #5]
 8002e7a:	2b01      	cmp	r3, #1
 8002e7c:	d101      	bne.n	8002e82 <HAL_DAC_ConfigChannel+0x18>
 8002e7e:	2302      	movs	r3, #2
 8002e80:	e03c      	b.n	8002efc <HAL_DAC_ConfigChannel+0x92>
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	2201      	movs	r2, #1
 8002e86:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	2202      	movs	r2, #2
 8002e8c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f003 0310 	and.w	r3, r3, #16
 8002e9c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8002ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ea4:	43db      	mvns	r3, r3
 8002ea6:	697a      	ldr	r2, [r7, #20]
 8002ea8:	4013      	ands	r3, r2
 8002eaa:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	68bb      	ldr	r3, [r7, #8]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	4313      	orrs	r3, r2
 8002eb6:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	f003 0310 	and.w	r3, r3, #16
 8002ebe:	693a      	ldr	r2, [r7, #16]
 8002ec0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec4:	697a      	ldr	r2, [r7, #20]
 8002ec6:	4313      	orrs	r3, r2
 8002ec8:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	697a      	ldr	r2, [r7, #20]
 8002ed0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	6819      	ldr	r1, [r3, #0]
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	f003 0310 	and.w	r3, r3, #16
 8002ede:	22c0      	movs	r2, #192	; 0xc0
 8002ee0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee4:	43da      	mvns	r2, r3
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	400a      	ands	r2, r1
 8002eec:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	2201      	movs	r2, #1
 8002ef2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	2200      	movs	r2, #0
 8002ef8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8002efa:	2300      	movs	r3, #0
}
 8002efc:	4618      	mov	r0, r3
 8002efe:	371c      	adds	r7, #28
 8002f00:	46bd      	mov	sp, r7
 8002f02:	bc80      	pop	{r7}
 8002f04:	4770      	bx	lr
	...

08002f08 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f08:	b480      	push	{r7}
 8002f0a:	b087      	sub	sp, #28
 8002f0c:	af00      	add	r7, sp, #0
 8002f0e:	6078      	str	r0, [r7, #4]
 8002f10:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8002f12:	2300      	movs	r3, #0
 8002f14:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002f16:	2300      	movs	r3, #0
 8002f18:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8002f1a:	2300      	movs	r3, #0
 8002f1c:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8002f1e:	e154      	b.n	80031ca <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	681a      	ldr	r2, [r3, #0]
 8002f24:	2101      	movs	r1, #1
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	fa01 f303 	lsl.w	r3, r1, r3
 8002f2c:	4013      	ands	r3, r2
 8002f2e:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8002f30:	68fb      	ldr	r3, [r7, #12]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	f000 8146 	beq.w	80031c4 <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f38:	683b      	ldr	r3, [r7, #0]
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	f003 0303 	and.w	r3, r3, #3
 8002f40:	2b01      	cmp	r3, #1
 8002f42:	d005      	beq.n	8002f50 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002f4c:	2b02      	cmp	r3, #2
 8002f4e:	d130      	bne.n	8002fb2 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	689b      	ldr	r3, [r3, #8]
 8002f54:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002f56:	697b      	ldr	r3, [r7, #20]
 8002f58:	005b      	lsls	r3, r3, #1
 8002f5a:	2203      	movs	r2, #3
 8002f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f60:	43db      	mvns	r3, r3
 8002f62:	693a      	ldr	r2, [r7, #16]
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	68da      	ldr	r2, [r3, #12]
 8002f6c:	697b      	ldr	r3, [r7, #20]
 8002f6e:	005b      	lsls	r3, r3, #1
 8002f70:	fa02 f303 	lsl.w	r3, r2, r3
 8002f74:	693a      	ldr	r2, [r7, #16]
 8002f76:	4313      	orrs	r3, r2
 8002f78:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	685b      	ldr	r3, [r3, #4]
 8002f84:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8002f86:	2201      	movs	r2, #1
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f8e:	43db      	mvns	r3, r3
 8002f90:	693a      	ldr	r2, [r7, #16]
 8002f92:	4013      	ands	r3, r2
 8002f94:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	091b      	lsrs	r3, r3, #4
 8002f9c:	f003 0201 	and.w	r2, r3, #1
 8002fa0:	697b      	ldr	r3, [r7, #20]
 8002fa2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa6:	693a      	ldr	r2, [r7, #16]
 8002fa8:	4313      	orrs	r3, r2
 8002faa:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	693a      	ldr	r2, [r7, #16]
 8002fb0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fb2:	683b      	ldr	r3, [r7, #0]
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	f003 0303 	and.w	r3, r3, #3
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d017      	beq.n	8002fee <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	68db      	ldr	r3, [r3, #12]
 8002fc2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8002fc4:	697b      	ldr	r3, [r7, #20]
 8002fc6:	005b      	lsls	r3, r3, #1
 8002fc8:	2203      	movs	r2, #3
 8002fca:	fa02 f303 	lsl.w	r3, r2, r3
 8002fce:	43db      	mvns	r3, r3
 8002fd0:	693a      	ldr	r2, [r7, #16]
 8002fd2:	4013      	ands	r3, r2
 8002fd4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8002fd6:	683b      	ldr	r3, [r7, #0]
 8002fd8:	689a      	ldr	r2, [r3, #8]
 8002fda:	697b      	ldr	r3, [r7, #20]
 8002fdc:	005b      	lsls	r3, r3, #1
 8002fde:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe2:	693a      	ldr	r2, [r7, #16]
 8002fe4:	4313      	orrs	r3, r2
 8002fe6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	693a      	ldr	r2, [r7, #16]
 8002fec:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002fee:	683b      	ldr	r3, [r7, #0]
 8002ff0:	685b      	ldr	r3, [r3, #4]
 8002ff2:	f003 0303 	and.w	r3, r3, #3
 8002ff6:	2b02      	cmp	r3, #2
 8002ff8:	d123      	bne.n	8003042 <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8002ffa:	697b      	ldr	r3, [r7, #20]
 8002ffc:	08da      	lsrs	r2, r3, #3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	3208      	adds	r2, #8
 8003002:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003006:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	f003 0307 	and.w	r3, r3, #7
 800300e:	009b      	lsls	r3, r3, #2
 8003010:	220f      	movs	r2, #15
 8003012:	fa02 f303 	lsl.w	r3, r2, r3
 8003016:	43db      	mvns	r3, r3
 8003018:	693a      	ldr	r2, [r7, #16]
 800301a:	4013      	ands	r3, r2
 800301c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 800301e:	683b      	ldr	r3, [r7, #0]
 8003020:	691a      	ldr	r2, [r3, #16]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	f003 0307 	and.w	r3, r3, #7
 8003028:	009b      	lsls	r3, r3, #2
 800302a:	fa02 f303 	lsl.w	r3, r2, r3
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8003034:	697b      	ldr	r3, [r7, #20]
 8003036:	08da      	lsrs	r2, r3, #3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3208      	adds	r2, #8
 800303c:	6939      	ldr	r1, [r7, #16]
 800303e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	005b      	lsls	r3, r3, #1
 800304c:	2203      	movs	r2, #3
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	43db      	mvns	r3, r3
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4013      	ands	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	f003 0203 	and.w	r2, r3, #3
 8003062:	697b      	ldr	r3, [r7, #20]
 8003064:	005b      	lsls	r3, r3, #1
 8003066:	fa02 f303 	lsl.w	r3, r2, r3
 800306a:	693a      	ldr	r2, [r7, #16]
 800306c:	4313      	orrs	r3, r2
 800306e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	693a      	ldr	r2, [r7, #16]
 8003074:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003076:	683b      	ldr	r3, [r7, #0]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800307e:	2b00      	cmp	r3, #0
 8003080:	f000 80a0 	beq.w	80031c4 <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003084:	4b58      	ldr	r3, [pc, #352]	; (80031e8 <HAL_GPIO_Init+0x2e0>)
 8003086:	6a1b      	ldr	r3, [r3, #32]
 8003088:	4a57      	ldr	r2, [pc, #348]	; (80031e8 <HAL_GPIO_Init+0x2e0>)
 800308a:	f043 0301 	orr.w	r3, r3, #1
 800308e:	6213      	str	r3, [r2, #32]
 8003090:	4b55      	ldr	r3, [pc, #340]	; (80031e8 <HAL_GPIO_Init+0x2e0>)
 8003092:	6a1b      	ldr	r3, [r3, #32]
 8003094:	f003 0301 	and.w	r3, r3, #1
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 800309c:	4a53      	ldr	r2, [pc, #332]	; (80031ec <HAL_GPIO_Init+0x2e4>)
 800309e:	697b      	ldr	r3, [r7, #20]
 80030a0:	089b      	lsrs	r3, r3, #2
 80030a2:	3302      	adds	r3, #2
 80030a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030a8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 80030aa:	697b      	ldr	r3, [r7, #20]
 80030ac:	f003 0303 	and.w	r3, r3, #3
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	220f      	movs	r2, #15
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	43db      	mvns	r3, r3
 80030ba:	693a      	ldr	r2, [r7, #16]
 80030bc:	4013      	ands	r3, r2
 80030be:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a4b      	ldr	r2, [pc, #300]	; (80031f0 <HAL_GPIO_Init+0x2e8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d019      	beq.n	80030fc <HAL_GPIO_Init+0x1f4>
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	4a4a      	ldr	r2, [pc, #296]	; (80031f4 <HAL_GPIO_Init+0x2ec>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d013      	beq.n	80030f8 <HAL_GPIO_Init+0x1f0>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	4a49      	ldr	r2, [pc, #292]	; (80031f8 <HAL_GPIO_Init+0x2f0>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d00d      	beq.n	80030f4 <HAL_GPIO_Init+0x1ec>
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	4a48      	ldr	r2, [pc, #288]	; (80031fc <HAL_GPIO_Init+0x2f4>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	d007      	beq.n	80030f0 <HAL_GPIO_Init+0x1e8>
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	4a47      	ldr	r2, [pc, #284]	; (8003200 <HAL_GPIO_Init+0x2f8>)
 80030e4:	4293      	cmp	r3, r2
 80030e6:	d101      	bne.n	80030ec <HAL_GPIO_Init+0x1e4>
 80030e8:	2304      	movs	r3, #4
 80030ea:	e008      	b.n	80030fe <HAL_GPIO_Init+0x1f6>
 80030ec:	2305      	movs	r3, #5
 80030ee:	e006      	b.n	80030fe <HAL_GPIO_Init+0x1f6>
 80030f0:	2303      	movs	r3, #3
 80030f2:	e004      	b.n	80030fe <HAL_GPIO_Init+0x1f6>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e002      	b.n	80030fe <HAL_GPIO_Init+0x1f6>
 80030f8:	2301      	movs	r3, #1
 80030fa:	e000      	b.n	80030fe <HAL_GPIO_Init+0x1f6>
 80030fc:	2300      	movs	r3, #0
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	f002 0203 	and.w	r2, r2, #3
 8003104:	0092      	lsls	r2, r2, #2
 8003106:	4093      	lsls	r3, r2
 8003108:	693a      	ldr	r2, [r7, #16]
 800310a:	4313      	orrs	r3, r2
 800310c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 800310e:	4937      	ldr	r1, [pc, #220]	; (80031ec <HAL_GPIO_Init+0x2e4>)
 8003110:	697b      	ldr	r3, [r7, #20]
 8003112:	089b      	lsrs	r3, r3, #2
 8003114:	3302      	adds	r3, #2
 8003116:	693a      	ldr	r2, [r7, #16]
 8003118:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800311c:	4b39      	ldr	r3, [pc, #228]	; (8003204 <HAL_GPIO_Init+0x2fc>)
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003122:	68fb      	ldr	r3, [r7, #12]
 8003124:	43db      	mvns	r3, r3
 8003126:	693a      	ldr	r2, [r7, #16]
 8003128:	4013      	ands	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800312c:	683b      	ldr	r3, [r7, #0]
 800312e:	685b      	ldr	r3, [r3, #4]
 8003130:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003134:	2b00      	cmp	r3, #0
 8003136:	d003      	beq.n	8003140 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8003138:	693a      	ldr	r2, [r7, #16]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	4313      	orrs	r3, r2
 800313e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8003140:	4a30      	ldr	r2, [pc, #192]	; (8003204 <HAL_GPIO_Init+0x2fc>)
 8003142:	693b      	ldr	r3, [r7, #16]
 8003144:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003146:	4b2f      	ldr	r3, [pc, #188]	; (8003204 <HAL_GPIO_Init+0x2fc>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	43db      	mvns	r3, r3
 8003150:	693a      	ldr	r2, [r7, #16]
 8003152:	4013      	ands	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003156:	683b      	ldr	r3, [r7, #0]
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315e:	2b00      	cmp	r3, #0
 8003160:	d003      	beq.n	800316a <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8003162:	693a      	ldr	r2, [r7, #16]
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	4313      	orrs	r3, r2
 8003168:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800316a:	4a26      	ldr	r2, [pc, #152]	; (8003204 <HAL_GPIO_Init+0x2fc>)
 800316c:	693b      	ldr	r3, [r7, #16]
 800316e:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003170:	4b24      	ldr	r3, [pc, #144]	; (8003204 <HAL_GPIO_Init+0x2fc>)
 8003172:	689b      	ldr	r3, [r3, #8]
 8003174:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	43db      	mvns	r3, r3
 800317a:	693a      	ldr	r2, [r7, #16]
 800317c:	4013      	ands	r3, r2
 800317e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	685b      	ldr	r3, [r3, #4]
 8003184:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003188:	2b00      	cmp	r3, #0
 800318a:	d003      	beq.n	8003194 <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 800318c:	693a      	ldr	r2, [r7, #16]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4313      	orrs	r3, r2
 8003192:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8003194:	4a1b      	ldr	r2, [pc, #108]	; (8003204 <HAL_GPIO_Init+0x2fc>)
 8003196:	693b      	ldr	r3, [r7, #16]
 8003198:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800319a:	4b1a      	ldr	r3, [pc, #104]	; (8003204 <HAL_GPIO_Init+0x2fc>)
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	43db      	mvns	r3, r3
 80031a4:	693a      	ldr	r2, [r7, #16]
 80031a6:	4013      	ands	r3, r2
 80031a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	685b      	ldr	r3, [r3, #4]
 80031ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 80031b6:	693a      	ldr	r2, [r7, #16]
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 80031be:	4a11      	ldr	r2, [pc, #68]	; (8003204 <HAL_GPIO_Init+0x2fc>)
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 80031c4:	697b      	ldr	r3, [r7, #20]
 80031c6:	3301      	adds	r3, #1
 80031c8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	681a      	ldr	r2, [r3, #0]
 80031ce:	697b      	ldr	r3, [r7, #20]
 80031d0:	fa22 f303 	lsr.w	r3, r2, r3
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	f47f aea3 	bne.w	8002f20 <HAL_GPIO_Init+0x18>
  }
}
 80031da:	bf00      	nop
 80031dc:	bf00      	nop
 80031de:	371c      	adds	r7, #28
 80031e0:	46bd      	mov	sp, r7
 80031e2:	bc80      	pop	{r7}
 80031e4:	4770      	bx	lr
 80031e6:	bf00      	nop
 80031e8:	40023800 	.word	0x40023800
 80031ec:	40010000 	.word	0x40010000
 80031f0:	40020000 	.word	0x40020000
 80031f4:	40020400 	.word	0x40020400
 80031f8:	40020800 	.word	0x40020800
 80031fc:	40020c00 	.word	0x40020c00
 8003200:	40021000 	.word	0x40021000
 8003204:	40010400 	.word	0x40010400

08003208 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003208:	b480      	push	{r7}
 800320a:	b083      	sub	sp, #12
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	460b      	mov	r3, r1
 8003212:	807b      	strh	r3, [r7, #2]
 8003214:	4613      	mov	r3, r2
 8003216:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003218:	787b      	ldrb	r3, [r7, #1]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d003      	beq.n	8003226 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 800321e:	887a      	ldrh	r2, [r7, #2]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8003224:	e003      	b.n	800322e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8003226:	887b      	ldrh	r3, [r7, #2]
 8003228:	041a      	lsls	r2, r3, #16
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	619a      	str	r2, [r3, #24]
}
 800322e:	bf00      	nop
 8003230:	370c      	adds	r7, #12
 8003232:	46bd      	mov	sp, r7
 8003234:	bc80      	pop	{r7}
 8003236:	4770      	bx	lr

08003238 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	2b00      	cmp	r3, #0
 8003244:	d101      	bne.n	800324a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003246:	2301      	movs	r3, #1
 8003248:	e31d      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 800324a:	4b94      	ldr	r3, [pc, #592]	; (800349c <HAL_RCC_OscConfig+0x264>)
 800324c:	689b      	ldr	r3, [r3, #8]
 800324e:	f003 030c 	and.w	r3, r3, #12
 8003252:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003254:	4b91      	ldr	r3, [pc, #580]	; (800349c <HAL_RCC_OscConfig+0x264>)
 8003256:	689b      	ldr	r3, [r3, #8]
 8003258:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800325c:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	681b      	ldr	r3, [r3, #0]
 8003262:	f003 0301 	and.w	r3, r3, #1
 8003266:	2b00      	cmp	r3, #0
 8003268:	d07b      	beq.n	8003362 <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 800326a:	69bb      	ldr	r3, [r7, #24]
 800326c:	2b08      	cmp	r3, #8
 800326e:	d006      	beq.n	800327e <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8003270:	69bb      	ldr	r3, [r7, #24]
 8003272:	2b0c      	cmp	r3, #12
 8003274:	d10f      	bne.n	8003296 <HAL_RCC_OscConfig+0x5e>
 8003276:	697b      	ldr	r3, [r7, #20]
 8003278:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800327c:	d10b      	bne.n	8003296 <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800327e:	4b87      	ldr	r3, [pc, #540]	; (800349c <HAL_RCC_OscConfig+0x264>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d06a      	beq.n	8003360 <HAL_RCC_OscConfig+0x128>
 800328a:	687b      	ldr	r3, [r7, #4]
 800328c:	685b      	ldr	r3, [r3, #4]
 800328e:	2b00      	cmp	r3, #0
 8003290:	d166      	bne.n	8003360 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e2f7      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
 800329a:	2b01      	cmp	r3, #1
 800329c:	d106      	bne.n	80032ac <HAL_RCC_OscConfig+0x74>
 800329e:	4b7f      	ldr	r3, [pc, #508]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	4a7e      	ldr	r2, [pc, #504]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80032a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032a8:	6013      	str	r3, [r2, #0]
 80032aa:	e02d      	b.n	8003308 <HAL_RCC_OscConfig+0xd0>
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d10c      	bne.n	80032ce <HAL_RCC_OscConfig+0x96>
 80032b4:	4b79      	ldr	r3, [pc, #484]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	4a78      	ldr	r2, [pc, #480]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80032ba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032be:	6013      	str	r3, [r2, #0]
 80032c0:	4b76      	ldr	r3, [pc, #472]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	4a75      	ldr	r2, [pc, #468]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80032c6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032ca:	6013      	str	r3, [r2, #0]
 80032cc:	e01c      	b.n	8003308 <HAL_RCC_OscConfig+0xd0>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	685b      	ldr	r3, [r3, #4]
 80032d2:	2b05      	cmp	r3, #5
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0xb8>
 80032d6:	4b71      	ldr	r3, [pc, #452]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a70      	ldr	r2, [pc, #448]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b6e      	ldr	r3, [pc, #440]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6d      	ldr	r2, [pc, #436]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0xd0>
 80032f0:	4b6a      	ldr	r3, [pc, #424]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a69      	ldr	r2, [pc, #420]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b67      	ldr	r3, [pc, #412]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a66      	ldr	r2, [pc, #408]	; (800349c <HAL_RCC_OscConfig+0x264>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7ff f860 	bl	80023d4 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003318:	f7ff f85c 	bl	80023d4 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e2ad      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800332a:	4b5c      	ldr	r3, [pc, #368]	; (800349c <HAL_RCC_OscConfig+0x264>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0xe0>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7ff f84c 	bl	80023d4 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003340:	f7ff f848 	bl	80023d4 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e299      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8003352:	4b52      	ldr	r3, [pc, #328]	; (800349c <HAL_RCC_OscConfig+0x264>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0x108>
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d05a      	beq.n	8003424 <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 800336e:	69bb      	ldr	r3, [r7, #24]
 8003370:	2b04      	cmp	r3, #4
 8003372:	d005      	beq.n	8003380 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003374:	69bb      	ldr	r3, [r7, #24]
 8003376:	2b0c      	cmp	r3, #12
 8003378:	d119      	bne.n	80033ae <HAL_RCC_OscConfig+0x176>
 800337a:	697b      	ldr	r3, [r7, #20]
 800337c:	2b00      	cmp	r3, #0
 800337e:	d116      	bne.n	80033ae <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003380:	4b46      	ldr	r3, [pc, #280]	; (800349c <HAL_RCC_OscConfig+0x264>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	f003 0302 	and.w	r3, r3, #2
 8003388:	2b00      	cmp	r3, #0
 800338a:	d005      	beq.n	8003398 <HAL_RCC_OscConfig+0x160>
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d001      	beq.n	8003398 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e276      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003398:	4b40      	ldr	r3, [pc, #256]	; (800349c <HAL_RCC_OscConfig+0x264>)
 800339a:	685b      	ldr	r3, [r3, #4]
 800339c:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	691b      	ldr	r3, [r3, #16]
 80033a4:	021b      	lsls	r3, r3, #8
 80033a6:	493d      	ldr	r1, [pc, #244]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80033a8:	4313      	orrs	r3, r2
 80033aa:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033ac:	e03a      	b.n	8003424 <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d020      	beq.n	80033f8 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033b6:	4b3a      	ldr	r3, [pc, #232]	; (80034a0 <HAL_RCC_OscConfig+0x268>)
 80033b8:	2201      	movs	r2, #1
 80033ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033bc:	f7ff f80a 	bl	80023d4 <HAL_GetTick>
 80033c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033c2:	e008      	b.n	80033d6 <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033c4:	f7ff f806 	bl	80023d4 <HAL_GetTick>
 80033c8:	4602      	mov	r2, r0
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	1ad3      	subs	r3, r2, r3
 80033ce:	2b02      	cmp	r3, #2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e257      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033d6:	4b31      	ldr	r3, [pc, #196]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0f0      	beq.n	80033c4 <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033e2:	4b2e      	ldr	r3, [pc, #184]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80033e4:	685b      	ldr	r3, [r3, #4]
 80033e6:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	691b      	ldr	r3, [r3, #16]
 80033ee:	021b      	lsls	r3, r3, #8
 80033f0:	492a      	ldr	r1, [pc, #168]	; (800349c <HAL_RCC_OscConfig+0x264>)
 80033f2:	4313      	orrs	r3, r2
 80033f4:	604b      	str	r3, [r1, #4]
 80033f6:	e015      	b.n	8003424 <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033f8:	4b29      	ldr	r3, [pc, #164]	; (80034a0 <HAL_RCC_OscConfig+0x268>)
 80033fa:	2200      	movs	r2, #0
 80033fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033fe:	f7fe ffe9 	bl	80023d4 <HAL_GetTick>
 8003402:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003404:	e008      	b.n	8003418 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003406:	f7fe ffe5 	bl	80023d4 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	693b      	ldr	r3, [r7, #16]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d901      	bls.n	8003418 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 8003414:	2303      	movs	r3, #3
 8003416:	e236      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003418:	4b20      	ldr	r3, [pc, #128]	; (800349c <HAL_RCC_OscConfig+0x264>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	f003 0302 	and.w	r3, r3, #2
 8003420:	2b00      	cmp	r3, #0
 8003422:	d1f0      	bne.n	8003406 <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	f003 0310 	and.w	r3, r3, #16
 800342c:	2b00      	cmp	r3, #0
 800342e:	f000 80b8 	beq.w	80035a2 <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8003432:	69bb      	ldr	r3, [r7, #24]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d170      	bne.n	800351a <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8003438:	4b18      	ldr	r3, [pc, #96]	; (800349c <HAL_RCC_OscConfig+0x264>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003440:	2b00      	cmp	r3, #0
 8003442:	d005      	beq.n	8003450 <HAL_RCC_OscConfig+0x218>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	699b      	ldr	r3, [r3, #24]
 8003448:	2b00      	cmp	r3, #0
 800344a:	d101      	bne.n	8003450 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 800344c:	2301      	movs	r3, #1
 800344e:	e21a      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a1a      	ldr	r2, [r3, #32]
 8003454:	4b11      	ldr	r3, [pc, #68]	; (800349c <HAL_RCC_OscConfig+0x264>)
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	f403 4360 	and.w	r3, r3, #57344	; 0xe000
 800345c:	429a      	cmp	r2, r3
 800345e:	d921      	bls.n	80034a4 <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	6a1b      	ldr	r3, [r3, #32]
 8003464:	4618      	mov	r0, r3
 8003466:	f000 fc4b 	bl	8003d00 <RCC_SetFlashLatencyFromMSIRange>
 800346a:	4603      	mov	r3, r0
 800346c:	2b00      	cmp	r3, #0
 800346e:	d001      	beq.n	8003474 <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	e208      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003474:	4b09      	ldr	r3, [pc, #36]	; (800349c <HAL_RCC_OscConfig+0x264>)
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	6a1b      	ldr	r3, [r3, #32]
 8003480:	4906      	ldr	r1, [pc, #24]	; (800349c <HAL_RCC_OscConfig+0x264>)
 8003482:	4313      	orrs	r3, r2
 8003484:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003486:	4b05      	ldr	r3, [pc, #20]	; (800349c <HAL_RCC_OscConfig+0x264>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	69db      	ldr	r3, [r3, #28]
 8003492:	061b      	lsls	r3, r3, #24
 8003494:	4901      	ldr	r1, [pc, #4]	; (800349c <HAL_RCC_OscConfig+0x264>)
 8003496:	4313      	orrs	r3, r2
 8003498:	604b      	str	r3, [r1, #4]
 800349a:	e020      	b.n	80034de <HAL_RCC_OscConfig+0x2a6>
 800349c:	40023800 	.word	0x40023800
 80034a0:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80034a4:	4ba4      	ldr	r3, [pc, #656]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	6a1b      	ldr	r3, [r3, #32]
 80034b0:	49a1      	ldr	r1, [pc, #644]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80034b2:	4313      	orrs	r3, r2
 80034b4:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80034b6:	4ba0      	ldr	r3, [pc, #640]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	061b      	lsls	r3, r3, #24
 80034c4:	499c      	ldr	r1, [pc, #624]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6a1b      	ldr	r3, [r3, #32]
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 fc16 	bl	8003d00 <RCC_SetFlashLatencyFromMSIRange>
 80034d4:	4603      	mov	r3, r0
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 80034da:	2301      	movs	r3, #1
 80034dc:	e1d3      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	0b5b      	lsrs	r3, r3, #13
 80034e4:	3301      	adds	r3, #1
 80034e6:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 80034ee:	4a92      	ldr	r2, [pc, #584]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80034f0:	6892      	ldr	r2, [r2, #8]
 80034f2:	0912      	lsrs	r2, r2, #4
 80034f4:	f002 020f 	and.w	r2, r2, #15
 80034f8:	4990      	ldr	r1, [pc, #576]	; (800373c <HAL_RCC_OscConfig+0x504>)
 80034fa:	5c8a      	ldrb	r2, [r1, r2]
 80034fc:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 80034fe:	4a90      	ldr	r2, [pc, #576]	; (8003740 <HAL_RCC_OscConfig+0x508>)
 8003500:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8003502:	4b90      	ldr	r3, [pc, #576]	; (8003744 <HAL_RCC_OscConfig+0x50c>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4618      	mov	r0, r3
 8003508:	f7fe ff18 	bl	800233c <HAL_InitTick>
 800350c:	4603      	mov	r3, r0
 800350e:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8003510:	7bfb      	ldrb	r3, [r7, #15]
 8003512:	2b00      	cmp	r3, #0
 8003514:	d045      	beq.n	80035a2 <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 8003516:	7bfb      	ldrb	r3, [r7, #15]
 8003518:	e1b5      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	699b      	ldr	r3, [r3, #24]
 800351e:	2b00      	cmp	r3, #0
 8003520:	d029      	beq.n	8003576 <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003522:	4b89      	ldr	r3, [pc, #548]	; (8003748 <HAL_RCC_OscConfig+0x510>)
 8003524:	2201      	movs	r2, #1
 8003526:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003528:	f7fe ff54 	bl	80023d4 <HAL_GetTick>
 800352c:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 800352e:	e008      	b.n	8003542 <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003530:	f7fe ff50 	bl	80023d4 <HAL_GetTick>
 8003534:	4602      	mov	r2, r0
 8003536:	693b      	ldr	r3, [r7, #16]
 8003538:	1ad3      	subs	r3, r2, r3
 800353a:	2b02      	cmp	r3, #2
 800353c:	d901      	bls.n	8003542 <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 800353e:	2303      	movs	r3, #3
 8003540:	e1a1      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003542:	4b7d      	ldr	r3, [pc, #500]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800354a:	2b00      	cmp	r3, #0
 800354c:	d0f0      	beq.n	8003530 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800354e:	4b7a      	ldr	r3, [pc, #488]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 8003550:	685b      	ldr	r3, [r3, #4]
 8003552:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a1b      	ldr	r3, [r3, #32]
 800355a:	4977      	ldr	r1, [pc, #476]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 800355c:	4313      	orrs	r3, r2
 800355e:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003560:	4b75      	ldr	r3, [pc, #468]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	f023 427f 	bic.w	r2, r3, #4278190080	; 0xff000000
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	69db      	ldr	r3, [r3, #28]
 800356c:	061b      	lsls	r3, r3, #24
 800356e:	4972      	ldr	r1, [pc, #456]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 8003570:	4313      	orrs	r3, r2
 8003572:	604b      	str	r3, [r1, #4]
 8003574:	e015      	b.n	80035a2 <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003576:	4b74      	ldr	r3, [pc, #464]	; (8003748 <HAL_RCC_OscConfig+0x510>)
 8003578:	2200      	movs	r2, #0
 800357a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800357c:	f7fe ff2a 	bl	80023d4 <HAL_GetTick>
 8003580:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003582:	e008      	b.n	8003596 <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003584:	f7fe ff26 	bl	80023d4 <HAL_GetTick>
 8003588:	4602      	mov	r2, r0
 800358a:	693b      	ldr	r3, [r7, #16]
 800358c:	1ad3      	subs	r3, r2, r3
 800358e:	2b02      	cmp	r3, #2
 8003590:	d901      	bls.n	8003596 <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 8003592:	2303      	movs	r3, #3
 8003594:	e177      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8003596:	4b68      	ldr	r3, [pc, #416]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d1f0      	bne.n	8003584 <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	681b      	ldr	r3, [r3, #0]
 80035a6:	f003 0308 	and.w	r3, r3, #8
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d030      	beq.n	8003610 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	695b      	ldr	r3, [r3, #20]
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d016      	beq.n	80035e4 <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035b6:	4b65      	ldr	r3, [pc, #404]	; (800374c <HAL_RCC_OscConfig+0x514>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035bc:	f7fe ff0a 	bl	80023d4 <HAL_GetTick>
 80035c0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035c2:	e008      	b.n	80035d6 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035c4:	f7fe ff06 	bl	80023d4 <HAL_GetTick>
 80035c8:	4602      	mov	r2, r0
 80035ca:	693b      	ldr	r3, [r7, #16]
 80035cc:	1ad3      	subs	r3, r2, r3
 80035ce:	2b02      	cmp	r3, #2
 80035d0:	d901      	bls.n	80035d6 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 80035d2:	2303      	movs	r3, #3
 80035d4:	e157      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035d6:	4b58      	ldr	r3, [pc, #352]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80035d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035da:	f003 0302 	and.w	r3, r3, #2
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d0f0      	beq.n	80035c4 <HAL_RCC_OscConfig+0x38c>
 80035e2:	e015      	b.n	8003610 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035e4:	4b59      	ldr	r3, [pc, #356]	; (800374c <HAL_RCC_OscConfig+0x514>)
 80035e6:	2200      	movs	r2, #0
 80035e8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035ea:	f7fe fef3 	bl	80023d4 <HAL_GetTick>
 80035ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 80035f0:	e008      	b.n	8003604 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80035f2:	f7fe feef 	bl	80023d4 <HAL_GetTick>
 80035f6:	4602      	mov	r2, r0
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	2b02      	cmp	r3, #2
 80035fe:	d901      	bls.n	8003604 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003600:	2303      	movs	r3, #3
 8003602:	e140      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003604:	4b4c      	ldr	r3, [pc, #304]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 8003606:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003608:	f003 0302 	and.w	r3, r3, #2
 800360c:	2b00      	cmp	r3, #0
 800360e:	d1f0      	bne.n	80035f2 <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	f000 80b5 	beq.w	8003788 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 800361e:	2300      	movs	r3, #0
 8003620:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003622:	4b45      	ldr	r3, [pc, #276]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362a:	2b00      	cmp	r3, #0
 800362c:	d10d      	bne.n	800364a <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800362e:	4b42      	ldr	r3, [pc, #264]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	4a41      	ldr	r2, [pc, #260]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 8003634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003638:	6253      	str	r3, [r2, #36]	; 0x24
 800363a:	4b3f      	ldr	r3, [pc, #252]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 800363c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800363e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003642:	60bb      	str	r3, [r7, #8]
 8003644:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003646:	2301      	movs	r3, #1
 8003648:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800364a:	4b41      	ldr	r3, [pc, #260]	; (8003750 <HAL_RCC_OscConfig+0x518>)
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003652:	2b00      	cmp	r3, #0
 8003654:	d118      	bne.n	8003688 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003656:	4b3e      	ldr	r3, [pc, #248]	; (8003750 <HAL_RCC_OscConfig+0x518>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a3d      	ldr	r2, [pc, #244]	; (8003750 <HAL_RCC_OscConfig+0x518>)
 800365c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003660:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003662:	f7fe feb7 	bl	80023d4 <HAL_GetTick>
 8003666:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800366a:	f7fe feb3 	bl	80023d4 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	693b      	ldr	r3, [r7, #16]
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b64      	cmp	r3, #100	; 0x64
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e104      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800367c:	4b34      	ldr	r3, [pc, #208]	; (8003750 <HAL_RCC_OscConfig+0x518>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	689b      	ldr	r3, [r3, #8]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d106      	bne.n	800369e <HAL_RCC_OscConfig+0x466>
 8003690:	4b29      	ldr	r3, [pc, #164]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 8003692:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003694:	4a28      	ldr	r2, [pc, #160]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 8003696:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800369a:	6353      	str	r3, [r2, #52]	; 0x34
 800369c:	e02d      	b.n	80036fa <HAL_RCC_OscConfig+0x4c2>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	689b      	ldr	r3, [r3, #8]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10c      	bne.n	80036c0 <HAL_RCC_OscConfig+0x488>
 80036a6:	4b24      	ldr	r3, [pc, #144]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80036a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036aa:	4a23      	ldr	r2, [pc, #140]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80036ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036b0:	6353      	str	r3, [r2, #52]	; 0x34
 80036b2:	4b21      	ldr	r3, [pc, #132]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80036b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036b6:	4a20      	ldr	r2, [pc, #128]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80036b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036bc:	6353      	str	r3, [r2, #52]	; 0x34
 80036be:	e01c      	b.n	80036fa <HAL_RCC_OscConfig+0x4c2>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	689b      	ldr	r3, [r3, #8]
 80036c4:	2b05      	cmp	r3, #5
 80036c6:	d10c      	bne.n	80036e2 <HAL_RCC_OscConfig+0x4aa>
 80036c8:	4b1b      	ldr	r3, [pc, #108]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80036ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036cc:	4a1a      	ldr	r2, [pc, #104]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80036ce:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80036d2:	6353      	str	r3, [r2, #52]	; 0x34
 80036d4:	4b18      	ldr	r3, [pc, #96]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80036d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036d8:	4a17      	ldr	r2, [pc, #92]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80036da:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036de:	6353      	str	r3, [r2, #52]	; 0x34
 80036e0:	e00b      	b.n	80036fa <HAL_RCC_OscConfig+0x4c2>
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80036e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036e6:	4a14      	ldr	r2, [pc, #80]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80036e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80036ec:	6353      	str	r3, [r2, #52]	; 0x34
 80036ee:	4b12      	ldr	r3, [pc, #72]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80036f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036f2:	4a11      	ldr	r2, [pc, #68]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 80036f4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80036f8:	6353      	str	r3, [r2, #52]	; 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	689b      	ldr	r3, [r3, #8]
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d015      	beq.n	800372e <HAL_RCC_OscConfig+0x4f6>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003702:	f7fe fe67 	bl	80023d4 <HAL_GetTick>
 8003706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003708:	e00a      	b.n	8003720 <HAL_RCC_OscConfig+0x4e8>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800370a:	f7fe fe63 	bl	80023d4 <HAL_GetTick>
 800370e:	4602      	mov	r2, r0
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	1ad3      	subs	r3, r2, r3
 8003714:	f241 3288 	movw	r2, #5000	; 0x1388
 8003718:	4293      	cmp	r3, r2
 800371a:	d901      	bls.n	8003720 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800371c:	2303      	movs	r3, #3
 800371e:	e0b2      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003720:	4b05      	ldr	r3, [pc, #20]	; (8003738 <HAL_RCC_OscConfig+0x500>)
 8003722:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003724:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ee      	beq.n	800370a <HAL_RCC_OscConfig+0x4d2>
 800372c:	e023      	b.n	8003776 <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800372e:	f7fe fe51 	bl	80023d4 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8003734:	e019      	b.n	800376a <HAL_RCC_OscConfig+0x532>
 8003736:	bf00      	nop
 8003738:	40023800 	.word	0x40023800
 800373c:	08007d74 	.word	0x08007d74
 8003740:	20000000 	.word	0x20000000
 8003744:	20000004 	.word	0x20000004
 8003748:	42470020 	.word	0x42470020
 800374c:	42470680 	.word	0x42470680
 8003750:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003754:	f7fe fe3e 	bl	80023d4 <HAL_GetTick>
 8003758:	4602      	mov	r2, r0
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	1ad3      	subs	r3, r2, r3
 800375e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003762:	4293      	cmp	r3, r2
 8003764:	d901      	bls.n	800376a <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 8003766:	2303      	movs	r3, #3
 8003768:	e08d      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800376a:	4b49      	ldr	r3, [pc, #292]	; (8003890 <HAL_RCC_OscConfig+0x658>)
 800376c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800376e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003772:	2b00      	cmp	r3, #0
 8003774:	d1ee      	bne.n	8003754 <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003776:	7ffb      	ldrb	r3, [r7, #31]
 8003778:	2b01      	cmp	r3, #1
 800377a:	d105      	bne.n	8003788 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800377c:	4b44      	ldr	r3, [pc, #272]	; (8003890 <HAL_RCC_OscConfig+0x658>)
 800377e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003780:	4a43      	ldr	r2, [pc, #268]	; (8003890 <HAL_RCC_OscConfig+0x658>)
 8003782:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003786:	6253      	str	r3, [r2, #36]	; 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800378c:	2b00      	cmp	r3, #0
 800378e:	d079      	beq.n	8003884 <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003790:	69bb      	ldr	r3, [r7, #24]
 8003792:	2b0c      	cmp	r3, #12
 8003794:	d056      	beq.n	8003844 <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800379a:	2b02      	cmp	r3, #2
 800379c:	d13b      	bne.n	8003816 <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800379e:	4b3d      	ldr	r3, [pc, #244]	; (8003894 <HAL_RCC_OscConfig+0x65c>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a4:	f7fe fe16 	bl	80023d4 <HAL_GetTick>
 80037a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037aa:	e008      	b.n	80037be <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037ac:	f7fe fe12 	bl	80023d4 <HAL_GetTick>
 80037b0:	4602      	mov	r2, r0
 80037b2:	693b      	ldr	r3, [r7, #16]
 80037b4:	1ad3      	subs	r3, r2, r3
 80037b6:	2b02      	cmp	r3, #2
 80037b8:	d901      	bls.n	80037be <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 80037ba:	2303      	movs	r3, #3
 80037bc:	e063      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80037be:	4b34      	ldr	r3, [pc, #208]	; (8003890 <HAL_RCC_OscConfig+0x658>)
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d1f0      	bne.n	80037ac <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80037ca:	4b31      	ldr	r3, [pc, #196]	; (8003890 <HAL_RCC_OscConfig+0x658>)
 80037cc:	689b      	ldr	r3, [r3, #8]
 80037ce:	f423 027d 	bic.w	r2, r3, #16580608	; 0xfd0000
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a99      	ldr	r1, [r3, #40]	; 0x28
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037da:	4319      	orrs	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037e0:	430b      	orrs	r3, r1
 80037e2:	492b      	ldr	r1, [pc, #172]	; (8003890 <HAL_RCC_OscConfig+0x658>)
 80037e4:	4313      	orrs	r3, r2
 80037e6:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80037e8:	4b2a      	ldr	r3, [pc, #168]	; (8003894 <HAL_RCC_OscConfig+0x65c>)
 80037ea:	2201      	movs	r2, #1
 80037ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037ee:	f7fe fdf1 	bl	80023d4 <HAL_GetTick>
 80037f2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80037f4:	e008      	b.n	8003808 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80037f6:	f7fe fded 	bl	80023d4 <HAL_GetTick>
 80037fa:	4602      	mov	r2, r0
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	1ad3      	subs	r3, r2, r3
 8003800:	2b02      	cmp	r3, #2
 8003802:	d901      	bls.n	8003808 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 8003804:	2303      	movs	r3, #3
 8003806:	e03e      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003808:	4b21      	ldr	r3, [pc, #132]	; (8003890 <HAL_RCC_OscConfig+0x658>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003810:	2b00      	cmp	r3, #0
 8003812:	d0f0      	beq.n	80037f6 <HAL_RCC_OscConfig+0x5be>
 8003814:	e036      	b.n	8003884 <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003816:	4b1f      	ldr	r3, [pc, #124]	; (8003894 <HAL_RCC_OscConfig+0x65c>)
 8003818:	2200      	movs	r2, #0
 800381a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800381c:	f7fe fdda 	bl	80023d4 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003822:	e008      	b.n	8003836 <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003824:	f7fe fdd6 	bl	80023d4 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	2b02      	cmp	r3, #2
 8003830:	d901      	bls.n	8003836 <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 8003832:	2303      	movs	r3, #3
 8003834:	e027      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003836:	4b16      	ldr	r3, [pc, #88]	; (8003890 <HAL_RCC_OscConfig+0x658>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800383e:	2b00      	cmp	r3, #0
 8003840:	d1f0      	bne.n	8003824 <HAL_RCC_OscConfig+0x5ec>
 8003842:	e01f      	b.n	8003884 <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003848:	2b01      	cmp	r3, #1
 800384a:	d101      	bne.n	8003850 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e01a      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003850:	4b0f      	ldr	r3, [pc, #60]	; (8003890 <HAL_RCC_OscConfig+0x658>)
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003856:	697b      	ldr	r3, [r7, #20]
 8003858:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003860:	429a      	cmp	r2, r3
 8003862:	d10d      	bne.n	8003880 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8003864:	697b      	ldr	r3, [r7, #20]
 8003866:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800386e:	429a      	cmp	r2, r3
 8003870:	d106      	bne.n	8003880 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8003872:	697b      	ldr	r3, [r7, #20]
 8003874:	f403 0240 	and.w	r2, r3, #12582912	; 0xc00000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 800387c:	429a      	cmp	r2, r3
 800387e:	d001      	beq.n	8003884 <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8003880:	2301      	movs	r3, #1
 8003882:	e000      	b.n	8003886 <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 8003884:	2300      	movs	r3, #0
}
 8003886:	4618      	mov	r0, r3
 8003888:	3720      	adds	r7, #32
 800388a:	46bd      	mov	sp, r7
 800388c:	bd80      	pop	{r7, pc}
 800388e:	bf00      	nop
 8003890:	40023800 	.word	0x40023800
 8003894:	42470060 	.word	0x42470060

08003898 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003898:	b580      	push	{r7, lr}
 800389a:	b084      	sub	sp, #16
 800389c:	af00      	add	r7, sp, #0
 800389e:	6078      	str	r0, [r7, #4]
 80038a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d101      	bne.n	80038ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80038a8:	2301      	movs	r3, #1
 80038aa:	e11a      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80038ac:	4b8f      	ldr	r3, [pc, #572]	; (8003aec <HAL_RCC_ClockConfig+0x254>)
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0301 	and.w	r3, r3, #1
 80038b4:	683a      	ldr	r2, [r7, #0]
 80038b6:	429a      	cmp	r2, r3
 80038b8:	d919      	bls.n	80038ee <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d105      	bne.n	80038cc <HAL_RCC_ClockConfig+0x34>
 80038c0:	4b8a      	ldr	r3, [pc, #552]	; (8003aec <HAL_RCC_ClockConfig+0x254>)
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	4a89      	ldr	r2, [pc, #548]	; (8003aec <HAL_RCC_ClockConfig+0x254>)
 80038c6:	f043 0304 	orr.w	r3, r3, #4
 80038ca:	6013      	str	r3, [r2, #0]
 80038cc:	4b87      	ldr	r3, [pc, #540]	; (8003aec <HAL_RCC_ClockConfig+0x254>)
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f023 0201 	bic.w	r2, r3, #1
 80038d4:	4985      	ldr	r1, [pc, #532]	; (8003aec <HAL_RCC_ClockConfig+0x254>)
 80038d6:	683b      	ldr	r3, [r7, #0]
 80038d8:	4313      	orrs	r3, r2
 80038da:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80038dc:	4b83      	ldr	r3, [pc, #524]	; (8003aec <HAL_RCC_ClockConfig+0x254>)
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f003 0301 	and.w	r3, r3, #1
 80038e4:	683a      	ldr	r2, [r7, #0]
 80038e6:	429a      	cmp	r2, r3
 80038e8:	d001      	beq.n	80038ee <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 80038ea:	2301      	movs	r3, #1
 80038ec:	e0f9      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f003 0302 	and.w	r3, r3, #2
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d008      	beq.n	800390c <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038fa:	4b7d      	ldr	r3, [pc, #500]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 80038fc:	689b      	ldr	r3, [r3, #8]
 80038fe:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	497a      	ldr	r1, [pc, #488]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 8003908:	4313      	orrs	r3, r2
 800390a:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	f003 0301 	and.w	r3, r3, #1
 8003914:	2b00      	cmp	r3, #0
 8003916:	f000 808e 	beq.w	8003a36 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	2b02      	cmp	r3, #2
 8003920:	d107      	bne.n	8003932 <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003922:	4b73      	ldr	r3, [pc, #460]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d121      	bne.n	8003972 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800392e:	2301      	movs	r3, #1
 8003930:	e0d7      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	2b03      	cmp	r3, #3
 8003938:	d107      	bne.n	800394a <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800393a:	4b6d      	ldr	r3, [pc, #436]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003942:	2b00      	cmp	r3, #0
 8003944:	d115      	bne.n	8003972 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 8003946:	2301      	movs	r3, #1
 8003948:	e0cb      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	2b01      	cmp	r3, #1
 8003950:	d107      	bne.n	8003962 <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003952:	4b67      	ldr	r3, [pc, #412]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 0302 	and.w	r3, r3, #2
 800395a:	2b00      	cmp	r3, #0
 800395c:	d109      	bne.n	8003972 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800395e:	2301      	movs	r3, #1
 8003960:	e0bf      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8003962:	4b63      	ldr	r3, [pc, #396]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800396a:	2b00      	cmp	r3, #0
 800396c:	d101      	bne.n	8003972 <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e0b7      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003972:	4b5f      	ldr	r3, [pc, #380]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f023 0203 	bic.w	r2, r3, #3
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	685b      	ldr	r3, [r3, #4]
 800397e:	495c      	ldr	r1, [pc, #368]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 8003980:	4313      	orrs	r3, r2
 8003982:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003984:	f7fe fd26 	bl	80023d4 <HAL_GetTick>
 8003988:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	685b      	ldr	r3, [r3, #4]
 800398e:	2b02      	cmp	r3, #2
 8003990:	d112      	bne.n	80039b8 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8003992:	e00a      	b.n	80039aa <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003994:	f7fe fd1e 	bl	80023d4 <HAL_GetTick>
 8003998:	4602      	mov	r2, r0
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	1ad3      	subs	r3, r2, r3
 800399e:	f241 3288 	movw	r2, #5000	; 0x1388
 80039a2:	4293      	cmp	r3, r2
 80039a4:	d901      	bls.n	80039aa <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 80039a6:	2303      	movs	r3, #3
 80039a8:	e09b      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 80039aa:	4b51      	ldr	r3, [pc, #324]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 80039ac:	689b      	ldr	r3, [r3, #8]
 80039ae:	f003 030c 	and.w	r3, r3, #12
 80039b2:	2b08      	cmp	r3, #8
 80039b4:	d1ee      	bne.n	8003994 <HAL_RCC_ClockConfig+0xfc>
 80039b6:	e03e      	b.n	8003a36 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	685b      	ldr	r3, [r3, #4]
 80039bc:	2b03      	cmp	r3, #3
 80039be:	d112      	bne.n	80039e6 <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039c0:	e00a      	b.n	80039d8 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039c2:	f7fe fd07 	bl	80023d4 <HAL_GetTick>
 80039c6:	4602      	mov	r2, r0
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1ad3      	subs	r3, r2, r3
 80039cc:	f241 3288 	movw	r2, #5000	; 0x1388
 80039d0:	4293      	cmp	r3, r2
 80039d2:	d901      	bls.n	80039d8 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 80039d4:	2303      	movs	r3, #3
 80039d6:	e084      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80039d8:	4b45      	ldr	r3, [pc, #276]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 030c 	and.w	r3, r3, #12
 80039e0:	2b0c      	cmp	r3, #12
 80039e2:	d1ee      	bne.n	80039c2 <HAL_RCC_ClockConfig+0x12a>
 80039e4:	e027      	b.n	8003a36 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	685b      	ldr	r3, [r3, #4]
 80039ea:	2b01      	cmp	r3, #1
 80039ec:	d11d      	bne.n	8003a2a <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 80039ee:	e00a      	b.n	8003a06 <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039f0:	f7fe fcf0 	bl	80023d4 <HAL_GetTick>
 80039f4:	4602      	mov	r2, r0
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	1ad3      	subs	r3, r2, r3
 80039fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80039fe:	4293      	cmp	r3, r2
 8003a00:	d901      	bls.n	8003a06 <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 8003a02:	2303      	movs	r3, #3
 8003a04:	e06d      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a06:	4b3a      	ldr	r3, [pc, #232]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 8003a08:	689b      	ldr	r3, [r3, #8]
 8003a0a:	f003 030c 	and.w	r3, r3, #12
 8003a0e:	2b04      	cmp	r3, #4
 8003a10:	d1ee      	bne.n	80039f0 <HAL_RCC_ClockConfig+0x158>
 8003a12:	e010      	b.n	8003a36 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a14:	f7fe fcde 	bl	80023d4 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003a22:	4293      	cmp	r3, r2
 8003a24:	d901      	bls.n	8003a2a <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 8003a26:	2303      	movs	r3, #3
 8003a28:	e05b      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8003a2a:	4b31      	ldr	r3, [pc, #196]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 030c 	and.w	r3, r3, #12
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d1ee      	bne.n	8003a14 <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003a36:	4b2d      	ldr	r3, [pc, #180]	; (8003aec <HAL_RCC_ClockConfig+0x254>)
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	683a      	ldr	r2, [r7, #0]
 8003a40:	429a      	cmp	r2, r3
 8003a42:	d219      	bcs.n	8003a78 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	2b01      	cmp	r3, #1
 8003a48:	d105      	bne.n	8003a56 <HAL_RCC_ClockConfig+0x1be>
 8003a4a:	4b28      	ldr	r3, [pc, #160]	; (8003aec <HAL_RCC_ClockConfig+0x254>)
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	4a27      	ldr	r2, [pc, #156]	; (8003aec <HAL_RCC_ClockConfig+0x254>)
 8003a50:	f043 0304 	orr.w	r3, r3, #4
 8003a54:	6013      	str	r3, [r2, #0]
 8003a56:	4b25      	ldr	r3, [pc, #148]	; (8003aec <HAL_RCC_ClockConfig+0x254>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f023 0201 	bic.w	r2, r3, #1
 8003a5e:	4923      	ldr	r1, [pc, #140]	; (8003aec <HAL_RCC_ClockConfig+0x254>)
 8003a60:	683b      	ldr	r3, [r7, #0]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a66:	4b21      	ldr	r3, [pc, #132]	; (8003aec <HAL_RCC_ClockConfig+0x254>)
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f003 0301 	and.w	r3, r3, #1
 8003a6e:	683a      	ldr	r2, [r7, #0]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d001      	beq.n	8003a78 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e034      	b.n	8003ae2 <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f003 0304 	and.w	r3, r3, #4
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d008      	beq.n	8003a96 <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a84:	4b1a      	ldr	r3, [pc, #104]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 8003a86:	689b      	ldr	r3, [r3, #8]
 8003a88:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	68db      	ldr	r3, [r3, #12]
 8003a90:	4917      	ldr	r1, [pc, #92]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 8003a92:	4313      	orrs	r3, r2
 8003a94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	f003 0308 	and.w	r3, r3, #8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d009      	beq.n	8003ab6 <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003aa2:	4b13      	ldr	r3, [pc, #76]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	00db      	lsls	r3, r3, #3
 8003ab0:	490f      	ldr	r1, [pc, #60]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 8003ab2:	4313      	orrs	r3, r2
 8003ab4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003ab6:	f000 f823 	bl	8003b00 <HAL_RCC_GetSysClockFreq>
 8003aba:	4602      	mov	r2, r0
 8003abc:	4b0c      	ldr	r3, [pc, #48]	; (8003af0 <HAL_RCC_ClockConfig+0x258>)
 8003abe:	689b      	ldr	r3, [r3, #8]
 8003ac0:	091b      	lsrs	r3, r3, #4
 8003ac2:	f003 030f 	and.w	r3, r3, #15
 8003ac6:	490b      	ldr	r1, [pc, #44]	; (8003af4 <HAL_RCC_ClockConfig+0x25c>)
 8003ac8:	5ccb      	ldrb	r3, [r1, r3]
 8003aca:	fa22 f303 	lsr.w	r3, r2, r3
 8003ace:	4a0a      	ldr	r2, [pc, #40]	; (8003af8 <HAL_RCC_ClockConfig+0x260>)
 8003ad0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8003ad2:	4b0a      	ldr	r3, [pc, #40]	; (8003afc <HAL_RCC_ClockConfig+0x264>)
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7fe fc30 	bl	800233c <HAL_InitTick>
 8003adc:	4603      	mov	r3, r0
 8003ade:	72fb      	strb	r3, [r7, #11]

  return status;
 8003ae0:	7afb      	ldrb	r3, [r7, #11]
}
 8003ae2:	4618      	mov	r0, r3
 8003ae4:	3710      	adds	r7, #16
 8003ae6:	46bd      	mov	sp, r7
 8003ae8:	bd80      	pop	{r7, pc}
 8003aea:	bf00      	nop
 8003aec:	40023c00 	.word	0x40023c00
 8003af0:	40023800 	.word	0x40023800
 8003af4:	08007d74 	.word	0x08007d74
 8003af8:	20000000 	.word	0x20000000
 8003afc:	20000004 	.word	0x20000004

08003b00 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003b00:	b5b0      	push	{r4, r5, r7, lr}
 8003b02:	b086      	sub	sp, #24
 8003b04:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8003b06:	4b61      	ldr	r3, [pc, #388]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x18c>)
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	f003 030c 	and.w	r3, r3, #12
 8003b12:	2b0c      	cmp	r3, #12
 8003b14:	d00d      	beq.n	8003b32 <HAL_RCC_GetSysClockFreq+0x32>
 8003b16:	2b0c      	cmp	r3, #12
 8003b18:	f200 80a4 	bhi.w	8003c64 <HAL_RCC_GetSysClockFreq+0x164>
 8003b1c:	2b04      	cmp	r3, #4
 8003b1e:	d002      	beq.n	8003b26 <HAL_RCC_GetSysClockFreq+0x26>
 8003b20:	2b08      	cmp	r3, #8
 8003b22:	d003      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x2c>
 8003b24:	e09e      	b.n	8003c64 <HAL_RCC_GetSysClockFreq+0x164>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b26:	4b5a      	ldr	r3, [pc, #360]	; (8003c90 <HAL_RCC_GetSysClockFreq+0x190>)
 8003b28:	613b      	str	r3, [r7, #16]
      break;
 8003b2a:	e0a9      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003b2c:	4b59      	ldr	r3, [pc, #356]	; (8003c94 <HAL_RCC_GetSysClockFreq+0x194>)
 8003b2e:	613b      	str	r3, [r7, #16]
      break;
 8003b30:	e0a6      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	0c9b      	lsrs	r3, r3, #18
 8003b36:	f003 030f 	and.w	r3, r3, #15
 8003b3a:	4a57      	ldr	r2, [pc, #348]	; (8003c98 <HAL_RCC_GetSysClockFreq+0x198>)
 8003b3c:	5cd3      	ldrb	r3, [r2, r3]
 8003b3e:	60bb      	str	r3, [r7, #8]
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	0d9b      	lsrs	r3, r3, #22
 8003b44:	f003 0303 	and.w	r3, r3, #3
 8003b48:	3301      	adds	r3, #1
 8003b4a:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b4c:	4b4f      	ldr	r3, [pc, #316]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x18c>)
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d041      	beq.n	8003bdc <HAL_RCC_GetSysClockFreq+0xdc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003b58:	68bb      	ldr	r3, [r7, #8]
 8003b5a:	461c      	mov	r4, r3
 8003b5c:	f04f 0500 	mov.w	r5, #0
 8003b60:	4620      	mov	r0, r4
 8003b62:	4629      	mov	r1, r5
 8003b64:	f04f 0200 	mov.w	r2, #0
 8003b68:	f04f 0300 	mov.w	r3, #0
 8003b6c:	014b      	lsls	r3, r1, #5
 8003b6e:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003b72:	0142      	lsls	r2, r0, #5
 8003b74:	4610      	mov	r0, r2
 8003b76:	4619      	mov	r1, r3
 8003b78:	1b00      	subs	r0, r0, r4
 8003b7a:	eb61 0105 	sbc.w	r1, r1, r5
 8003b7e:	f04f 0200 	mov.w	r2, #0
 8003b82:	f04f 0300 	mov.w	r3, #0
 8003b86:	018b      	lsls	r3, r1, #6
 8003b88:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003b8c:	0182      	lsls	r2, r0, #6
 8003b8e:	1a12      	subs	r2, r2, r0
 8003b90:	eb63 0301 	sbc.w	r3, r3, r1
 8003b94:	f04f 0000 	mov.w	r0, #0
 8003b98:	f04f 0100 	mov.w	r1, #0
 8003b9c:	00d9      	lsls	r1, r3, #3
 8003b9e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003ba2:	00d0      	lsls	r0, r2, #3
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	1912      	adds	r2, r2, r4
 8003baa:	eb45 0303 	adc.w	r3, r5, r3
 8003bae:	f04f 0000 	mov.w	r0, #0
 8003bb2:	f04f 0100 	mov.w	r1, #0
 8003bb6:	0259      	lsls	r1, r3, #9
 8003bb8:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8003bbc:	0250      	lsls	r0, r2, #9
 8003bbe:	4602      	mov	r2, r0
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	4610      	mov	r0, r2
 8003bc4:	4619      	mov	r1, r3
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	461a      	mov	r2, r3
 8003bca:	f04f 0300 	mov.w	r3, #0
 8003bce:	f7fd fad7 	bl	8001180 <__aeabi_uldivmod>
 8003bd2:	4602      	mov	r2, r0
 8003bd4:	460b      	mov	r3, r1
 8003bd6:	4613      	mov	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]
 8003bda:	e040      	b.n	8003c5e <HAL_RCC_GetSysClockFreq+0x15e>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	461c      	mov	r4, r3
 8003be0:	f04f 0500 	mov.w	r5, #0
 8003be4:	4620      	mov	r0, r4
 8003be6:	4629      	mov	r1, r5
 8003be8:	f04f 0200 	mov.w	r2, #0
 8003bec:	f04f 0300 	mov.w	r3, #0
 8003bf0:	014b      	lsls	r3, r1, #5
 8003bf2:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003bf6:	0142      	lsls	r2, r0, #5
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	1b00      	subs	r0, r0, r4
 8003bfe:	eb61 0105 	sbc.w	r1, r1, r5
 8003c02:	f04f 0200 	mov.w	r2, #0
 8003c06:	f04f 0300 	mov.w	r3, #0
 8003c0a:	018b      	lsls	r3, r1, #6
 8003c0c:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8003c10:	0182      	lsls	r2, r0, #6
 8003c12:	1a12      	subs	r2, r2, r0
 8003c14:	eb63 0301 	sbc.w	r3, r3, r1
 8003c18:	f04f 0000 	mov.w	r0, #0
 8003c1c:	f04f 0100 	mov.w	r1, #0
 8003c20:	00d9      	lsls	r1, r3, #3
 8003c22:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c26:	00d0      	lsls	r0, r2, #3
 8003c28:	4602      	mov	r2, r0
 8003c2a:	460b      	mov	r3, r1
 8003c2c:	1912      	adds	r2, r2, r4
 8003c2e:	eb45 0303 	adc.w	r3, r5, r3
 8003c32:	f04f 0000 	mov.w	r0, #0
 8003c36:	f04f 0100 	mov.w	r1, #0
 8003c3a:	0299      	lsls	r1, r3, #10
 8003c3c:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003c40:	0290      	lsls	r0, r2, #10
 8003c42:	4602      	mov	r2, r0
 8003c44:	460b      	mov	r3, r1
 8003c46:	4610      	mov	r0, r2
 8003c48:	4619      	mov	r1, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	461a      	mov	r2, r3
 8003c4e:	f04f 0300 	mov.w	r3, #0
 8003c52:	f7fd fa95 	bl	8001180 <__aeabi_uldivmod>
 8003c56:	4602      	mov	r2, r0
 8003c58:	460b      	mov	r3, r1
 8003c5a:	4613      	mov	r3, r2
 8003c5c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllvco;
 8003c5e:	697b      	ldr	r3, [r7, #20]
 8003c60:	613b      	str	r3, [r7, #16]
      break;
 8003c62:	e00d      	b.n	8003c80 <HAL_RCC_GetSysClockFreq+0x180>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 8003c64:	4b09      	ldr	r3, [pc, #36]	; (8003c8c <HAL_RCC_GetSysClockFreq+0x18c>)
 8003c66:	685b      	ldr	r3, [r3, #4]
 8003c68:	0b5b      	lsrs	r3, r3, #13
 8003c6a:	f003 0307 	and.w	r3, r3, #7
 8003c6e:	603b      	str	r3, [r7, #0]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	3301      	adds	r3, #1
 8003c74:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8003c78:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7c:	613b      	str	r3, [r7, #16]
      break;
 8003c7e:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003c80:	693b      	ldr	r3, [r7, #16]
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3718      	adds	r7, #24
 8003c86:	46bd      	mov	sp, r7
 8003c88:	bdb0      	pop	{r4, r5, r7, pc}
 8003c8a:	bf00      	nop
 8003c8c:	40023800 	.word	0x40023800
 8003c90:	00f42400 	.word	0x00f42400
 8003c94:	007a1200 	.word	0x007a1200
 8003c98:	08007d68 	.word	0x08007d68

08003c9c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003c9c:	b480      	push	{r7}
 8003c9e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ca0:	4b02      	ldr	r3, [pc, #8]	; (8003cac <HAL_RCC_GetHCLKFreq+0x10>)
 8003ca2:	681b      	ldr	r3, [r3, #0]
}
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	bc80      	pop	{r7}
 8003caa:	4770      	bx	lr
 8003cac:	20000000 	.word	0x20000000

08003cb0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003cb4:	f7ff fff2 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	4b05      	ldr	r3, [pc, #20]	; (8003cd0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	0a1b      	lsrs	r3, r3, #8
 8003cc0:	f003 0307 	and.w	r3, r3, #7
 8003cc4:	4903      	ldr	r1, [pc, #12]	; (8003cd4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cc6:	5ccb      	ldrb	r3, [r1, r3]
 8003cc8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ccc:	4618      	mov	r0, r3
 8003cce:	bd80      	pop	{r7, pc}
 8003cd0:	40023800 	.word	0x40023800
 8003cd4:	08007d84 	.word	0x08007d84

08003cd8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003cdc:	f7ff ffde 	bl	8003c9c <HAL_RCC_GetHCLKFreq>
 8003ce0:	4602      	mov	r2, r0
 8003ce2:	4b05      	ldr	r3, [pc, #20]	; (8003cf8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	0adb      	lsrs	r3, r3, #11
 8003ce8:	f003 0307 	and.w	r3, r3, #7
 8003cec:	4903      	ldr	r1, [pc, #12]	; (8003cfc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003cee:	5ccb      	ldrb	r3, [r1, r3]
 8003cf0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	bd80      	pop	{r7, pc}
 8003cf8:	40023800 	.word	0x40023800
 8003cfc:	08007d84 	.word	0x08007d84

08003d00 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8003d00:	b480      	push	{r7}
 8003d02:	b087      	sub	sp, #28
 8003d04:	af00      	add	r7, sp, #0
 8003d06:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8003d08:	2300      	movs	r3, #0
 8003d0a:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8003d0c:	4b29      	ldr	r3, [pc, #164]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003d0e:	689b      	ldr	r3, [r3, #8]
 8003d10:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003d14:	2b00      	cmp	r3, #0
 8003d16:	d12c      	bne.n	8003d72 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8003d18:	4b26      	ldr	r3, [pc, #152]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003d1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d005      	beq.n	8003d30 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003d24:	4b24      	ldr	r3, [pc, #144]	; (8003db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003d2c:	617b      	str	r3, [r7, #20]
 8003d2e:	e016      	b.n	8003d5e <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d30:	4b20      	ldr	r3, [pc, #128]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d34:	4a1f      	ldr	r2, [pc, #124]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003d36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d3a:	6253      	str	r3, [r2, #36]	; 0x24
 8003d3c:	4b1d      	ldr	r3, [pc, #116]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003d3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d44:	60fb      	str	r3, [r7, #12]
 8003d46:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8003d48:	4b1b      	ldr	r3, [pc, #108]	; (8003db8 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f403 53c0 	and.w	r3, r3, #6144	; 0x1800
 8003d50:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d52:	4b18      	ldr	r3, [pc, #96]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d56:	4a17      	ldr	r2, [pc, #92]	; (8003db4 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8003d58:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d5c:	6253      	str	r3, [r2, #36]	; 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8003d5e:	697b      	ldr	r3, [r7, #20]
 8003d60:	f5b3 5fc0 	cmp.w	r3, #6144	; 0x1800
 8003d64:	d105      	bne.n	8003d72 <RCC_SetFlashLatencyFromMSIRange+0x72>
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8003d6c:	d101      	bne.n	8003d72 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8003d6e:	2301      	movs	r3, #1
 8003d70:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8003d72:	693b      	ldr	r3, [r7, #16]
 8003d74:	2b01      	cmp	r3, #1
 8003d76:	d105      	bne.n	8003d84 <RCC_SetFlashLatencyFromMSIRange+0x84>
 8003d78:	4b10      	ldr	r3, [pc, #64]	; (8003dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	4a0f      	ldr	r2, [pc, #60]	; (8003dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d7e:	f043 0304 	orr.w	r3, r3, #4
 8003d82:	6013      	str	r3, [r2, #0]
 8003d84:	4b0d      	ldr	r3, [pc, #52]	; (8003dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f023 0201 	bic.w	r2, r3, #1
 8003d8c:	490b      	ldr	r1, [pc, #44]	; (8003dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d8e:	693b      	ldr	r3, [r7, #16]
 8003d90:	4313      	orrs	r3, r2
 8003d92:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8003d94:	4b09      	ldr	r3, [pc, #36]	; (8003dbc <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	693a      	ldr	r2, [r7, #16]
 8003d9e:	429a      	cmp	r2, r3
 8003da0:	d001      	beq.n	8003da6 <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e000      	b.n	8003da8 <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 8003da6:	2300      	movs	r3, #0
}
 8003da8:	4618      	mov	r0, r3
 8003daa:	371c      	adds	r7, #28
 8003dac:	46bd      	mov	sp, r7
 8003dae:	bc80      	pop	{r7}
 8003db0:	4770      	bx	lr
 8003db2:	bf00      	nop
 8003db4:	40023800 	.word	0x40023800
 8003db8:	40007000 	.word	0x40007000
 8003dbc:	40023c00 	.word	0x40023c00

08003dc0 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003dc0:	b580      	push	{r7, lr}
 8003dc2:	b086      	sub	sp, #24
 8003dc4:	af00      	add	r7, sp, #0
 8003dc6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f003 0301 	and.w	r3, r3, #1
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d106      	bne.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x22>
#if defined(LCD)
   || (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f003 0302 	and.w	r3, r3, #2
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	f000 80ed 	beq.w	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->LCDClockSelection));
    }
#endif /* LCD */

    FlagStatus       pwrclkchanged = RESET;
 8003de2:	2300      	movs	r3, #0
 8003de4:	75fb      	strb	r3, [r7, #23]

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003de6:	4b78      	ldr	r3, [pc, #480]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003de8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d10d      	bne.n	8003e0e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003df2:	4b75      	ldr	r3, [pc, #468]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003df4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003df6:	4a74      	ldr	r2, [pc, #464]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003df8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003dfc:	6253      	str	r3, [r2, #36]	; 0x24
 8003dfe:	4b72      	ldr	r3, [pc, #456]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003e00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e02:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e06:	60bb      	str	r3, [r7, #8]
 8003e08:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0e:	4b6f      	ldr	r3, [pc, #444]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d118      	bne.n	8003e4c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003e1a:	4b6c      	ldr	r3, [pc, #432]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	4a6b      	ldr	r2, [pc, #428]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003e20:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003e24:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003e26:	f7fe fad5 	bl	80023d4 <HAL_GetTick>
 8003e2a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e2c:	e008      	b.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x80>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003e2e:	f7fe fad1 	bl	80023d4 <HAL_GetTick>
 8003e32:	4602      	mov	r2, r0
 8003e34:	693b      	ldr	r3, [r7, #16]
 8003e36:	1ad3      	subs	r3, r2, r3
 8003e38:	2b64      	cmp	r3, #100	; 0x64
 8003e3a:	d901      	bls.n	8003e40 <HAL_RCCEx_PeriphCLKConfig+0x80>
        {
          return HAL_TIMEOUT;
 8003e3c:	2303      	movs	r3, #3
 8003e3e:	e0be      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e40:	4b62      	ldr	r3, [pc, #392]	; (8003fcc <HAL_RCCEx_PeriphCLKConfig+0x20c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d0f0      	beq.n	8003e2e <HAL_RCCEx_PeriphCLKConfig+0x6e>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 8003e4c:	4b5e      	ldr	r3, [pc, #376]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003e4e:	681b      	ldr	r3, [r3, #0]
 8003e50:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003e54:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	685b      	ldr	r3, [r3, #4]
 8003e5a:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003e5e:	68fa      	ldr	r2, [r7, #12]
 8003e60:	429a      	cmp	r2, r3
 8003e62:	d106      	bne.n	8003e72 <HAL_RCCEx_PeriphCLKConfig+0xb2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	689b      	ldr	r3, [r3, #8]
 8003e68:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003e6c:	68fa      	ldr	r2, [r7, #12]
 8003e6e:	429a      	cmp	r2, r3
 8003e70:	d00f      	beq.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	685b      	ldr	r3, [r3, #4]
 8003e76:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e7a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003e7e:	d108      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8003e80:	4b51      	ldr	r3, [pc, #324]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8003e8c:	d101      	bne.n	8003e92 <HAL_RCCEx_PeriphCLKConfig+0xd2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e095      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8003e92:	4b4d      	ldr	r3, [pc, #308]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003e94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e96:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003e9a:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 8003e9c:	68fb      	ldr	r3, [r7, #12]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d041      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x166>
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	685b      	ldr	r3, [r3, #4]
 8003ea6:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003eaa:	68fa      	ldr	r2, [r7, #12]
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d005      	beq.n	8003ebc <HAL_RCCEx_PeriphCLKConfig+0xfc>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d10c      	bne.n	8003ed6 <HAL_RCCEx_PeriphCLKConfig+0x116>
#if defined(LCD)
      || ((temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CSR_RTCSEL)) \
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	689b      	ldr	r3, [r3, #8]
 8003ec0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003ec4:	68fa      	ldr	r2, [r7, #12]
 8003ec6:	429a      	cmp	r2, r3
 8003ec8:	d02d      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x166>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f003 0302 	and.w	r3, r3, #2
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d027      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x166>
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 8003ed6:	4b3c      	ldr	r3, [pc, #240]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003ed8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003eda:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8003ede:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8003ee0:	4b3b      	ldr	r3, [pc, #236]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003ee2:	2201      	movs	r2, #1
 8003ee4:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003ee6:	4b3a      	ldr	r3, [pc, #232]	; (8003fd0 <HAL_RCCEx_PeriphCLKConfig+0x210>)
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8003eec:	4a36      	ldr	r2, [pc, #216]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6353      	str	r3, [r2, #52]	; 0x34

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d014      	beq.n	8003f26 <HAL_RCCEx_PeriphCLKConfig+0x166>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efc:	f7fe fa6a 	bl	80023d4 <HAL_GetTick>
 8003f00:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f02:	e00a      	b.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003f04:	f7fe fa66 	bl	80023d4 <HAL_GetTick>
 8003f08:	4602      	mov	r2, r0
 8003f0a:	693b      	ldr	r3, [r7, #16]
 8003f0c:	1ad3      	subs	r3, r2, r3
 8003f0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d901      	bls.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x15a>
          {
            return HAL_TIMEOUT;
 8003f16:	2303      	movs	r3, #3
 8003f18:	e051      	b.n	8003fbe <HAL_RCCEx_PeriphCLKConfig+0x1fe>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003f1a:	4b2b      	ldr	r3, [pc, #172]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d0ee      	beq.n	8003f04 <HAL_RCCEx_PeriphCLKConfig+0x144>
          }
        }
      }
    }
#if defined(LCD)
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD)
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f003 0302 	and.w	r3, r3, #2
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d01a      	beq.n	8003f68 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	689b      	ldr	r3, [r3, #8]
 8003f36:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f3a:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f3e:	d10a      	bne.n	8003f56 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8003f40:	4b21      	ldr	r3, [pc, #132]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003f50:	491d      	ldr	r1, [pc, #116]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f52:	4313      	orrs	r3, r2
 8003f54:	600b      	str	r3, [r1, #0]
 8003f56:	4b1c      	ldr	r3, [pc, #112]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f58:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	689b      	ldr	r3, [r3, #8]
 8003f5e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f62:	4919      	ldr	r1, [pc, #100]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f64:	4313      	orrs	r3, r2
 8003f66:	634b      	str	r3, [r1, #52]	; 0x34
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0301 	and.w	r3, r3, #1
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d01a      	beq.n	8003faa <HAL_RCCEx_PeriphCLKConfig+0x1ea>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	685b      	ldr	r3, [r3, #4]
 8003f78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003f7c:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8003f80:	d10a      	bne.n	8003f98 <HAL_RCCEx_PeriphCLKConfig+0x1d8>
 8003f82:	4b11      	ldr	r3, [pc, #68]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	685b      	ldr	r3, [r3, #4]
 8003f8e:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
 8003f92:	490d      	ldr	r1, [pc, #52]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f94:	4313      	orrs	r3, r2
 8003f96:	600b      	str	r3, [r1, #0]
 8003f98:	4b0b      	ldr	r3, [pc, #44]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003f9a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003fa4:	4908      	ldr	r1, [pc, #32]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fa6:	4313      	orrs	r3, r2
 8003fa8:	634b      	str	r3, [r1, #52]	; 0x34
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8003faa:	7dfb      	ldrb	r3, [r7, #23]
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	d105      	bne.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x1fc>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003fb0:	4b05      	ldr	r3, [pc, #20]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	4a04      	ldr	r2, [pc, #16]	; (8003fc8 <HAL_RCCEx_PeriphCLKConfig+0x208>)
 8003fb6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003fba:	6253      	str	r3, [r2, #36]	; 0x24
    }
  }

  return HAL_OK;
 8003fbc:	2300      	movs	r3, #0
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}
 8003fc6:	bf00      	nop
 8003fc8:	40023800 	.word	0x40023800
 8003fcc:	40007000 	.word	0x40007000
 8003fd0:	424706dc 	.word	0x424706dc

08003fd4 <HAL_RTC_Init>:
  * @brief  Initialize the RTC peripheral
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003fd4:	b580      	push	{r7, lr}
 8003fd6:	b082      	sub	sp, #8
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  /* Check the RTC peripheral state */
  if (hrtc == NULL)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d101      	bne.n	8003fe6 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	e083      	b.n	80040ee <HAL_RTC_Init+0x11a>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	7f5b      	ldrb	r3, [r3, #29]
 8003fea:	b2db      	uxtb	r3, r3
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d105      	bne.n	8003ffc <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f7fd ffd2 	bl	8001fa0 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2202      	movs	r2, #2
 8004000:	775a      	strb	r2, [r3, #29]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	22ca      	movs	r2, #202	; 0xca
 8004008:	625a      	str	r2, [r3, #36]	; 0x24
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	2253      	movs	r2, #83	; 0x53
 8004010:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f9ee 	bl	80043f4 <RTC_EnterInitMode>
 8004018:	4603      	mov	r3, r0
 800401a:	2b00      	cmp	r3, #0
 800401c:	d008      	beq.n	8004030 <HAL_RTC_Init+0x5c>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	22ff      	movs	r2, #255	; 0xff
 8004024:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2204      	movs	r2, #4
 800402a:	775a      	strb	r2, [r3, #29]

    return HAL_ERROR;
 800402c:	2301      	movs	r3, #1
 800402e:	e05e      	b.n	80040ee <HAL_RTC_Init+0x11a>
  }
  else
  {
    /* Clear RTC_CR FMT, OSEL and POL Bits */
    hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	687a      	ldr	r2, [r7, #4]
 8004038:	6812      	ldr	r2, [r2, #0]
 800403a:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800403e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004042:	6093      	str	r3, [r2, #8]
    /* Set RTC_CR register */
    hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	6899      	ldr	r1, [r3, #8]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	685a      	ldr	r2, [r3, #4]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	691b      	ldr	r3, [r3, #16]
 8004052:	431a      	orrs	r2, r3
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	695b      	ldr	r3, [r3, #20]
 8004058:	431a      	orrs	r2, r3
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	609a      	str	r2, [r3, #8]

    /* Configure the RTC PRER */
    hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	687a      	ldr	r2, [r7, #4]
 8004068:	68d2      	ldr	r2, [r2, #12]
 800406a:	611a      	str	r2, [r3, #16]
    hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << 16U);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	6919      	ldr	r1, [r3, #16]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	041a      	lsls	r2, r3, #16
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	430a      	orrs	r2, r1
 800407e:	611a      	str	r2, [r3, #16]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= (uint32_t)~RTC_ISR_INIT;
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	68da      	ldr	r2, [r3, #12]
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800408e:	60da      	str	r2, [r3, #12]
#if defined (RTC_CR_BYPSHAD)
    /* If  CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
    if((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	689b      	ldr	r3, [r3, #8]
 8004096:	f003 0320 	and.w	r3, r3, #32
 800409a:	2b00      	cmp	r3, #0
 800409c:	d10e      	bne.n	80040bc <HAL_RTC_Init+0xe8>
#endif /* RTC_CR_BYPSHAD */
    {
      if(HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800409e:	6878      	ldr	r0, [r7, #4]
 80040a0:	f000 f97b 	bl	800439a <HAL_RTC_WaitForSynchro>
 80040a4:	4603      	mov	r3, r0
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d008      	beq.n	80040bc <HAL_RTC_Init+0xe8>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	22ff      	movs	r2, #255	; 0xff
 80040b0:	625a      	str	r2, [r3, #36]	; 0x24

        hrtc->State = HAL_RTC_STATE_ERROR;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	2204      	movs	r2, #4
 80040b6:	775a      	strb	r2, [r3, #29]

        return HAL_ERROR;
 80040b8:	2301      	movs	r3, #1
 80040ba:	e018      	b.n	80040ee <HAL_RTC_Init+0x11a>
      }
    }
    hrtc->Instance->TAFCR &= (uint32_t)~RTC_TAFCR_ALARMOUTTYPE;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80040ca:	641a      	str	r2, [r3, #64]	; 0x40
    hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	6c19      	ldr	r1, [r3, #64]	; 0x40
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	699a      	ldr	r2, [r3, #24]
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	430a      	orrs	r2, r1
 80040dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	22ff      	movs	r2, #255	; 0xff
 80040e4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	2201      	movs	r2, #1
 80040ea:	775a      	strb	r2, [r3, #29]

    return HAL_OK;
 80040ec:	2300      	movs	r3, #0
  }
}
 80040ee:	4618      	mov	r0, r3
 80040f0:	3708      	adds	r7, #8
 80040f2:	46bd      	mov	sp, r7
 80040f4:	bd80      	pop	{r7, pc}

080040f6 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80040f6:	b590      	push	{r4, r7, lr}
 80040f8:	b087      	sub	sp, #28
 80040fa:	af00      	add	r7, sp, #0
 80040fc:	60f8      	str	r0, [r7, #12]
 80040fe:	60b9      	str	r1, [r7, #8]
 8004100:	607a      	str	r2, [r7, #4]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	7f1b      	ldrb	r3, [r3, #28]
 8004106:	2b01      	cmp	r3, #1
 8004108:	d101      	bne.n	800410e <HAL_RTC_SetTime+0x18>
 800410a:	2302      	movs	r3, #2
 800410c:	e0a3      	b.n	8004256 <HAL_RTC_SetTime+0x160>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	2201      	movs	r2, #1
 8004112:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2202      	movs	r2, #2
 8004118:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	2b00      	cmp	r3, #0
 800411e:	d126      	bne.n	800416e <HAL_RTC_SetTime+0x78>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	689b      	ldr	r3, [r3, #8]
 8004126:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d102      	bne.n	8004134 <HAL_RTC_SetTime+0x3e>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800412e:	68bb      	ldr	r3, [r7, #8]
 8004130:	2200      	movs	r2, #0
 8004132:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004134:	68bb      	ldr	r3, [r7, #8]
 8004136:	781b      	ldrb	r3, [r3, #0]
 8004138:	4618      	mov	r0, r3
 800413a:	f000 f985 	bl	8004448 <RTC_ByteToBcd2>
 800413e:	4603      	mov	r3, r0
 8004140:	041c      	lsls	r4, r3, #16
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 8004142:	68bb      	ldr	r3, [r7, #8]
 8004144:	785b      	ldrb	r3, [r3, #1]
 8004146:	4618      	mov	r0, r3
 8004148:	f000 f97e 	bl	8004448 <RTC_ByteToBcd2>
 800414c:	4603      	mov	r3, r0
 800414e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004150:	431c      	orrs	r4, r3
                        ((uint32_t)RTC_ByteToBcd2(sTime->Seconds)) | \
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	789b      	ldrb	r3, [r3, #2]
 8004156:	4618      	mov	r0, r3
 8004158:	f000 f976 	bl	8004448 <RTC_ByteToBcd2>
 800415c:	4603      	mov	r3, r0
                        ((uint32_t)RTC_ByteToBcd2(sTime->Minutes) << 8U) | \
 800415e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat) << 16U));
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	78db      	ldrb	r3, [r3, #3]
 8004166:	041b      	lsls	r3, r3, #16
    tmpreg = (uint32_t)(((uint32_t)RTC_ByteToBcd2(sTime->Hours) << 16U) | \
 8004168:	4313      	orrs	r3, r2
 800416a:	617b      	str	r3, [r7, #20]
 800416c:	e018      	b.n	80041a0 <HAL_RTC_SetTime+0xaa>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	689b      	ldr	r3, [r3, #8]
 8004174:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004178:	2b00      	cmp	r3, #0
 800417a:	d102      	bne.n	8004182 <HAL_RTC_SetTime+0x8c>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800417c:	68bb      	ldr	r3, [r7, #8]
 800417e:	2200      	movs	r2, #0
 8004180:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 8004182:	68bb      	ldr	r3, [r7, #8]
 8004184:	781b      	ldrb	r3, [r3, #0]
 8004186:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004188:	68bb      	ldr	r3, [r7, #8]
 800418a:	785b      	ldrb	r3, [r3, #1]
 800418c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800418e:	4313      	orrs	r3, r2
              ((uint32_t)sTime->Seconds) | \
 8004190:	68ba      	ldr	r2, [r7, #8]
 8004192:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes) << 8U) | \
 8004194:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << 16U));
 8004196:	68bb      	ldr	r3, [r7, #8]
 8004198:	78db      	ldrb	r3, [r3, #3]
 800419a:	041b      	lsls	r3, r3, #16
    tmpreg = (((uint32_t)(sTime->Hours) << 16U) | \
 800419c:	4313      	orrs	r3, r2
 800419e:	617b      	str	r3, [r7, #20]
  }
  UNUSED(tmpreg);
  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	22ca      	movs	r2, #202	; 0xca
 80041a6:	625a      	str	r2, [r3, #36]	; 0x24
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	2253      	movs	r2, #83	; 0x53
 80041ae:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f91f 	bl	80043f4 <RTC_EnterInitMode>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d00b      	beq.n	80041d4 <HAL_RTC_SetTime+0xde>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	22ff      	movs	r2, #255	; 0xff
 80041c2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	2204      	movs	r2, #4
 80041c8:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	2200      	movs	r2, #0
 80041ce:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 80041d0:	2301      	movs	r3, #1
 80041d2:	e040      	b.n	8004256 <HAL_RTC_SetTime+0x160>
  }
  else
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681a      	ldr	r2, [r3, #0]
 80041d8:	697b      	ldr	r3, [r7, #20]
 80041da:	f003 337f 	and.w	r3, r3, #2139062143	; 0x7f7f7f7f
 80041de:	f023 43fe 	bic.w	r3, r3, #2130706432	; 0x7f000000
 80041e2:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= ((uint32_t)~RTC_CR_BKP);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	689a      	ldr	r2, [r3, #8]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80041f2:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	6899      	ldr	r1, [r3, #8]
 80041fa:	68bb      	ldr	r3, [r7, #8]
 80041fc:	68da      	ldr	r2, [r3, #12]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	431a      	orrs	r2, r3
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	68da      	ldr	r2, [r3, #12]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800421a:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800421c:	68f8      	ldr	r0, [r7, #12]
 800421e:	f000 f8bc 	bl	800439a <HAL_RTC_WaitForSynchro>
 8004222:	4603      	mov	r3, r0
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00b      	beq.n	8004240 <HAL_RTC_SetTime+0x14a>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	22ff      	movs	r2, #255	; 0xff
 800422e:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	2204      	movs	r2, #4
 8004234:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	2200      	movs	r2, #0
 800423a:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 800423c:	2301      	movs	r3, #1
 800423e:	e00a      	b.n	8004256 <HAL_RTC_SetTime+0x160>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004240:	68fb      	ldr	r3, [r7, #12]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	22ff      	movs	r2, #255	; 0xff
 8004246:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY;
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	2201      	movs	r2, #1
 800424c:	775a      	strb	r2, [r3, #29]

    __HAL_UNLOCK(hrtc);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004254:	2300      	movs	r3, #0
  }
}
 8004256:	4618      	mov	r0, r3
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	bd90      	pop	{r4, r7, pc}

0800425e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800425e:	b590      	push	{r4, r7, lr}
 8004260:	b087      	sub	sp, #28
 8004262:	af00      	add	r7, sp, #0
 8004264:	60f8      	str	r0, [r7, #12]
 8004266:	60b9      	str	r1, [r7, #8]
 8004268:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	7f1b      	ldrb	r3, [r3, #28]
 800426e:	2b01      	cmp	r3, #1
 8004270:	d101      	bne.n	8004276 <HAL_RTC_SetDate+0x18>
 8004272:	2302      	movs	r3, #2
 8004274:	e08d      	b.n	8004392 <HAL_RTC_SetDate+0x134>
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	2201      	movs	r2, #1
 800427a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	2202      	movs	r2, #2
 8004280:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	2b00      	cmp	r3, #0
 8004286:	d10e      	bne.n	80042a6 <HAL_RTC_SetDate+0x48>
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	785b      	ldrb	r3, [r3, #1]
 800428c:	f003 0310 	and.w	r3, r3, #16
 8004290:	2b00      	cmp	r3, #0
 8004292:	d008      	beq.n	80042a6 <HAL_RTC_SetDate+0x48>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	785b      	ldrb	r3, [r3, #1]
 8004298:	f023 0310 	bic.w	r3, r3, #16
 800429c:	b2db      	uxtb	r3, r3
 800429e:	330a      	adds	r3, #10
 80042a0:	b2da      	uxtb	r2, r3
 80042a2:	68bb      	ldr	r3, [r7, #8]
 80042a4:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d11c      	bne.n	80042e6 <HAL_RTC_SetDate+0x88>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80042ac:	68bb      	ldr	r3, [r7, #8]
 80042ae:	78db      	ldrb	r3, [r3, #3]
 80042b0:	4618      	mov	r0, r3
 80042b2:	f000 f8c9 	bl	8004448 <RTC_ByteToBcd2>
 80042b6:	4603      	mov	r3, r0
 80042b8:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80042ba:	68bb      	ldr	r3, [r7, #8]
 80042bc:	785b      	ldrb	r3, [r3, #1]
 80042be:	4618      	mov	r0, r3
 80042c0:	f000 f8c2 	bl	8004448 <RTC_ByteToBcd2>
 80042c4:	4603      	mov	r3, r0
 80042c6:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80042c8:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date)) | \
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	789b      	ldrb	r3, [r3, #2]
 80042ce:	4618      	mov	r0, r3
 80042d0:	f000 f8ba 	bl	8004448 <RTC_ByteToBcd2>
 80042d4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << 8U) | \
 80042d6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay << 13U));
 80042da:	68bb      	ldr	r3, [r7, #8]
 80042dc:	781b      	ldrb	r3, [r3, #0]
 80042de:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year) << 16U) | \
 80042e0:	4313      	orrs	r3, r2
 80042e2:	617b      	str	r3, [r7, #20]
 80042e4:	e00e      	b.n	8004304 <HAL_RTC_SetDate+0xa6>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80042e6:	68bb      	ldr	r3, [r7, #8]
 80042e8:	78db      	ldrb	r3, [r3, #3]
 80042ea:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month) << 8U) | \
 80042ec:	68bb      	ldr	r3, [r7, #8]
 80042ee:	785b      	ldrb	r3, [r3, #1]
 80042f0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 80042f2:	4313      	orrs	r3, r2
                  ((uint32_t)sDate->Date) | \
 80042f4:	68ba      	ldr	r2, [r7, #8]
 80042f6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month) << 8U) | \
 80042f8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << 13U));
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	781b      	ldrb	r3, [r3, #0]
 80042fe:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year) << 16U) | \
 8004300:	4313      	orrs	r3, r2
 8004302:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	22ca      	movs	r2, #202	; 0xca
 800430a:	625a      	str	r2, [r3, #36]	; 0x24
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	2253      	movs	r2, #83	; 0x53
 8004312:	625a      	str	r2, [r3, #36]	; 0x24

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004314:	68f8      	ldr	r0, [r7, #12]
 8004316:	f000 f86d 	bl	80043f4 <RTC_EnterInitMode>
 800431a:	4603      	mov	r3, r0
 800431c:	2b00      	cmp	r3, #0
 800431e:	d00b      	beq.n	8004338 <HAL_RTC_SetDate+0xda>
  {
    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	22ff      	movs	r2, #255	; 0xff
 8004326:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set RTC state*/
    hrtc->State = HAL_RTC_STATE_ERROR;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2204      	movs	r2, #4
 800432c:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	2200      	movs	r2, #0
 8004332:	771a      	strb	r2, [r3, #28]

    return HAL_ERROR;
 8004334:	2301      	movs	r3, #1
 8004336:	e02c      	b.n	8004392 <HAL_RTC_SetDate+0x134>
  }
  else
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	697b      	ldr	r3, [r7, #20]
 800433e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 8004342:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 8004346:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    hrtc->Instance->ISR &= ((uint32_t)~RTC_ISR_INIT);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	68da      	ldr	r2, [r3, #12]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004356:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 f81e 	bl	800439a <HAL_RTC_WaitForSynchro>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d00b      	beq.n	800437c <HAL_RTC_SetDate+0x11e>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	22ff      	movs	r2, #255	; 0xff
 800436a:	625a      	str	r2, [r3, #36]	; 0x24

      hrtc->State = HAL_RTC_STATE_ERROR;
 800436c:	68fb      	ldr	r3, [r7, #12]
 800436e:	2204      	movs	r2, #4
 8004370:	775a      	strb	r2, [r3, #29]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2200      	movs	r2, #0
 8004376:	771a      	strb	r2, [r3, #28]

      return HAL_ERROR;
 8004378:	2301      	movs	r3, #1
 800437a:	e00a      	b.n	8004392 <HAL_RTC_SetDate+0x134>
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	22ff      	movs	r2, #255	; 0xff
 8004382:	625a      	str	r2, [r3, #36]	; 0x24

    hrtc->State = HAL_RTC_STATE_READY ;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2201      	movs	r2, #1
 8004388:	775a      	strb	r2, [r3, #29]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	2200      	movs	r2, #0
 800438e:	771a      	strb	r2, [r3, #28]

    return HAL_OK;
 8004390:	2300      	movs	r3, #0
  }
}
 8004392:	4618      	mov	r0, r3
 8004394:	371c      	adds	r7, #28
 8004396:	46bd      	mov	sp, r7
 8004398:	bd90      	pop	{r4, r7, pc}

0800439a <HAL_RTC_WaitForSynchro>:
  *         correctly copied into the RTC_TR and RTC_DR shadow registers.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 800439a:	b580      	push	{r7, lr}
 800439c:	b084      	sub	sp, #16
 800439e:	af00      	add	r7, sp, #0
 80043a0:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

#if defined (RTC_CR_BYPSHAD)
  /* If RTC_CR_BYPSHAD bit = 0, wait for synchro else this check is not needed */
  if ((hrtc->Instance->CR & RTC_CR_BYPSHAD) == RESET)
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	689b      	ldr	r3, [r3, #8]
 80043a8:	f003 0320 	and.w	r3, r3, #32
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d11c      	bne.n	80043ea <HAL_RTC_WaitForSynchro+0x50>
#endif /* RTC_CR_BYPSHAD */
  {
    /* Clear RSF flag */
    hrtc->Instance->ISR &= (uint32_t)RTC_RSF_MASK;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	68da      	ldr	r2, [r3, #12]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80043be:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 80043c0:	f7fe f808 	bl	80023d4 <HAL_GetTick>
 80043c4:	60f8      	str	r0, [r7, #12]

    /* Wait the registers to be synchronised */
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043c6:	e009      	b.n	80043dc <HAL_RTC_WaitForSynchro+0x42>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80043c8:	f7fe f804 	bl	80023d4 <HAL_GetTick>
 80043cc:	4602      	mov	r2, r0
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	1ad3      	subs	r3, r2, r3
 80043d2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80043d6:	d901      	bls.n	80043dc <HAL_RTC_WaitForSynchro+0x42>
      {
        return HAL_TIMEOUT;
 80043d8:	2303      	movs	r3, #3
 80043da:	e007      	b.n	80043ec <HAL_RTC_WaitForSynchro+0x52>
    while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	68db      	ldr	r3, [r3, #12]
 80043e2:	f003 0320 	and.w	r3, r3, #32
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d0ee      	beq.n	80043c8 <HAL_RTC_WaitForSynchro+0x2e>
      }
    }
  }

  return HAL_OK;
 80043ea:	2300      	movs	r3, #0
}
 80043ec:	4618      	mov	r0, r3
 80043ee:	3710      	adds	r7, #16
 80043f0:	46bd      	mov	sp, r7
 80043f2:	bd80      	pop	{r7, pc}

080043f4 <RTC_EnterInitMode>:
  *         __HAL_RTC_WRITEPROTECTION_DISABLE() before calling this function.
  * @param  hrtc RTC handle
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80043f4:	b580      	push	{r7, lr}
 80043f6:	b084      	sub	sp, #16
 80043f8:	af00      	add	r7, sp, #0
 80043fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check if the Initialization mode is set */
  if ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	68db      	ldr	r3, [r3, #12]
 8004402:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004406:	2b00      	cmp	r3, #0
 8004408:	d119      	bne.n	800443e <RTC_EnterInitMode+0x4a>
  {
    /* Set the Initialization mode */
    hrtc->Instance->ISR = (uint32_t)RTC_INIT_MASK;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f04f 32ff 	mov.w	r2, #4294967295
 8004412:	60da      	str	r2, [r3, #12]

    tickstart = HAL_GetTick();
 8004414:	f7fd ffde 	bl	80023d4 <HAL_GetTick>
 8004418:	60f8      	str	r0, [r7, #12]
    /* Wait till RTC is in INIT state and if Time out is reached exit */
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 800441a:	e009      	b.n	8004430 <RTC_EnterInitMode+0x3c>
    {
      if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 800441c:	f7fd ffda 	bl	80023d4 <HAL_GetTick>
 8004420:	4602      	mov	r2, r0
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	1ad3      	subs	r3, r2, r3
 8004426:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800442a:	d901      	bls.n	8004430 <RTC_EnterInitMode+0x3c>
      {
        return HAL_TIMEOUT;
 800442c:	2303      	movs	r3, #3
 800442e:	e007      	b.n	8004440 <RTC_EnterInitMode+0x4c>
    while ((hrtc->Instance->ISR & RTC_ISR_INITF) == 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	68db      	ldr	r3, [r3, #12]
 8004436:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d0ee      	beq.n	800441c <RTC_EnterInitMode+0x28>
      }
    }
  }

  return HAL_OK;
 800443e:	2300      	movs	r3, #0
}
 8004440:	4618      	mov	r0, r3
 8004442:	3710      	adds	r7, #16
 8004444:	46bd      	mov	sp, r7
 8004446:	bd80      	pop	{r7, pc}

08004448 <RTC_ByteToBcd2>:
  * @brief  Convert a 2 digit decimal to BCD format.
  * @param  Value Byte to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	4603      	mov	r3, r0
 8004450:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8004452:	2300      	movs	r3, #0
 8004454:	60fb      	str	r3, [r7, #12]
  uint8_t Param = Value;
 8004456:	79fb      	ldrb	r3, [r7, #7]
 8004458:	72fb      	strb	r3, [r7, #11]

  while (Param >= 10U)
 800445a:	e005      	b.n	8004468 <RTC_ByteToBcd2+0x20>
  {
    bcdhigh++;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	3301      	adds	r3, #1
 8004460:	60fb      	str	r3, [r7, #12]
    Param -= 10U;
 8004462:	7afb      	ldrb	r3, [r7, #11]
 8004464:	3b0a      	subs	r3, #10
 8004466:	72fb      	strb	r3, [r7, #11]
  while (Param >= 10U)
 8004468:	7afb      	ldrb	r3, [r7, #11]
 800446a:	2b09      	cmp	r3, #9
 800446c:	d8f6      	bhi.n	800445c <RTC_ByteToBcd2+0x14>
  }

  return ((uint8_t)(bcdhigh << 4U) | Param);
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	b2db      	uxtb	r3, r3
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	b2da      	uxtb	r2, r3
 8004476:	7afb      	ldrb	r3, [r7, #11]
 8004478:	4313      	orrs	r3, r2
 800447a:	b2db      	uxtb	r3, r3
}
 800447c:	4618      	mov	r0, r3
 800447e:	3714      	adds	r7, #20
 8004480:	46bd      	mov	sp, r7
 8004482:	bc80      	pop	{r7}
 8004484:	4770      	bx	lr

08004486 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004486:	b580      	push	{r7, lr}
 8004488:	b082      	sub	sp, #8
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d101      	bne.n	8004498 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004494:	2301      	movs	r3, #1
 8004496:	e031      	b.n	80044fc <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800449e:	b2db      	uxtb	r3, r3
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d106      	bne.n	80044b2 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2200      	movs	r2, #0
 80044a8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	f7fd fe7d 	bl	80021ac <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	2202      	movs	r2, #2
 80044b6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681a      	ldr	r2, [r3, #0]
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	3304      	adds	r3, #4
 80044c2:	4619      	mov	r1, r3
 80044c4:	4610      	mov	r0, r2
 80044c6:	f000 fa33 	bl	8004930 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	2201      	movs	r2, #1
 80044ce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	2201      	movs	r2, #1
 80044d6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	2201      	movs	r2, #1
 80044de:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	2201      	movs	r2, #1
 80044e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2201      	movs	r2, #1
 80044ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  return HAL_OK;
 80044fa:	2300      	movs	r3, #0
}
 80044fc:	4618      	mov	r0, r3
 80044fe:	3708      	adds	r7, #8
 8004500:	46bd      	mov	sp, r7
 8004502:	bd80      	pop	{r7, pc}

08004504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004504:	b480      	push	{r7}
 8004506:	b085      	sub	sp, #20
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8004512:	b2db      	uxtb	r3, r3
 8004514:	2b01      	cmp	r3, #1
 8004516:	d001      	beq.n	800451c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004518:	2301      	movs	r3, #1
 800451a:	e03a      	b.n	8004592 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2202      	movs	r2, #2
 8004520:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	68da      	ldr	r2, [r3, #12]
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f042 0201 	orr.w	r2, r2, #1
 8004532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800453c:	d00e      	beq.n	800455c <HAL_TIM_Base_Start_IT+0x58>
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	4a16      	ldr	r2, [pc, #88]	; (800459c <HAL_TIM_Base_Start_IT+0x98>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d009      	beq.n	800455c <HAL_TIM_Base_Start_IT+0x58>
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	4a14      	ldr	r2, [pc, #80]	; (80045a0 <HAL_TIM_Base_Start_IT+0x9c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d004      	beq.n	800455c <HAL_TIM_Base_Start_IT+0x58>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	4a13      	ldr	r2, [pc, #76]	; (80045a4 <HAL_TIM_Base_Start_IT+0xa0>)
 8004558:	4293      	cmp	r3, r2
 800455a:	d111      	bne.n	8004580 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	689b      	ldr	r3, [r3, #8]
 8004562:	f003 0307 	and.w	r3, r3, #7
 8004566:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	2b06      	cmp	r3, #6
 800456c:	d010      	beq.n	8004590 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	681a      	ldr	r2, [r3, #0]
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	f042 0201 	orr.w	r2, r2, #1
 800457c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800457e:	e007      	b.n	8004590 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	681a      	ldr	r2, [r3, #0]
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f042 0201 	orr.w	r2, r2, #1
 800458e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3714      	adds	r7, #20
 8004596:	46bd      	mov	sp, r7
 8004598:	bc80      	pop	{r7}
 800459a:	4770      	bx	lr
 800459c:	40000400 	.word	0x40000400
 80045a0:	40000800 	.word	0x40000800
 80045a4:	40010800 	.word	0x40010800

080045a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80045a8:	b580      	push	{r7, lr}
 80045aa:	b082      	sub	sp, #8
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	691b      	ldr	r3, [r3, #16]
 80045b6:	f003 0302 	and.w	r3, r3, #2
 80045ba:	2b02      	cmp	r3, #2
 80045bc:	d122      	bne.n	8004604 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	68db      	ldr	r3, [r3, #12]
 80045c4:	f003 0302 	and.w	r3, r3, #2
 80045c8:	2b02      	cmp	r3, #2
 80045ca:	d11b      	bne.n	8004604 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f06f 0202 	mvn.w	r2, #2
 80045d4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2201      	movs	r2, #1
 80045da:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	699b      	ldr	r3, [r3, #24]
 80045e2:	f003 0303 	and.w	r3, r3, #3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d003      	beq.n	80045f2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045ea:	6878      	ldr	r0, [r7, #4]
 80045ec:	f000 f985 	bl	80048fa <HAL_TIM_IC_CaptureCallback>
 80045f0:	e005      	b.n	80045fe <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f978 	bl	80048e8 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f987 	bl	800490c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	2200      	movs	r2, #0
 8004602:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	691b      	ldr	r3, [r3, #16]
 800460a:	f003 0304 	and.w	r3, r3, #4
 800460e:	2b04      	cmp	r3, #4
 8004610:	d122      	bne.n	8004658 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	68db      	ldr	r3, [r3, #12]
 8004618:	f003 0304 	and.w	r3, r3, #4
 800461c:	2b04      	cmp	r3, #4
 800461e:	d11b      	bne.n	8004658 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0204 	mvn.w	r2, #4
 8004628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2202      	movs	r2, #2
 800462e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	699b      	ldr	r3, [r3, #24]
 8004636:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f95b 	bl	80048fa <HAL_TIM_IC_CaptureCallback>
 8004644:	e005      	b.n	8004652 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f94e 	bl	80048e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f95d 	bl	800490c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	691b      	ldr	r3, [r3, #16]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b08      	cmp	r3, #8
 8004664:	d122      	bne.n	80046ac <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	f003 0308 	and.w	r3, r3, #8
 8004670:	2b08      	cmp	r3, #8
 8004672:	d11b      	bne.n	80046ac <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	f06f 0208 	mvn.w	r2, #8
 800467c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2204      	movs	r2, #4
 8004682:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	69db      	ldr	r3, [r3, #28]
 800468a:	f003 0303 	and.w	r3, r3, #3
 800468e:	2b00      	cmp	r3, #0
 8004690:	d003      	beq.n	800469a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f931 	bl	80048fa <HAL_TIM_IC_CaptureCallback>
 8004698:	e005      	b.n	80046a6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f924 	bl	80048e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046a0:	6878      	ldr	r0, [r7, #4]
 80046a2:	f000 f933 	bl	800490c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2200      	movs	r2, #0
 80046aa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	691b      	ldr	r3, [r3, #16]
 80046b2:	f003 0310 	and.w	r3, r3, #16
 80046b6:	2b10      	cmp	r3, #16
 80046b8:	d122      	bne.n	8004700 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	68db      	ldr	r3, [r3, #12]
 80046c0:	f003 0310 	and.w	r3, r3, #16
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d11b      	bne.n	8004700 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	f06f 0210 	mvn.w	r2, #16
 80046d0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	2208      	movs	r2, #8
 80046d6:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	69db      	ldr	r3, [r3, #28]
 80046de:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f907 	bl	80048fa <HAL_TIM_IC_CaptureCallback>
 80046ec:	e005      	b.n	80046fa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80046ee:	6878      	ldr	r0, [r7, #4]
 80046f0:	f000 f8fa 	bl	80048e8 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80046f4:	6878      	ldr	r0, [r7, #4]
 80046f6:	f000 f909 	bl	800490c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	2200      	movs	r2, #0
 80046fe:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	691b      	ldr	r3, [r3, #16]
 8004706:	f003 0301 	and.w	r3, r3, #1
 800470a:	2b01      	cmp	r3, #1
 800470c:	d10e      	bne.n	800472c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	68db      	ldr	r3, [r3, #12]
 8004714:	f003 0301 	and.w	r3, r3, #1
 8004718:	2b01      	cmp	r3, #1
 800471a:	d107      	bne.n	800472c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f06f 0201 	mvn.w	r2, #1
 8004724:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7fd fa62 	bl	8001bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004736:	2b40      	cmp	r3, #64	; 0x40
 8004738:	d10e      	bne.n	8004758 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	68db      	ldr	r3, [r3, #12]
 8004740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004744:	2b40      	cmp	r3, #64	; 0x40
 8004746:	d107      	bne.n	8004758 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004750:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004752:	6878      	ldr	r0, [r7, #4]
 8004754:	f000 f8e3 	bl	800491e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004758:	bf00      	nop
 800475a:	3708      	adds	r7, #8
 800475c:	46bd      	mov	sp, r7
 800475e:	bd80      	pop	{r7, pc}

08004760 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004760:	b580      	push	{r7, lr}
 8004762:	b084      	sub	sp, #16
 8004764:	af00      	add	r7, sp, #0
 8004766:	6078      	str	r0, [r7, #4]
 8004768:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004770:	2b01      	cmp	r3, #1
 8004772:	d101      	bne.n	8004778 <HAL_TIM_ConfigClockSource+0x18>
 8004774:	2302      	movs	r3, #2
 8004776:	e0b3      	b.n	80048e0 <HAL_TIM_ConfigClockSource+0x180>
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2201      	movs	r2, #1
 800477c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	2202      	movs	r2, #2
 8004784:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	689b      	ldr	r3, [r3, #8]
 800478e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004796:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800479e:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	681b      	ldr	r3, [r3, #0]
 80047a4:	68fa      	ldr	r2, [r7, #12]
 80047a6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80047a8:	683b      	ldr	r3, [r7, #0]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b0:	d03e      	beq.n	8004830 <HAL_TIM_ConfigClockSource+0xd0>
 80047b2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80047b6:	f200 8087 	bhi.w	80048c8 <HAL_TIM_ConfigClockSource+0x168>
 80047ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047be:	f000 8085 	beq.w	80048cc <HAL_TIM_ConfigClockSource+0x16c>
 80047c2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047c6:	d87f      	bhi.n	80048c8 <HAL_TIM_ConfigClockSource+0x168>
 80047c8:	2b70      	cmp	r3, #112	; 0x70
 80047ca:	d01a      	beq.n	8004802 <HAL_TIM_ConfigClockSource+0xa2>
 80047cc:	2b70      	cmp	r3, #112	; 0x70
 80047ce:	d87b      	bhi.n	80048c8 <HAL_TIM_ConfigClockSource+0x168>
 80047d0:	2b60      	cmp	r3, #96	; 0x60
 80047d2:	d050      	beq.n	8004876 <HAL_TIM_ConfigClockSource+0x116>
 80047d4:	2b60      	cmp	r3, #96	; 0x60
 80047d6:	d877      	bhi.n	80048c8 <HAL_TIM_ConfigClockSource+0x168>
 80047d8:	2b50      	cmp	r3, #80	; 0x50
 80047da:	d03c      	beq.n	8004856 <HAL_TIM_ConfigClockSource+0xf6>
 80047dc:	2b50      	cmp	r3, #80	; 0x50
 80047de:	d873      	bhi.n	80048c8 <HAL_TIM_ConfigClockSource+0x168>
 80047e0:	2b40      	cmp	r3, #64	; 0x40
 80047e2:	d058      	beq.n	8004896 <HAL_TIM_ConfigClockSource+0x136>
 80047e4:	2b40      	cmp	r3, #64	; 0x40
 80047e6:	d86f      	bhi.n	80048c8 <HAL_TIM_ConfigClockSource+0x168>
 80047e8:	2b30      	cmp	r3, #48	; 0x30
 80047ea:	d064      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x156>
 80047ec:	2b30      	cmp	r3, #48	; 0x30
 80047ee:	d86b      	bhi.n	80048c8 <HAL_TIM_ConfigClockSource+0x168>
 80047f0:	2b20      	cmp	r3, #32
 80047f2:	d060      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x156>
 80047f4:	2b20      	cmp	r3, #32
 80047f6:	d867      	bhi.n	80048c8 <HAL_TIM_ConfigClockSource+0x168>
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d05c      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x156>
 80047fc:	2b10      	cmp	r3, #16
 80047fe:	d05a      	beq.n	80048b6 <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8004800:	e062      	b.n	80048c8 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	6818      	ldr	r0, [r3, #0]
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	6899      	ldr	r1, [r3, #8]
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685a      	ldr	r2, [r3, #4]
 800480e:	683b      	ldr	r3, [r7, #0]
 8004810:	68db      	ldr	r3, [r3, #12]
 8004812:	f000 f974 	bl	8004afe <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	689b      	ldr	r3, [r3, #8]
 800481c:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004824:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	68fa      	ldr	r2, [r7, #12]
 800482c:	609a      	str	r2, [r3, #8]
      break;
 800482e:	e04e      	b.n	80048ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6818      	ldr	r0, [r3, #0]
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	6899      	ldr	r1, [r3, #8]
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	685a      	ldr	r2, [r3, #4]
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	68db      	ldr	r3, [r3, #12]
 8004840:	f000 f95d 	bl	8004afe <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	689a      	ldr	r2, [r3, #8]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004852:	609a      	str	r2, [r3, #8]
      break;
 8004854:	e03b      	b.n	80048ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	6818      	ldr	r0, [r3, #0]
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	6859      	ldr	r1, [r3, #4]
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	461a      	mov	r2, r3
 8004864:	f000 f8d4 	bl	8004a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	2150      	movs	r1, #80	; 0x50
 800486e:	4618      	mov	r0, r3
 8004870:	f000 f92b 	bl	8004aca <TIM_ITRx_SetConfig>
      break;
 8004874:	e02b      	b.n	80048ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6818      	ldr	r0, [r3, #0]
 800487a:	683b      	ldr	r3, [r7, #0]
 800487c:	6859      	ldr	r1, [r3, #4]
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	461a      	mov	r2, r3
 8004884:	f000 f8f2 	bl	8004a6c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	2160      	movs	r1, #96	; 0x60
 800488e:	4618      	mov	r0, r3
 8004890:	f000 f91b 	bl	8004aca <TIM_ITRx_SetConfig>
      break;
 8004894:	e01b      	b.n	80048ce <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	6818      	ldr	r0, [r3, #0]
 800489a:	683b      	ldr	r3, [r7, #0]
 800489c:	6859      	ldr	r1, [r3, #4]
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	461a      	mov	r2, r3
 80048a4:	f000 f8b4 	bl	8004a10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	2140      	movs	r1, #64	; 0x40
 80048ae:	4618      	mov	r0, r3
 80048b0:	f000 f90b 	bl	8004aca <TIM_ITRx_SetConfig>
      break;
 80048b4:	e00b      	b.n	80048ce <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681a      	ldr	r2, [r3, #0]
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	4619      	mov	r1, r3
 80048c0:	4610      	mov	r0, r2
 80048c2:	f000 f902 	bl	8004aca <TIM_ITRx_SetConfig>
        break;
 80048c6:	e002      	b.n	80048ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048c8:	bf00      	nop
 80048ca:	e000      	b.n	80048ce <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80048cc:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 80048de:	2300      	movs	r3, #0
}
 80048e0:	4618      	mov	r0, r3
 80048e2:	3710      	adds	r7, #16
 80048e4:	46bd      	mov	sp, r7
 80048e6:	bd80      	pop	{r7, pc}

080048e8 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048f0:	bf00      	nop
 80048f2:	370c      	adds	r7, #12
 80048f4:	46bd      	mov	sp, r7
 80048f6:	bc80      	pop	{r7}
 80048f8:	4770      	bx	lr

080048fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048fa:	b480      	push	{r7}
 80048fc:	b083      	sub	sp, #12
 80048fe:	af00      	add	r7, sp, #0
 8004900:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004902:	bf00      	nop
 8004904:	370c      	adds	r7, #12
 8004906:	46bd      	mov	sp, r7
 8004908:	bc80      	pop	{r7}
 800490a:	4770      	bx	lr

0800490c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800490c:	b480      	push	{r7}
 800490e:	b083      	sub	sp, #12
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004914:	bf00      	nop
 8004916:	370c      	adds	r7, #12
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr

0800491e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800491e:	b480      	push	{r7}
 8004920:	b083      	sub	sp, #12
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004926:	bf00      	nop
 8004928:	370c      	adds	r7, #12
 800492a:	46bd      	mov	sp, r7
 800492c:	bc80      	pop	{r7}
 800492e:	4770      	bx	lr

08004930 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004946:	d00f      	beq.n	8004968 <TIM_Base_SetConfig+0x38>
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	4a2b      	ldr	r2, [pc, #172]	; (80049f8 <TIM_Base_SetConfig+0xc8>)
 800494c:	4293      	cmp	r3, r2
 800494e:	d00b      	beq.n	8004968 <TIM_Base_SetConfig+0x38>
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	4a2a      	ldr	r2, [pc, #168]	; (80049fc <TIM_Base_SetConfig+0xcc>)
 8004954:	4293      	cmp	r3, r2
 8004956:	d007      	beq.n	8004968 <TIM_Base_SetConfig+0x38>
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	4a29      	ldr	r2, [pc, #164]	; (8004a00 <TIM_Base_SetConfig+0xd0>)
 800495c:	4293      	cmp	r3, r2
 800495e:	d003      	beq.n	8004968 <TIM_Base_SetConfig+0x38>
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a28      	ldr	r2, [pc, #160]	; (8004a04 <TIM_Base_SetConfig+0xd4>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d108      	bne.n	800497a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800496e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	68fa      	ldr	r2, [r7, #12]
 8004976:	4313      	orrs	r3, r2
 8004978:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004980:	d017      	beq.n	80049b2 <TIM_Base_SetConfig+0x82>
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	4a1c      	ldr	r2, [pc, #112]	; (80049f8 <TIM_Base_SetConfig+0xc8>)
 8004986:	4293      	cmp	r3, r2
 8004988:	d013      	beq.n	80049b2 <TIM_Base_SetConfig+0x82>
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a1b      	ldr	r2, [pc, #108]	; (80049fc <TIM_Base_SetConfig+0xcc>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d00f      	beq.n	80049b2 <TIM_Base_SetConfig+0x82>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a1a      	ldr	r2, [pc, #104]	; (8004a00 <TIM_Base_SetConfig+0xd0>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d00b      	beq.n	80049b2 <TIM_Base_SetConfig+0x82>
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	4a19      	ldr	r2, [pc, #100]	; (8004a04 <TIM_Base_SetConfig+0xd4>)
 800499e:	4293      	cmp	r3, r2
 80049a0:	d007      	beq.n	80049b2 <TIM_Base_SetConfig+0x82>
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	4a18      	ldr	r2, [pc, #96]	; (8004a08 <TIM_Base_SetConfig+0xd8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d003      	beq.n	80049b2 <TIM_Base_SetConfig+0x82>
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	4a17      	ldr	r2, [pc, #92]	; (8004a0c <TIM_Base_SetConfig+0xdc>)
 80049ae:	4293      	cmp	r3, r2
 80049b0:	d108      	bne.n	80049c4 <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80049b8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	68db      	ldr	r3, [r3, #12]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	4313      	orrs	r3, r2
 80049c2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	4313      	orrs	r3, r2
 80049d0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049d8:	683b      	ldr	r3, [r7, #0]
 80049da:	689a      	ldr	r2, [r3, #8]
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80049e0:	683b      	ldr	r3, [r7, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2201      	movs	r2, #1
 80049ec:	615a      	str	r2, [r3, #20]
}
 80049ee:	bf00      	nop
 80049f0:	3714      	adds	r7, #20
 80049f2:	46bd      	mov	sp, r7
 80049f4:	bc80      	pop	{r7}
 80049f6:	4770      	bx	lr
 80049f8:	40000400 	.word	0x40000400
 80049fc:	40000800 	.word	0x40000800
 8004a00:	40000c00 	.word	0x40000c00
 8004a04:	40010800 	.word	0x40010800
 8004a08:	40010c00 	.word	0x40010c00
 8004a0c:	40011000 	.word	0x40011000

08004a10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b087      	sub	sp, #28
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	60f8      	str	r0, [r7, #12]
 8004a18:	60b9      	str	r1, [r7, #8]
 8004a1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	6a1b      	ldr	r3, [r3, #32]
 8004a20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	6a1b      	ldr	r3, [r3, #32]
 8004a26:	f023 0201 	bic.w	r2, r3, #1
 8004a2a:	68fb      	ldr	r3, [r7, #12]
 8004a2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	699b      	ldr	r3, [r3, #24]
 8004a32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004a3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	011b      	lsls	r3, r3, #4
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4313      	orrs	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004a46:	697b      	ldr	r3, [r7, #20]
 8004a48:	f023 030a 	bic.w	r3, r3, #10
 8004a4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004a4e:	697a      	ldr	r2, [r7, #20]
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	4313      	orrs	r3, r2
 8004a54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	693a      	ldr	r2, [r7, #16]
 8004a5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	697a      	ldr	r2, [r7, #20]
 8004a60:	621a      	str	r2, [r3, #32]
}
 8004a62:	bf00      	nop
 8004a64:	371c      	adds	r7, #28
 8004a66:	46bd      	mov	sp, r7
 8004a68:	bc80      	pop	{r7}
 8004a6a:	4770      	bx	lr

08004a6c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004a6c:	b480      	push	{r7}
 8004a6e:	b087      	sub	sp, #28
 8004a70:	af00      	add	r7, sp, #0
 8004a72:	60f8      	str	r0, [r7, #12]
 8004a74:	60b9      	str	r1, [r7, #8]
 8004a76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	6a1b      	ldr	r3, [r3, #32]
 8004a7c:	f023 0210 	bic.w	r2, r3, #16
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	699b      	ldr	r3, [r3, #24]
 8004a88:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	6a1b      	ldr	r3, [r3, #32]
 8004a8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004a90:	697b      	ldr	r3, [r7, #20]
 8004a92:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004a96:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	031b      	lsls	r3, r3, #12
 8004a9c:	697a      	ldr	r2, [r7, #20]
 8004a9e:	4313      	orrs	r3, r2
 8004aa0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004aa8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004aaa:	68bb      	ldr	r3, [r7, #8]
 8004aac:	011b      	lsls	r3, r3, #4
 8004aae:	693a      	ldr	r2, [r7, #16]
 8004ab0:	4313      	orrs	r3, r2
 8004ab2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	697a      	ldr	r2, [r7, #20]
 8004ab8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004aba:	68fb      	ldr	r3, [r7, #12]
 8004abc:	693a      	ldr	r2, [r7, #16]
 8004abe:	621a      	str	r2, [r3, #32]
}
 8004ac0:	bf00      	nop
 8004ac2:	371c      	adds	r7, #28
 8004ac4:	46bd      	mov	sp, r7
 8004ac6:	bc80      	pop	{r7}
 8004ac8:	4770      	bx	lr

08004aca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004aca:	b480      	push	{r7}
 8004acc:	b085      	sub	sp, #20
 8004ace:	af00      	add	r7, sp, #0
 8004ad0:	6078      	str	r0, [r7, #4]
 8004ad2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	689b      	ldr	r3, [r3, #8]
 8004ad8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004ae0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004ae2:	683a      	ldr	r2, [r7, #0]
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	f043 0307 	orr.w	r3, r3, #7
 8004aec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	68fa      	ldr	r2, [r7, #12]
 8004af2:	609a      	str	r2, [r3, #8]
}
 8004af4:	bf00      	nop
 8004af6:	3714      	adds	r7, #20
 8004af8:	46bd      	mov	sp, r7
 8004afa:	bc80      	pop	{r7}
 8004afc:	4770      	bx	lr

08004afe <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b087      	sub	sp, #28
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004b18:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004b1a:	683b      	ldr	r3, [r7, #0]
 8004b1c:	021a      	lsls	r2, r3, #8
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	431a      	orrs	r2, r3
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	4313      	orrs	r3, r2
 8004b26:	697a      	ldr	r2, [r7, #20]
 8004b28:	4313      	orrs	r3, r2
 8004b2a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	697a      	ldr	r2, [r7, #20]
 8004b30:	609a      	str	r2, [r3, #8]
}
 8004b32:	bf00      	nop
 8004b34:	371c      	adds	r7, #28
 8004b36:	46bd      	mov	sp, r7
 8004b38:	bc80      	pop	{r7}
 8004b3a:	4770      	bx	lr

08004b3c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004b3c:	b480      	push	{r7}
 8004b3e:	b085      	sub	sp, #20
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d101      	bne.n	8004b54 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004b50:	2302      	movs	r3, #2
 8004b52:	e046      	b.n	8004be2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	2201      	movs	r2, #1
 8004b58:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	2202      	movs	r2, #2
 8004b60:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	685b      	ldr	r3, [r3, #4]
 8004b6a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b7a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	68fa      	ldr	r2, [r7, #12]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	68fa      	ldr	r2, [r7, #12]
 8004b8c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b96:	d00e      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	4a13      	ldr	r2, [pc, #76]	; (8004bec <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004b9e:	4293      	cmp	r3, r2
 8004ba0:	d009      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	4a12      	ldr	r2, [pc, #72]	; (8004bf0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d004      	beq.n	8004bb6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	4a10      	ldr	r2, [pc, #64]	; (8004bf4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004bb2:	4293      	cmp	r3, r2
 8004bb4:	d10c      	bne.n	8004bd0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004bb6:	68bb      	ldr	r3, [r7, #8]
 8004bb8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004bbc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	68ba      	ldr	r2, [r7, #8]
 8004bc4:	4313      	orrs	r3, r2
 8004bc6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	68ba      	ldr	r2, [r7, #8]
 8004bce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2201      	movs	r2, #1
 8004bd4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  __HAL_UNLOCK(htim);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3714      	adds	r7, #20
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bc80      	pop	{r7}
 8004bea:	4770      	bx	lr
 8004bec:	40000400 	.word	0x40000400
 8004bf0:	40000800 	.word	0x40000800
 8004bf4:	40010800 	.word	0x40010800

08004bf8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b082      	sub	sp, #8
 8004bfc:	af00      	add	r7, sp, #0
 8004bfe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d101      	bne.n	8004c0a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	e03f      	b.n	8004c8a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2200      	movs	r2, #0
 8004c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004c1e:	6878      	ldr	r0, [r7, #4]
 8004c20:	f7fd fb0a 	bl	8002238 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	2224      	movs	r2, #36	; 0x24
 8004c28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	68da      	ldr	r2, [r3, #12]
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004c3a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004c3c:	6878      	ldr	r0, [r7, #4]
 8004c3e:	f000 f9a7 	bl	8004f90 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	691a      	ldr	r2, [r3, #16]
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004c50:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004c52:	687b      	ldr	r3, [r7, #4]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	695a      	ldr	r2, [r3, #20]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004c60:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	68da      	ldr	r2, [r3, #12]
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004c70:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	2220      	movs	r2, #32
 8004c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	2220      	movs	r2, #32
 8004c84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004c88:	2300      	movs	r3, #0
}
 8004c8a:	4618      	mov	r0, r3
 8004c8c:	3708      	adds	r7, #8
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}

08004c92 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c92:	b580      	push	{r7, lr}
 8004c94:	b08a      	sub	sp, #40	; 0x28
 8004c96:	af02      	add	r7, sp, #8
 8004c98:	60f8      	str	r0, [r7, #12]
 8004c9a:	60b9      	str	r1, [r7, #8]
 8004c9c:	603b      	str	r3, [r7, #0]
 8004c9e:	4613      	mov	r3, r2
 8004ca0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cac:	b2db      	uxtb	r3, r3
 8004cae:	2b20      	cmp	r3, #32
 8004cb0:	d17c      	bne.n	8004dac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	2b00      	cmp	r3, #0
 8004cb6:	d002      	beq.n	8004cbe <HAL_UART_Transmit+0x2c>
 8004cb8:	88fb      	ldrh	r3, [r7, #6]
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d101      	bne.n	8004cc2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004cbe:	2301      	movs	r3, #1
 8004cc0:	e075      	b.n	8004dae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004cc2:	68fb      	ldr	r3, [r7, #12]
 8004cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d101      	bne.n	8004cd0 <HAL_UART_Transmit+0x3e>
 8004ccc:	2302      	movs	r3, #2
 8004cce:	e06e      	b.n	8004dae <HAL_UART_Transmit+0x11c>
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	2201      	movs	r2, #1
 8004cd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	2200      	movs	r2, #0
 8004cdc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	2221      	movs	r2, #33	; 0x21
 8004ce2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004ce6:	f7fd fb75 	bl	80023d4 <HAL_GetTick>
 8004cea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	88fa      	ldrh	r2, [r7, #6]
 8004cf0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	88fa      	ldrh	r2, [r7, #6]
 8004cf6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004d00:	d108      	bne.n	8004d14 <HAL_UART_Transmit+0x82>
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d104      	bne.n	8004d14 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004d0e:	68bb      	ldr	r3, [r7, #8]
 8004d10:	61bb      	str	r3, [r7, #24]
 8004d12:	e003      	b.n	8004d1c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8004d14:	68bb      	ldr	r3, [r7, #8]
 8004d16:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	2200      	movs	r2, #0
 8004d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8004d24:	e02a      	b.n	8004d7c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	9300      	str	r3, [sp, #0]
 8004d2a:	697b      	ldr	r3, [r7, #20]
 8004d2c:	2200      	movs	r2, #0
 8004d2e:	2180      	movs	r1, #128	; 0x80
 8004d30:	68f8      	ldr	r0, [r7, #12]
 8004d32:	f000 f8e2 	bl	8004efa <UART_WaitOnFlagUntilTimeout>
 8004d36:	4603      	mov	r3, r0
 8004d38:	2b00      	cmp	r3, #0
 8004d3a:	d001      	beq.n	8004d40 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8004d3c:	2303      	movs	r3, #3
 8004d3e:	e036      	b.n	8004dae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8004d40:	69fb      	ldr	r3, [r7, #28]
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d10b      	bne.n	8004d5e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	881b      	ldrh	r3, [r3, #0]
 8004d4a:	461a      	mov	r2, r3
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004d54:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004d56:	69bb      	ldr	r3, [r7, #24]
 8004d58:	3302      	adds	r3, #2
 8004d5a:	61bb      	str	r3, [r7, #24]
 8004d5c:	e007      	b.n	8004d6e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004d5e:	69fb      	ldr	r3, [r7, #28]
 8004d60:	781a      	ldrb	r2, [r3, #0]
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004d68:	69fb      	ldr	r3, [r7, #28]
 8004d6a:	3301      	adds	r3, #1
 8004d6c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d72:	b29b      	uxth	r3, r3
 8004d74:	3b01      	subs	r3, #1
 8004d76:	b29a      	uxth	r2, r3
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004d80:	b29b      	uxth	r3, r3
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d1cf      	bne.n	8004d26 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	9300      	str	r3, [sp, #0]
 8004d8a:	697b      	ldr	r3, [r7, #20]
 8004d8c:	2200      	movs	r2, #0
 8004d8e:	2140      	movs	r1, #64	; 0x40
 8004d90:	68f8      	ldr	r0, [r7, #12]
 8004d92:	f000 f8b2 	bl	8004efa <UART_WaitOnFlagUntilTimeout>
 8004d96:	4603      	mov	r3, r0
 8004d98:	2b00      	cmp	r3, #0
 8004d9a:	d001      	beq.n	8004da0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8004d9c:	2303      	movs	r3, #3
 8004d9e:	e006      	b.n	8004dae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2220      	movs	r2, #32
 8004da4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8004da8:	2300      	movs	r3, #0
 8004daa:	e000      	b.n	8004dae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8004dac:	2302      	movs	r3, #2
  }
}
 8004dae:	4618      	mov	r0, r3
 8004db0:	3720      	adds	r7, #32
 8004db2:	46bd      	mov	sp, r7
 8004db4:	bd80      	pop	{r7, pc}

08004db6 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004db6:	b580      	push	{r7, lr}
 8004db8:	b08a      	sub	sp, #40	; 0x28
 8004dba:	af02      	add	r7, sp, #8
 8004dbc:	60f8      	str	r0, [r7, #12]
 8004dbe:	60b9      	str	r1, [r7, #8]
 8004dc0:	603b      	str	r3, [r7, #0]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004dd0:	b2db      	uxtb	r3, r3
 8004dd2:	2b20      	cmp	r3, #32
 8004dd4:	f040 808c 	bne.w	8004ef0 <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8004dd8:	68bb      	ldr	r3, [r7, #8]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d002      	beq.n	8004de4 <HAL_UART_Receive+0x2e>
 8004dde:	88fb      	ldrh	r3, [r7, #6]
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d101      	bne.n	8004de8 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8004de4:	2301      	movs	r3, #1
 8004de6:	e084      	b.n	8004ef2 <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d101      	bne.n	8004df6 <HAL_UART_Receive+0x40>
 8004df2:	2302      	movs	r3, #2
 8004df4:	e07d      	b.n	8004ef2 <HAL_UART_Receive+0x13c>
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2201      	movs	r2, #1
 8004dfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	2200      	movs	r2, #0
 8004e02:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	2222      	movs	r2, #34	; 0x22
 8004e08:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	2200      	movs	r2, #0
 8004e10:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004e12:	f7fd fadf 	bl	80023d4 <HAL_GetTick>
 8004e16:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	88fa      	ldrh	r2, [r7, #6]
 8004e1c:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	88fa      	ldrh	r2, [r7, #6]
 8004e22:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e2c:	d108      	bne.n	8004e40 <HAL_UART_Receive+0x8a>
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	691b      	ldr	r3, [r3, #16]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d104      	bne.n	8004e40 <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004e3a:	68bb      	ldr	r3, [r7, #8]
 8004e3c:	61bb      	str	r3, [r7, #24]
 8004e3e:	e003      	b.n	8004e48 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 8004e40:	68bb      	ldr	r3, [r7, #8]
 8004e42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004e44:	2300      	movs	r3, #0
 8004e46:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	2200      	movs	r2, #0
 8004e4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8004e50:	e043      	b.n	8004eda <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	9300      	str	r3, [sp, #0]
 8004e56:	697b      	ldr	r3, [r7, #20]
 8004e58:	2200      	movs	r2, #0
 8004e5a:	2120      	movs	r1, #32
 8004e5c:	68f8      	ldr	r0, [r7, #12]
 8004e5e:	f000 f84c 	bl	8004efa <UART_WaitOnFlagUntilTimeout>
 8004e62:	4603      	mov	r3, r0
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d001      	beq.n	8004e6c <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004e68:	2303      	movs	r3, #3
 8004e6a:	e042      	b.n	8004ef2 <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10c      	bne.n	8004e8c <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	685b      	ldr	r3, [r3, #4]
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004e7e:	b29a      	uxth	r2, r3
 8004e80:	69bb      	ldr	r3, [r7, #24]
 8004e82:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004e84:	69bb      	ldr	r3, [r7, #24]
 8004e86:	3302      	adds	r3, #2
 8004e88:	61bb      	str	r3, [r7, #24]
 8004e8a:	e01f      	b.n	8004ecc <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	689b      	ldr	r3, [r3, #8]
 8004e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e94:	d007      	beq.n	8004ea6 <HAL_UART_Receive+0xf0>
 8004e96:	68fb      	ldr	r3, [r7, #12]
 8004e98:	689b      	ldr	r3, [r3, #8]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10a      	bne.n	8004eb4 <HAL_UART_Receive+0xfe>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	691b      	ldr	r3, [r3, #16]
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d106      	bne.n	8004eb4 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	685b      	ldr	r3, [r3, #4]
 8004eac:	b2da      	uxtb	r2, r3
 8004eae:	69fb      	ldr	r3, [r7, #28]
 8004eb0:	701a      	strb	r2, [r3, #0]
 8004eb2:	e008      	b.n	8004ec6 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	685b      	ldr	r3, [r3, #4]
 8004eba:	b2db      	uxtb	r3, r3
 8004ebc:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004ec0:	b2da      	uxtb	r2, r3
 8004ec2:	69fb      	ldr	r3, [r7, #28]
 8004ec4:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8004ec6:	69fb      	ldr	r3, [r7, #28]
 8004ec8:	3301      	adds	r3, #1
 8004eca:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004ede:	b29b      	uxth	r3, r3
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d1b6      	bne.n	8004e52 <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2220      	movs	r2, #32
 8004ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 8004eec:	2300      	movs	r3, #0
 8004eee:	e000      	b.n	8004ef2 <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 8004ef0:	2302      	movs	r3, #2
  }
}
 8004ef2:	4618      	mov	r0, r3
 8004ef4:	3720      	adds	r7, #32
 8004ef6:	46bd      	mov	sp, r7
 8004ef8:	bd80      	pop	{r7, pc}

08004efa <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 8004efa:	b580      	push	{r7, lr}
 8004efc:	b084      	sub	sp, #16
 8004efe:	af00      	add	r7, sp, #0
 8004f00:	60f8      	str	r0, [r7, #12]
 8004f02:	60b9      	str	r1, [r7, #8]
 8004f04:	603b      	str	r3, [r7, #0]
 8004f06:	4613      	mov	r3, r2
 8004f08:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f0a:	e02c      	b.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f0c:	69bb      	ldr	r3, [r7, #24]
 8004f0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f12:	d028      	beq.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8004f14:	69bb      	ldr	r3, [r7, #24]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d007      	beq.n	8004f2a <UART_WaitOnFlagUntilTimeout+0x30>
 8004f1a:	f7fd fa5b 	bl	80023d4 <HAL_GetTick>
 8004f1e:	4602      	mov	r2, r0
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	1ad3      	subs	r3, r2, r3
 8004f24:	69ba      	ldr	r2, [r7, #24]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d21d      	bcs.n	8004f66 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	68da      	ldr	r2, [r3, #12]
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004f38:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004f3a:	68fb      	ldr	r3, [r7, #12]
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	695a      	ldr	r2, [r3, #20]
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f022 0201 	bic.w	r2, r2, #1
 8004f48:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	2220      	movs	r2, #32
 8004f4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	2220      	movs	r2, #32
 8004f56:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004f5a:	68fb      	ldr	r3, [r7, #12]
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8004f62:	2303      	movs	r3, #3
 8004f64:	e00f      	b.n	8004f86 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	4013      	ands	r3, r2
 8004f70:	68ba      	ldr	r2, [r7, #8]
 8004f72:	429a      	cmp	r2, r3
 8004f74:	bf0c      	ite	eq
 8004f76:	2301      	moveq	r3, #1
 8004f78:	2300      	movne	r3, #0
 8004f7a:	b2db      	uxtb	r3, r3
 8004f7c:	461a      	mov	r2, r3
 8004f7e:	79fb      	ldrb	r3, [r7, #7]
 8004f80:	429a      	cmp	r2, r3
 8004f82:	d0c3      	beq.n	8004f0c <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3710      	adds	r7, #16
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bd80      	pop	{r7, pc}
	...

08004f90 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004f90:	b580      	push	{r7, lr}
 8004f92:	b084      	sub	sp, #16
 8004f94:	af00      	add	r7, sp, #0
 8004f96:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	691b      	ldr	r3, [r3, #16]
 8004f9e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	68da      	ldr	r2, [r3, #12]
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	430a      	orrs	r2, r1
 8004fac:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	689a      	ldr	r2, [r3, #8]
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	691b      	ldr	r3, [r3, #16]
 8004fb6:	431a      	orrs	r2, r3
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	695b      	ldr	r3, [r3, #20]
 8004fbc:	431a      	orrs	r2, r3
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	69db      	ldr	r3, [r3, #28]
 8004fc2:	4313      	orrs	r3, r2
 8004fc4:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68db      	ldr	r3, [r3, #12]
 8004fcc:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 8004fd0:	f023 030c 	bic.w	r3, r3, #12
 8004fd4:	687a      	ldr	r2, [r7, #4]
 8004fd6:	6812      	ldr	r2, [r2, #0]
 8004fd8:	68b9      	ldr	r1, [r7, #8]
 8004fda:	430b      	orrs	r3, r1
 8004fdc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	695b      	ldr	r3, [r3, #20]
 8004fe4:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	699a      	ldr	r2, [r3, #24]
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	430a      	orrs	r2, r1
 8004ff2:	615a      	str	r2, [r3, #20]


  if((huart->Instance == USART1))
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	4a55      	ldr	r2, [pc, #340]	; (8005150 <UART_SetConfig+0x1c0>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d103      	bne.n	8005006 <UART_SetConfig+0x76>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8004ffe:	f7fe fe6b 	bl	8003cd8 <HAL_RCC_GetPCLK2Freq>
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	e002      	b.n	800500c <UART_SetConfig+0x7c>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005006:	f7fe fe53 	bl	8003cb0 <HAL_RCC_GetPCLK1Freq>
 800500a:	60f8      	str	r0, [r7, #12]
  }

  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	69db      	ldr	r3, [r3, #28]
 8005010:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005014:	d14c      	bne.n	80050b0 <UART_SetConfig+0x120>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	4613      	mov	r3, r2
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	4413      	add	r3, r2
 800501e:	009a      	lsls	r2, r3, #2
 8005020:	441a      	add	r2, r3
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	685b      	ldr	r3, [r3, #4]
 8005026:	005b      	lsls	r3, r3, #1
 8005028:	fbb2 f3f3 	udiv	r3, r2, r3
 800502c:	4a49      	ldr	r2, [pc, #292]	; (8005154 <UART_SetConfig+0x1c4>)
 800502e:	fba2 2303 	umull	r2, r3, r2, r3
 8005032:	095b      	lsrs	r3, r3, #5
 8005034:	0119      	lsls	r1, r3, #4
 8005036:	68fa      	ldr	r2, [r7, #12]
 8005038:	4613      	mov	r3, r2
 800503a:	009b      	lsls	r3, r3, #2
 800503c:	4413      	add	r3, r2
 800503e:	009a      	lsls	r2, r3, #2
 8005040:	441a      	add	r2, r3
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	685b      	ldr	r3, [r3, #4]
 8005046:	005b      	lsls	r3, r3, #1
 8005048:	fbb2 f2f3 	udiv	r2, r2, r3
 800504c:	4b41      	ldr	r3, [pc, #260]	; (8005154 <UART_SetConfig+0x1c4>)
 800504e:	fba3 0302 	umull	r0, r3, r3, r2
 8005052:	095b      	lsrs	r3, r3, #5
 8005054:	2064      	movs	r0, #100	; 0x64
 8005056:	fb00 f303 	mul.w	r3, r0, r3
 800505a:	1ad3      	subs	r3, r2, r3
 800505c:	00db      	lsls	r3, r3, #3
 800505e:	3332      	adds	r3, #50	; 0x32
 8005060:	4a3c      	ldr	r2, [pc, #240]	; (8005154 <UART_SetConfig+0x1c4>)
 8005062:	fba2 2303 	umull	r2, r3, r2, r3
 8005066:	095b      	lsrs	r3, r3, #5
 8005068:	005b      	lsls	r3, r3, #1
 800506a:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800506e:	4419      	add	r1, r3
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	4613      	mov	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	4413      	add	r3, r2
 8005078:	009a      	lsls	r2, r3, #2
 800507a:	441a      	add	r2, r3
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	685b      	ldr	r3, [r3, #4]
 8005080:	005b      	lsls	r3, r3, #1
 8005082:	fbb2 f2f3 	udiv	r2, r2, r3
 8005086:	4b33      	ldr	r3, [pc, #204]	; (8005154 <UART_SetConfig+0x1c4>)
 8005088:	fba3 0302 	umull	r0, r3, r3, r2
 800508c:	095b      	lsrs	r3, r3, #5
 800508e:	2064      	movs	r0, #100	; 0x64
 8005090:	fb00 f303 	mul.w	r3, r0, r3
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	3332      	adds	r3, #50	; 0x32
 800509a:	4a2e      	ldr	r2, [pc, #184]	; (8005154 <UART_SetConfig+0x1c4>)
 800509c:	fba2 2303 	umull	r2, r3, r2, r3
 80050a0:	095b      	lsrs	r3, r3, #5
 80050a2:	f003 0207 	and.w	r2, r3, #7
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	440a      	add	r2, r1
 80050ac:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80050ae:	e04a      	b.n	8005146 <UART_SetConfig+0x1b6>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050b0:	68fa      	ldr	r2, [r7, #12]
 80050b2:	4613      	mov	r3, r2
 80050b4:	009b      	lsls	r3, r3, #2
 80050b6:	4413      	add	r3, r2
 80050b8:	009a      	lsls	r2, r3, #2
 80050ba:	441a      	add	r2, r3
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	685b      	ldr	r3, [r3, #4]
 80050c0:	009b      	lsls	r3, r3, #2
 80050c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80050c6:	4a23      	ldr	r2, [pc, #140]	; (8005154 <UART_SetConfig+0x1c4>)
 80050c8:	fba2 2303 	umull	r2, r3, r2, r3
 80050cc:	095b      	lsrs	r3, r3, #5
 80050ce:	0119      	lsls	r1, r3, #4
 80050d0:	68fa      	ldr	r2, [r7, #12]
 80050d2:	4613      	mov	r3, r2
 80050d4:	009b      	lsls	r3, r3, #2
 80050d6:	4413      	add	r3, r2
 80050d8:	009a      	lsls	r2, r3, #2
 80050da:	441a      	add	r2, r3
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	685b      	ldr	r3, [r3, #4]
 80050e0:	009b      	lsls	r3, r3, #2
 80050e2:	fbb2 f2f3 	udiv	r2, r2, r3
 80050e6:	4b1b      	ldr	r3, [pc, #108]	; (8005154 <UART_SetConfig+0x1c4>)
 80050e8:	fba3 0302 	umull	r0, r3, r3, r2
 80050ec:	095b      	lsrs	r3, r3, #5
 80050ee:	2064      	movs	r0, #100	; 0x64
 80050f0:	fb00 f303 	mul.w	r3, r0, r3
 80050f4:	1ad3      	subs	r3, r2, r3
 80050f6:	011b      	lsls	r3, r3, #4
 80050f8:	3332      	adds	r3, #50	; 0x32
 80050fa:	4a16      	ldr	r2, [pc, #88]	; (8005154 <UART_SetConfig+0x1c4>)
 80050fc:	fba2 2303 	umull	r2, r3, r2, r3
 8005100:	095b      	lsrs	r3, r3, #5
 8005102:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005106:	4419      	add	r1, r3
 8005108:	68fa      	ldr	r2, [r7, #12]
 800510a:	4613      	mov	r3, r2
 800510c:	009b      	lsls	r3, r3, #2
 800510e:	4413      	add	r3, r2
 8005110:	009a      	lsls	r2, r3, #2
 8005112:	441a      	add	r2, r3
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	685b      	ldr	r3, [r3, #4]
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	fbb2 f2f3 	udiv	r2, r2, r3
 800511e:	4b0d      	ldr	r3, [pc, #52]	; (8005154 <UART_SetConfig+0x1c4>)
 8005120:	fba3 0302 	umull	r0, r3, r3, r2
 8005124:	095b      	lsrs	r3, r3, #5
 8005126:	2064      	movs	r0, #100	; 0x64
 8005128:	fb00 f303 	mul.w	r3, r0, r3
 800512c:	1ad3      	subs	r3, r2, r3
 800512e:	011b      	lsls	r3, r3, #4
 8005130:	3332      	adds	r3, #50	; 0x32
 8005132:	4a08      	ldr	r2, [pc, #32]	; (8005154 <UART_SetConfig+0x1c4>)
 8005134:	fba2 2303 	umull	r2, r3, r2, r3
 8005138:	095b      	lsrs	r3, r3, #5
 800513a:	f003 020f 	and.w	r2, r3, #15
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	440a      	add	r2, r1
 8005144:	609a      	str	r2, [r3, #8]
}
 8005146:	bf00      	nop
 8005148:	3710      	adds	r7, #16
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	40013800 	.word	0x40013800
 8005154:	51eb851f 	.word	0x51eb851f

08005158 <__errno>:
 8005158:	4b01      	ldr	r3, [pc, #4]	; (8005160 <__errno+0x8>)
 800515a:	6818      	ldr	r0, [r3, #0]
 800515c:	4770      	bx	lr
 800515e:	bf00      	nop
 8005160:	2000000c 	.word	0x2000000c

08005164 <__libc_init_array>:
 8005164:	b570      	push	{r4, r5, r6, lr}
 8005166:	2600      	movs	r6, #0
 8005168:	4d0c      	ldr	r5, [pc, #48]	; (800519c <__libc_init_array+0x38>)
 800516a:	4c0d      	ldr	r4, [pc, #52]	; (80051a0 <__libc_init_array+0x3c>)
 800516c:	1b64      	subs	r4, r4, r5
 800516e:	10a4      	asrs	r4, r4, #2
 8005170:	42a6      	cmp	r6, r4
 8005172:	d109      	bne.n	8005188 <__libc_init_array+0x24>
 8005174:	f002 fde8 	bl	8007d48 <_init>
 8005178:	2600      	movs	r6, #0
 800517a:	4d0a      	ldr	r5, [pc, #40]	; (80051a4 <__libc_init_array+0x40>)
 800517c:	4c0a      	ldr	r4, [pc, #40]	; (80051a8 <__libc_init_array+0x44>)
 800517e:	1b64      	subs	r4, r4, r5
 8005180:	10a4      	asrs	r4, r4, #2
 8005182:	42a6      	cmp	r6, r4
 8005184:	d105      	bne.n	8005192 <__libc_init_array+0x2e>
 8005186:	bd70      	pop	{r4, r5, r6, pc}
 8005188:	f855 3b04 	ldr.w	r3, [r5], #4
 800518c:	4798      	blx	r3
 800518e:	3601      	adds	r6, #1
 8005190:	e7ee      	b.n	8005170 <__libc_init_array+0xc>
 8005192:	f855 3b04 	ldr.w	r3, [r5], #4
 8005196:	4798      	blx	r3
 8005198:	3601      	adds	r6, #1
 800519a:	e7f2      	b.n	8005182 <__libc_init_array+0x1e>
 800519c:	08008174 	.word	0x08008174
 80051a0:	08008174 	.word	0x08008174
 80051a4:	08008174 	.word	0x08008174
 80051a8:	08008178 	.word	0x08008178

080051ac <memset>:
 80051ac:	4603      	mov	r3, r0
 80051ae:	4402      	add	r2, r0
 80051b0:	4293      	cmp	r3, r2
 80051b2:	d100      	bne.n	80051b6 <memset+0xa>
 80051b4:	4770      	bx	lr
 80051b6:	f803 1b01 	strb.w	r1, [r3], #1
 80051ba:	e7f9      	b.n	80051b0 <memset+0x4>

080051bc <__cvt>:
 80051bc:	2b00      	cmp	r3, #0
 80051be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80051c2:	461f      	mov	r7, r3
 80051c4:	bfbb      	ittet	lt
 80051c6:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 80051ca:	461f      	movlt	r7, r3
 80051cc:	2300      	movge	r3, #0
 80051ce:	232d      	movlt	r3, #45	; 0x2d
 80051d0:	b088      	sub	sp, #32
 80051d2:	4614      	mov	r4, r2
 80051d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80051d6:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80051d8:	7013      	strb	r3, [r2, #0]
 80051da:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80051dc:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 80051e0:	f023 0820 	bic.w	r8, r3, #32
 80051e4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80051e8:	d005      	beq.n	80051f6 <__cvt+0x3a>
 80051ea:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80051ee:	d100      	bne.n	80051f2 <__cvt+0x36>
 80051f0:	3501      	adds	r5, #1
 80051f2:	2302      	movs	r3, #2
 80051f4:	e000      	b.n	80051f8 <__cvt+0x3c>
 80051f6:	2303      	movs	r3, #3
 80051f8:	aa07      	add	r2, sp, #28
 80051fa:	9204      	str	r2, [sp, #16]
 80051fc:	aa06      	add	r2, sp, #24
 80051fe:	e9cd a202 	strd	sl, r2, [sp, #8]
 8005202:	e9cd 3500 	strd	r3, r5, [sp]
 8005206:	4622      	mov	r2, r4
 8005208:	463b      	mov	r3, r7
 800520a:	f000 fda5 	bl	8005d58 <_dtoa_r>
 800520e:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8005212:	4606      	mov	r6, r0
 8005214:	d102      	bne.n	800521c <__cvt+0x60>
 8005216:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8005218:	07db      	lsls	r3, r3, #31
 800521a:	d522      	bpl.n	8005262 <__cvt+0xa6>
 800521c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8005220:	eb06 0905 	add.w	r9, r6, r5
 8005224:	d110      	bne.n	8005248 <__cvt+0x8c>
 8005226:	7833      	ldrb	r3, [r6, #0]
 8005228:	2b30      	cmp	r3, #48	; 0x30
 800522a:	d10a      	bne.n	8005242 <__cvt+0x86>
 800522c:	2200      	movs	r2, #0
 800522e:	2300      	movs	r3, #0
 8005230:	4620      	mov	r0, r4
 8005232:	4639      	mov	r1, r7
 8005234:	f7fb fbd0 	bl	80009d8 <__aeabi_dcmpeq>
 8005238:	b918      	cbnz	r0, 8005242 <__cvt+0x86>
 800523a:	f1c5 0501 	rsb	r5, r5, #1
 800523e:	f8ca 5000 	str.w	r5, [sl]
 8005242:	f8da 3000 	ldr.w	r3, [sl]
 8005246:	4499      	add	r9, r3
 8005248:	2200      	movs	r2, #0
 800524a:	2300      	movs	r3, #0
 800524c:	4620      	mov	r0, r4
 800524e:	4639      	mov	r1, r7
 8005250:	f7fb fbc2 	bl	80009d8 <__aeabi_dcmpeq>
 8005254:	b108      	cbz	r0, 800525a <__cvt+0x9e>
 8005256:	f8cd 901c 	str.w	r9, [sp, #28]
 800525a:	2230      	movs	r2, #48	; 0x30
 800525c:	9b07      	ldr	r3, [sp, #28]
 800525e:	454b      	cmp	r3, r9
 8005260:	d307      	bcc.n	8005272 <__cvt+0xb6>
 8005262:	4630      	mov	r0, r6
 8005264:	9b07      	ldr	r3, [sp, #28]
 8005266:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8005268:	1b9b      	subs	r3, r3, r6
 800526a:	6013      	str	r3, [r2, #0]
 800526c:	b008      	add	sp, #32
 800526e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005272:	1c59      	adds	r1, r3, #1
 8005274:	9107      	str	r1, [sp, #28]
 8005276:	701a      	strb	r2, [r3, #0]
 8005278:	e7f0      	b.n	800525c <__cvt+0xa0>

0800527a <__exponent>:
 800527a:	4603      	mov	r3, r0
 800527c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800527e:	2900      	cmp	r1, #0
 8005280:	f803 2b02 	strb.w	r2, [r3], #2
 8005284:	bfb6      	itet	lt
 8005286:	222d      	movlt	r2, #45	; 0x2d
 8005288:	222b      	movge	r2, #43	; 0x2b
 800528a:	4249      	neglt	r1, r1
 800528c:	2909      	cmp	r1, #9
 800528e:	7042      	strb	r2, [r0, #1]
 8005290:	dd2b      	ble.n	80052ea <__exponent+0x70>
 8005292:	f10d 0407 	add.w	r4, sp, #7
 8005296:	46a4      	mov	ip, r4
 8005298:	270a      	movs	r7, #10
 800529a:	fb91 f6f7 	sdiv	r6, r1, r7
 800529e:	460a      	mov	r2, r1
 80052a0:	46a6      	mov	lr, r4
 80052a2:	fb07 1516 	mls	r5, r7, r6, r1
 80052a6:	2a63      	cmp	r2, #99	; 0x63
 80052a8:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80052ac:	4631      	mov	r1, r6
 80052ae:	f104 34ff 	add.w	r4, r4, #4294967295
 80052b2:	f80e 5c01 	strb.w	r5, [lr, #-1]
 80052b6:	dcf0      	bgt.n	800529a <__exponent+0x20>
 80052b8:	3130      	adds	r1, #48	; 0x30
 80052ba:	f1ae 0502 	sub.w	r5, lr, #2
 80052be:	f804 1c01 	strb.w	r1, [r4, #-1]
 80052c2:	4629      	mov	r1, r5
 80052c4:	1c44      	adds	r4, r0, #1
 80052c6:	4561      	cmp	r1, ip
 80052c8:	d30a      	bcc.n	80052e0 <__exponent+0x66>
 80052ca:	f10d 0209 	add.w	r2, sp, #9
 80052ce:	eba2 020e 	sub.w	r2, r2, lr
 80052d2:	4565      	cmp	r5, ip
 80052d4:	bf88      	it	hi
 80052d6:	2200      	movhi	r2, #0
 80052d8:	4413      	add	r3, r2
 80052da:	1a18      	subs	r0, r3, r0
 80052dc:	b003      	add	sp, #12
 80052de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80052e0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80052e4:	f804 2f01 	strb.w	r2, [r4, #1]!
 80052e8:	e7ed      	b.n	80052c6 <__exponent+0x4c>
 80052ea:	2330      	movs	r3, #48	; 0x30
 80052ec:	3130      	adds	r1, #48	; 0x30
 80052ee:	7083      	strb	r3, [r0, #2]
 80052f0:	70c1      	strb	r1, [r0, #3]
 80052f2:	1d03      	adds	r3, r0, #4
 80052f4:	e7f1      	b.n	80052da <__exponent+0x60>
	...

080052f8 <_printf_float>:
 80052f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052fc:	b091      	sub	sp, #68	; 0x44
 80052fe:	460c      	mov	r4, r1
 8005300:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8005304:	4616      	mov	r6, r2
 8005306:	461f      	mov	r7, r3
 8005308:	4605      	mov	r5, r0
 800530a:	f001 fccb 	bl	8006ca4 <_localeconv_r>
 800530e:	6803      	ldr	r3, [r0, #0]
 8005310:	4618      	mov	r0, r3
 8005312:	9309      	str	r3, [sp, #36]	; 0x24
 8005314:	f7fa ff34 	bl	8000180 <strlen>
 8005318:	2300      	movs	r3, #0
 800531a:	930e      	str	r3, [sp, #56]	; 0x38
 800531c:	f8d8 3000 	ldr.w	r3, [r8]
 8005320:	900a      	str	r0, [sp, #40]	; 0x28
 8005322:	3307      	adds	r3, #7
 8005324:	f023 0307 	bic.w	r3, r3, #7
 8005328:	f103 0208 	add.w	r2, r3, #8
 800532c:	f894 9018 	ldrb.w	r9, [r4, #24]
 8005330:	f8d4 b000 	ldr.w	fp, [r4]
 8005334:	f8c8 2000 	str.w	r2, [r8]
 8005338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533c:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8005340:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8005344:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8005348:	930b      	str	r3, [sp, #44]	; 0x2c
 800534a:	f04f 32ff 	mov.w	r2, #4294967295
 800534e:	4640      	mov	r0, r8
 8005350:	4b9c      	ldr	r3, [pc, #624]	; (80055c4 <_printf_float+0x2cc>)
 8005352:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005354:	f7fb fb72 	bl	8000a3c <__aeabi_dcmpun>
 8005358:	bb70      	cbnz	r0, 80053b8 <_printf_float+0xc0>
 800535a:	f04f 32ff 	mov.w	r2, #4294967295
 800535e:	4640      	mov	r0, r8
 8005360:	4b98      	ldr	r3, [pc, #608]	; (80055c4 <_printf_float+0x2cc>)
 8005362:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005364:	f7fb fb4c 	bl	8000a00 <__aeabi_dcmple>
 8005368:	bb30      	cbnz	r0, 80053b8 <_printf_float+0xc0>
 800536a:	2200      	movs	r2, #0
 800536c:	2300      	movs	r3, #0
 800536e:	4640      	mov	r0, r8
 8005370:	4651      	mov	r1, sl
 8005372:	f7fb fb3b 	bl	80009ec <__aeabi_dcmplt>
 8005376:	b110      	cbz	r0, 800537e <_printf_float+0x86>
 8005378:	232d      	movs	r3, #45	; 0x2d
 800537a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800537e:	4b92      	ldr	r3, [pc, #584]	; (80055c8 <_printf_float+0x2d0>)
 8005380:	4892      	ldr	r0, [pc, #584]	; (80055cc <_printf_float+0x2d4>)
 8005382:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 8005386:	bf94      	ite	ls
 8005388:	4698      	movls	r8, r3
 800538a:	4680      	movhi	r8, r0
 800538c:	2303      	movs	r3, #3
 800538e:	f04f 0a00 	mov.w	sl, #0
 8005392:	6123      	str	r3, [r4, #16]
 8005394:	f02b 0304 	bic.w	r3, fp, #4
 8005398:	6023      	str	r3, [r4, #0]
 800539a:	4633      	mov	r3, r6
 800539c:	4621      	mov	r1, r4
 800539e:	4628      	mov	r0, r5
 80053a0:	9700      	str	r7, [sp, #0]
 80053a2:	aa0f      	add	r2, sp, #60	; 0x3c
 80053a4:	f000 f9d4 	bl	8005750 <_printf_common>
 80053a8:	3001      	adds	r0, #1
 80053aa:	f040 8090 	bne.w	80054ce <_printf_float+0x1d6>
 80053ae:	f04f 30ff 	mov.w	r0, #4294967295
 80053b2:	b011      	add	sp, #68	; 0x44
 80053b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053b8:	4642      	mov	r2, r8
 80053ba:	4653      	mov	r3, sl
 80053bc:	4640      	mov	r0, r8
 80053be:	4651      	mov	r1, sl
 80053c0:	f7fb fb3c 	bl	8000a3c <__aeabi_dcmpun>
 80053c4:	b148      	cbz	r0, 80053da <_printf_float+0xe2>
 80053c6:	f1ba 0f00 	cmp.w	sl, #0
 80053ca:	bfb8      	it	lt
 80053cc:	232d      	movlt	r3, #45	; 0x2d
 80053ce:	4880      	ldr	r0, [pc, #512]	; (80055d0 <_printf_float+0x2d8>)
 80053d0:	bfb8      	it	lt
 80053d2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80053d6:	4b7f      	ldr	r3, [pc, #508]	; (80055d4 <_printf_float+0x2dc>)
 80053d8:	e7d3      	b.n	8005382 <_printf_float+0x8a>
 80053da:	6863      	ldr	r3, [r4, #4]
 80053dc:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 80053e0:	1c5a      	adds	r2, r3, #1
 80053e2:	d142      	bne.n	800546a <_printf_float+0x172>
 80053e4:	2306      	movs	r3, #6
 80053e6:	6063      	str	r3, [r4, #4]
 80053e8:	2200      	movs	r2, #0
 80053ea:	9206      	str	r2, [sp, #24]
 80053ec:	aa0e      	add	r2, sp, #56	; 0x38
 80053ee:	e9cd 9204 	strd	r9, r2, [sp, #16]
 80053f2:	aa0d      	add	r2, sp, #52	; 0x34
 80053f4:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 80053f8:	9203      	str	r2, [sp, #12]
 80053fa:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 80053fe:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8005402:	6023      	str	r3, [r4, #0]
 8005404:	6863      	ldr	r3, [r4, #4]
 8005406:	4642      	mov	r2, r8
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	4628      	mov	r0, r5
 800540c:	4653      	mov	r3, sl
 800540e:	910b      	str	r1, [sp, #44]	; 0x2c
 8005410:	f7ff fed4 	bl	80051bc <__cvt>
 8005414:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005416:	4680      	mov	r8, r0
 8005418:	2947      	cmp	r1, #71	; 0x47
 800541a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800541c:	d108      	bne.n	8005430 <_printf_float+0x138>
 800541e:	1cc8      	adds	r0, r1, #3
 8005420:	db02      	blt.n	8005428 <_printf_float+0x130>
 8005422:	6863      	ldr	r3, [r4, #4]
 8005424:	4299      	cmp	r1, r3
 8005426:	dd40      	ble.n	80054aa <_printf_float+0x1b2>
 8005428:	f1a9 0902 	sub.w	r9, r9, #2
 800542c:	fa5f f989 	uxtb.w	r9, r9
 8005430:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8005434:	d81f      	bhi.n	8005476 <_printf_float+0x17e>
 8005436:	464a      	mov	r2, r9
 8005438:	3901      	subs	r1, #1
 800543a:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800543e:	910d      	str	r1, [sp, #52]	; 0x34
 8005440:	f7ff ff1b 	bl	800527a <__exponent>
 8005444:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005446:	4682      	mov	sl, r0
 8005448:	1813      	adds	r3, r2, r0
 800544a:	2a01      	cmp	r2, #1
 800544c:	6123      	str	r3, [r4, #16]
 800544e:	dc02      	bgt.n	8005456 <_printf_float+0x15e>
 8005450:	6822      	ldr	r2, [r4, #0]
 8005452:	07d2      	lsls	r2, r2, #31
 8005454:	d501      	bpl.n	800545a <_printf_float+0x162>
 8005456:	3301      	adds	r3, #1
 8005458:	6123      	str	r3, [r4, #16]
 800545a:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 800545e:	2b00      	cmp	r3, #0
 8005460:	d09b      	beq.n	800539a <_printf_float+0xa2>
 8005462:	232d      	movs	r3, #45	; 0x2d
 8005464:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005468:	e797      	b.n	800539a <_printf_float+0xa2>
 800546a:	2947      	cmp	r1, #71	; 0x47
 800546c:	d1bc      	bne.n	80053e8 <_printf_float+0xf0>
 800546e:	2b00      	cmp	r3, #0
 8005470:	d1ba      	bne.n	80053e8 <_printf_float+0xf0>
 8005472:	2301      	movs	r3, #1
 8005474:	e7b7      	b.n	80053e6 <_printf_float+0xee>
 8005476:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 800547a:	d118      	bne.n	80054ae <_printf_float+0x1b6>
 800547c:	2900      	cmp	r1, #0
 800547e:	6863      	ldr	r3, [r4, #4]
 8005480:	dd0b      	ble.n	800549a <_printf_float+0x1a2>
 8005482:	6121      	str	r1, [r4, #16]
 8005484:	b913      	cbnz	r3, 800548c <_printf_float+0x194>
 8005486:	6822      	ldr	r2, [r4, #0]
 8005488:	07d0      	lsls	r0, r2, #31
 800548a:	d502      	bpl.n	8005492 <_printf_float+0x19a>
 800548c:	3301      	adds	r3, #1
 800548e:	440b      	add	r3, r1
 8005490:	6123      	str	r3, [r4, #16]
 8005492:	f04f 0a00 	mov.w	sl, #0
 8005496:	65a1      	str	r1, [r4, #88]	; 0x58
 8005498:	e7df      	b.n	800545a <_printf_float+0x162>
 800549a:	b913      	cbnz	r3, 80054a2 <_printf_float+0x1aa>
 800549c:	6822      	ldr	r2, [r4, #0]
 800549e:	07d2      	lsls	r2, r2, #31
 80054a0:	d501      	bpl.n	80054a6 <_printf_float+0x1ae>
 80054a2:	3302      	adds	r3, #2
 80054a4:	e7f4      	b.n	8005490 <_printf_float+0x198>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e7f2      	b.n	8005490 <_printf_float+0x198>
 80054aa:	f04f 0967 	mov.w	r9, #103	; 0x67
 80054ae:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80054b0:	4299      	cmp	r1, r3
 80054b2:	db05      	blt.n	80054c0 <_printf_float+0x1c8>
 80054b4:	6823      	ldr	r3, [r4, #0]
 80054b6:	6121      	str	r1, [r4, #16]
 80054b8:	07d8      	lsls	r0, r3, #31
 80054ba:	d5ea      	bpl.n	8005492 <_printf_float+0x19a>
 80054bc:	1c4b      	adds	r3, r1, #1
 80054be:	e7e7      	b.n	8005490 <_printf_float+0x198>
 80054c0:	2900      	cmp	r1, #0
 80054c2:	bfcc      	ite	gt
 80054c4:	2201      	movgt	r2, #1
 80054c6:	f1c1 0202 	rsble	r2, r1, #2
 80054ca:	4413      	add	r3, r2
 80054cc:	e7e0      	b.n	8005490 <_printf_float+0x198>
 80054ce:	6823      	ldr	r3, [r4, #0]
 80054d0:	055a      	lsls	r2, r3, #21
 80054d2:	d407      	bmi.n	80054e4 <_printf_float+0x1ec>
 80054d4:	6923      	ldr	r3, [r4, #16]
 80054d6:	4642      	mov	r2, r8
 80054d8:	4631      	mov	r1, r6
 80054da:	4628      	mov	r0, r5
 80054dc:	47b8      	blx	r7
 80054de:	3001      	adds	r0, #1
 80054e0:	d12b      	bne.n	800553a <_printf_float+0x242>
 80054e2:	e764      	b.n	80053ae <_printf_float+0xb6>
 80054e4:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80054e8:	f240 80dd 	bls.w	80056a6 <_printf_float+0x3ae>
 80054ec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80054f0:	2200      	movs	r2, #0
 80054f2:	2300      	movs	r3, #0
 80054f4:	f7fb fa70 	bl	80009d8 <__aeabi_dcmpeq>
 80054f8:	2800      	cmp	r0, #0
 80054fa:	d033      	beq.n	8005564 <_printf_float+0x26c>
 80054fc:	2301      	movs	r3, #1
 80054fe:	4631      	mov	r1, r6
 8005500:	4628      	mov	r0, r5
 8005502:	4a35      	ldr	r2, [pc, #212]	; (80055d8 <_printf_float+0x2e0>)
 8005504:	47b8      	blx	r7
 8005506:	3001      	adds	r0, #1
 8005508:	f43f af51 	beq.w	80053ae <_printf_float+0xb6>
 800550c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005510:	429a      	cmp	r2, r3
 8005512:	db02      	blt.n	800551a <_printf_float+0x222>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	07d8      	lsls	r0, r3, #31
 8005518:	d50f      	bpl.n	800553a <_printf_float+0x242>
 800551a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800551e:	4631      	mov	r1, r6
 8005520:	4628      	mov	r0, r5
 8005522:	47b8      	blx	r7
 8005524:	3001      	adds	r0, #1
 8005526:	f43f af42 	beq.w	80053ae <_printf_float+0xb6>
 800552a:	f04f 0800 	mov.w	r8, #0
 800552e:	f104 091a 	add.w	r9, r4, #26
 8005532:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005534:	3b01      	subs	r3, #1
 8005536:	4543      	cmp	r3, r8
 8005538:	dc09      	bgt.n	800554e <_printf_float+0x256>
 800553a:	6823      	ldr	r3, [r4, #0]
 800553c:	079b      	lsls	r3, r3, #30
 800553e:	f100 8102 	bmi.w	8005746 <_printf_float+0x44e>
 8005542:	68e0      	ldr	r0, [r4, #12]
 8005544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005546:	4298      	cmp	r0, r3
 8005548:	bfb8      	it	lt
 800554a:	4618      	movlt	r0, r3
 800554c:	e731      	b.n	80053b2 <_printf_float+0xba>
 800554e:	2301      	movs	r3, #1
 8005550:	464a      	mov	r2, r9
 8005552:	4631      	mov	r1, r6
 8005554:	4628      	mov	r0, r5
 8005556:	47b8      	blx	r7
 8005558:	3001      	adds	r0, #1
 800555a:	f43f af28 	beq.w	80053ae <_printf_float+0xb6>
 800555e:	f108 0801 	add.w	r8, r8, #1
 8005562:	e7e6      	b.n	8005532 <_printf_float+0x23a>
 8005564:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005566:	2b00      	cmp	r3, #0
 8005568:	dc38      	bgt.n	80055dc <_printf_float+0x2e4>
 800556a:	2301      	movs	r3, #1
 800556c:	4631      	mov	r1, r6
 800556e:	4628      	mov	r0, r5
 8005570:	4a19      	ldr	r2, [pc, #100]	; (80055d8 <_printf_float+0x2e0>)
 8005572:	47b8      	blx	r7
 8005574:	3001      	adds	r0, #1
 8005576:	f43f af1a 	beq.w	80053ae <_printf_float+0xb6>
 800557a:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800557e:	4313      	orrs	r3, r2
 8005580:	d102      	bne.n	8005588 <_printf_float+0x290>
 8005582:	6823      	ldr	r3, [r4, #0]
 8005584:	07d9      	lsls	r1, r3, #31
 8005586:	d5d8      	bpl.n	800553a <_printf_float+0x242>
 8005588:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800558c:	4631      	mov	r1, r6
 800558e:	4628      	mov	r0, r5
 8005590:	47b8      	blx	r7
 8005592:	3001      	adds	r0, #1
 8005594:	f43f af0b 	beq.w	80053ae <_printf_float+0xb6>
 8005598:	f04f 0900 	mov.w	r9, #0
 800559c:	f104 0a1a 	add.w	sl, r4, #26
 80055a0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80055a2:	425b      	negs	r3, r3
 80055a4:	454b      	cmp	r3, r9
 80055a6:	dc01      	bgt.n	80055ac <_printf_float+0x2b4>
 80055a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80055aa:	e794      	b.n	80054d6 <_printf_float+0x1de>
 80055ac:	2301      	movs	r3, #1
 80055ae:	4652      	mov	r2, sl
 80055b0:	4631      	mov	r1, r6
 80055b2:	4628      	mov	r0, r5
 80055b4:	47b8      	blx	r7
 80055b6:	3001      	adds	r0, #1
 80055b8:	f43f aef9 	beq.w	80053ae <_printf_float+0xb6>
 80055bc:	f109 0901 	add.w	r9, r9, #1
 80055c0:	e7ee      	b.n	80055a0 <_printf_float+0x2a8>
 80055c2:	bf00      	nop
 80055c4:	7fefffff 	.word	0x7fefffff
 80055c8:	08007d90 	.word	0x08007d90
 80055cc:	08007d94 	.word	0x08007d94
 80055d0:	08007d9c 	.word	0x08007d9c
 80055d4:	08007d98 	.word	0x08007d98
 80055d8:	08007da0 	.word	0x08007da0
 80055dc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80055de:	6da3      	ldr	r3, [r4, #88]	; 0x58
 80055e0:	429a      	cmp	r2, r3
 80055e2:	bfa8      	it	ge
 80055e4:	461a      	movge	r2, r3
 80055e6:	2a00      	cmp	r2, #0
 80055e8:	4691      	mov	r9, r2
 80055ea:	dc37      	bgt.n	800565c <_printf_float+0x364>
 80055ec:	f04f 0b00 	mov.w	fp, #0
 80055f0:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80055f4:	f104 021a 	add.w	r2, r4, #26
 80055f8:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 80055fc:	ebaa 0309 	sub.w	r3, sl, r9
 8005600:	455b      	cmp	r3, fp
 8005602:	dc33      	bgt.n	800566c <_printf_float+0x374>
 8005604:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8005608:	429a      	cmp	r2, r3
 800560a:	db3b      	blt.n	8005684 <_printf_float+0x38c>
 800560c:	6823      	ldr	r3, [r4, #0]
 800560e:	07da      	lsls	r2, r3, #31
 8005610:	d438      	bmi.n	8005684 <_printf_float+0x38c>
 8005612:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005614:	990d      	ldr	r1, [sp, #52]	; 0x34
 8005616:	eba2 030a 	sub.w	r3, r2, sl
 800561a:	eba2 0901 	sub.w	r9, r2, r1
 800561e:	4599      	cmp	r9, r3
 8005620:	bfa8      	it	ge
 8005622:	4699      	movge	r9, r3
 8005624:	f1b9 0f00 	cmp.w	r9, #0
 8005628:	dc34      	bgt.n	8005694 <_printf_float+0x39c>
 800562a:	f04f 0800 	mov.w	r8, #0
 800562e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005632:	f104 0a1a 	add.w	sl, r4, #26
 8005636:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800563a:	1a9b      	subs	r3, r3, r2
 800563c:	eba3 0309 	sub.w	r3, r3, r9
 8005640:	4543      	cmp	r3, r8
 8005642:	f77f af7a 	ble.w	800553a <_printf_float+0x242>
 8005646:	2301      	movs	r3, #1
 8005648:	4652      	mov	r2, sl
 800564a:	4631      	mov	r1, r6
 800564c:	4628      	mov	r0, r5
 800564e:	47b8      	blx	r7
 8005650:	3001      	adds	r0, #1
 8005652:	f43f aeac 	beq.w	80053ae <_printf_float+0xb6>
 8005656:	f108 0801 	add.w	r8, r8, #1
 800565a:	e7ec      	b.n	8005636 <_printf_float+0x33e>
 800565c:	4613      	mov	r3, r2
 800565e:	4631      	mov	r1, r6
 8005660:	4642      	mov	r2, r8
 8005662:	4628      	mov	r0, r5
 8005664:	47b8      	blx	r7
 8005666:	3001      	adds	r0, #1
 8005668:	d1c0      	bne.n	80055ec <_printf_float+0x2f4>
 800566a:	e6a0      	b.n	80053ae <_printf_float+0xb6>
 800566c:	2301      	movs	r3, #1
 800566e:	4631      	mov	r1, r6
 8005670:	4628      	mov	r0, r5
 8005672:	920b      	str	r2, [sp, #44]	; 0x2c
 8005674:	47b8      	blx	r7
 8005676:	3001      	adds	r0, #1
 8005678:	f43f ae99 	beq.w	80053ae <_printf_float+0xb6>
 800567c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800567e:	f10b 0b01 	add.w	fp, fp, #1
 8005682:	e7b9      	b.n	80055f8 <_printf_float+0x300>
 8005684:	4631      	mov	r1, r6
 8005686:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800568a:	4628      	mov	r0, r5
 800568c:	47b8      	blx	r7
 800568e:	3001      	adds	r0, #1
 8005690:	d1bf      	bne.n	8005612 <_printf_float+0x31a>
 8005692:	e68c      	b.n	80053ae <_printf_float+0xb6>
 8005694:	464b      	mov	r3, r9
 8005696:	4631      	mov	r1, r6
 8005698:	4628      	mov	r0, r5
 800569a:	eb08 020a 	add.w	r2, r8, sl
 800569e:	47b8      	blx	r7
 80056a0:	3001      	adds	r0, #1
 80056a2:	d1c2      	bne.n	800562a <_printf_float+0x332>
 80056a4:	e683      	b.n	80053ae <_printf_float+0xb6>
 80056a6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80056a8:	2a01      	cmp	r2, #1
 80056aa:	dc01      	bgt.n	80056b0 <_printf_float+0x3b8>
 80056ac:	07db      	lsls	r3, r3, #31
 80056ae:	d537      	bpl.n	8005720 <_printf_float+0x428>
 80056b0:	2301      	movs	r3, #1
 80056b2:	4642      	mov	r2, r8
 80056b4:	4631      	mov	r1, r6
 80056b6:	4628      	mov	r0, r5
 80056b8:	47b8      	blx	r7
 80056ba:	3001      	adds	r0, #1
 80056bc:	f43f ae77 	beq.w	80053ae <_printf_float+0xb6>
 80056c0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80056c4:	4631      	mov	r1, r6
 80056c6:	4628      	mov	r0, r5
 80056c8:	47b8      	blx	r7
 80056ca:	3001      	adds	r0, #1
 80056cc:	f43f ae6f 	beq.w	80053ae <_printf_float+0xb6>
 80056d0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 80056d4:	2200      	movs	r2, #0
 80056d6:	2300      	movs	r3, #0
 80056d8:	f7fb f97e 	bl	80009d8 <__aeabi_dcmpeq>
 80056dc:	b9d8      	cbnz	r0, 8005716 <_printf_float+0x41e>
 80056de:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056e0:	f108 0201 	add.w	r2, r8, #1
 80056e4:	3b01      	subs	r3, #1
 80056e6:	4631      	mov	r1, r6
 80056e8:	4628      	mov	r0, r5
 80056ea:	47b8      	blx	r7
 80056ec:	3001      	adds	r0, #1
 80056ee:	d10e      	bne.n	800570e <_printf_float+0x416>
 80056f0:	e65d      	b.n	80053ae <_printf_float+0xb6>
 80056f2:	2301      	movs	r3, #1
 80056f4:	464a      	mov	r2, r9
 80056f6:	4631      	mov	r1, r6
 80056f8:	4628      	mov	r0, r5
 80056fa:	47b8      	blx	r7
 80056fc:	3001      	adds	r0, #1
 80056fe:	f43f ae56 	beq.w	80053ae <_printf_float+0xb6>
 8005702:	f108 0801 	add.w	r8, r8, #1
 8005706:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005708:	3b01      	subs	r3, #1
 800570a:	4543      	cmp	r3, r8
 800570c:	dcf1      	bgt.n	80056f2 <_printf_float+0x3fa>
 800570e:	4653      	mov	r3, sl
 8005710:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8005714:	e6e0      	b.n	80054d8 <_printf_float+0x1e0>
 8005716:	f04f 0800 	mov.w	r8, #0
 800571a:	f104 091a 	add.w	r9, r4, #26
 800571e:	e7f2      	b.n	8005706 <_printf_float+0x40e>
 8005720:	2301      	movs	r3, #1
 8005722:	4642      	mov	r2, r8
 8005724:	e7df      	b.n	80056e6 <_printf_float+0x3ee>
 8005726:	2301      	movs	r3, #1
 8005728:	464a      	mov	r2, r9
 800572a:	4631      	mov	r1, r6
 800572c:	4628      	mov	r0, r5
 800572e:	47b8      	blx	r7
 8005730:	3001      	adds	r0, #1
 8005732:	f43f ae3c 	beq.w	80053ae <_printf_float+0xb6>
 8005736:	f108 0801 	add.w	r8, r8, #1
 800573a:	68e3      	ldr	r3, [r4, #12]
 800573c:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800573e:	1a5b      	subs	r3, r3, r1
 8005740:	4543      	cmp	r3, r8
 8005742:	dcf0      	bgt.n	8005726 <_printf_float+0x42e>
 8005744:	e6fd      	b.n	8005542 <_printf_float+0x24a>
 8005746:	f04f 0800 	mov.w	r8, #0
 800574a:	f104 0919 	add.w	r9, r4, #25
 800574e:	e7f4      	b.n	800573a <_printf_float+0x442>

08005750 <_printf_common>:
 8005750:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005754:	4616      	mov	r6, r2
 8005756:	4699      	mov	r9, r3
 8005758:	688a      	ldr	r2, [r1, #8]
 800575a:	690b      	ldr	r3, [r1, #16]
 800575c:	4607      	mov	r7, r0
 800575e:	4293      	cmp	r3, r2
 8005760:	bfb8      	it	lt
 8005762:	4613      	movlt	r3, r2
 8005764:	6033      	str	r3, [r6, #0]
 8005766:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800576a:	460c      	mov	r4, r1
 800576c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8005770:	b10a      	cbz	r2, 8005776 <_printf_common+0x26>
 8005772:	3301      	adds	r3, #1
 8005774:	6033      	str	r3, [r6, #0]
 8005776:	6823      	ldr	r3, [r4, #0]
 8005778:	0699      	lsls	r1, r3, #26
 800577a:	bf42      	ittt	mi
 800577c:	6833      	ldrmi	r3, [r6, #0]
 800577e:	3302      	addmi	r3, #2
 8005780:	6033      	strmi	r3, [r6, #0]
 8005782:	6825      	ldr	r5, [r4, #0]
 8005784:	f015 0506 	ands.w	r5, r5, #6
 8005788:	d106      	bne.n	8005798 <_printf_common+0x48>
 800578a:	f104 0a19 	add.w	sl, r4, #25
 800578e:	68e3      	ldr	r3, [r4, #12]
 8005790:	6832      	ldr	r2, [r6, #0]
 8005792:	1a9b      	subs	r3, r3, r2
 8005794:	42ab      	cmp	r3, r5
 8005796:	dc28      	bgt.n	80057ea <_printf_common+0x9a>
 8005798:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800579c:	1e13      	subs	r3, r2, #0
 800579e:	6822      	ldr	r2, [r4, #0]
 80057a0:	bf18      	it	ne
 80057a2:	2301      	movne	r3, #1
 80057a4:	0692      	lsls	r2, r2, #26
 80057a6:	d42d      	bmi.n	8005804 <_printf_common+0xb4>
 80057a8:	4649      	mov	r1, r9
 80057aa:	4638      	mov	r0, r7
 80057ac:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80057b0:	47c0      	blx	r8
 80057b2:	3001      	adds	r0, #1
 80057b4:	d020      	beq.n	80057f8 <_printf_common+0xa8>
 80057b6:	6823      	ldr	r3, [r4, #0]
 80057b8:	68e5      	ldr	r5, [r4, #12]
 80057ba:	f003 0306 	and.w	r3, r3, #6
 80057be:	2b04      	cmp	r3, #4
 80057c0:	bf18      	it	ne
 80057c2:	2500      	movne	r5, #0
 80057c4:	6832      	ldr	r2, [r6, #0]
 80057c6:	f04f 0600 	mov.w	r6, #0
 80057ca:	68a3      	ldr	r3, [r4, #8]
 80057cc:	bf08      	it	eq
 80057ce:	1aad      	subeq	r5, r5, r2
 80057d0:	6922      	ldr	r2, [r4, #16]
 80057d2:	bf08      	it	eq
 80057d4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80057d8:	4293      	cmp	r3, r2
 80057da:	bfc4      	itt	gt
 80057dc:	1a9b      	subgt	r3, r3, r2
 80057de:	18ed      	addgt	r5, r5, r3
 80057e0:	341a      	adds	r4, #26
 80057e2:	42b5      	cmp	r5, r6
 80057e4:	d11a      	bne.n	800581c <_printf_common+0xcc>
 80057e6:	2000      	movs	r0, #0
 80057e8:	e008      	b.n	80057fc <_printf_common+0xac>
 80057ea:	2301      	movs	r3, #1
 80057ec:	4652      	mov	r2, sl
 80057ee:	4649      	mov	r1, r9
 80057f0:	4638      	mov	r0, r7
 80057f2:	47c0      	blx	r8
 80057f4:	3001      	adds	r0, #1
 80057f6:	d103      	bne.n	8005800 <_printf_common+0xb0>
 80057f8:	f04f 30ff 	mov.w	r0, #4294967295
 80057fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005800:	3501      	adds	r5, #1
 8005802:	e7c4      	b.n	800578e <_printf_common+0x3e>
 8005804:	2030      	movs	r0, #48	; 0x30
 8005806:	18e1      	adds	r1, r4, r3
 8005808:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800580c:	1c5a      	adds	r2, r3, #1
 800580e:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8005812:	4422      	add	r2, r4
 8005814:	3302      	adds	r3, #2
 8005816:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800581a:	e7c5      	b.n	80057a8 <_printf_common+0x58>
 800581c:	2301      	movs	r3, #1
 800581e:	4622      	mov	r2, r4
 8005820:	4649      	mov	r1, r9
 8005822:	4638      	mov	r0, r7
 8005824:	47c0      	blx	r8
 8005826:	3001      	adds	r0, #1
 8005828:	d0e6      	beq.n	80057f8 <_printf_common+0xa8>
 800582a:	3601      	adds	r6, #1
 800582c:	e7d9      	b.n	80057e2 <_printf_common+0x92>
	...

08005830 <_printf_i>:
 8005830:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005834:	460c      	mov	r4, r1
 8005836:	7e27      	ldrb	r7, [r4, #24]
 8005838:	4691      	mov	r9, r2
 800583a:	2f78      	cmp	r7, #120	; 0x78
 800583c:	4680      	mov	r8, r0
 800583e:	469a      	mov	sl, r3
 8005840:	990c      	ldr	r1, [sp, #48]	; 0x30
 8005842:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8005846:	d807      	bhi.n	8005858 <_printf_i+0x28>
 8005848:	2f62      	cmp	r7, #98	; 0x62
 800584a:	d80a      	bhi.n	8005862 <_printf_i+0x32>
 800584c:	2f00      	cmp	r7, #0
 800584e:	f000 80d9 	beq.w	8005a04 <_printf_i+0x1d4>
 8005852:	2f58      	cmp	r7, #88	; 0x58
 8005854:	f000 80a4 	beq.w	80059a0 <_printf_i+0x170>
 8005858:	f104 0642 	add.w	r6, r4, #66	; 0x42
 800585c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8005860:	e03a      	b.n	80058d8 <_printf_i+0xa8>
 8005862:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8005866:	2b15      	cmp	r3, #21
 8005868:	d8f6      	bhi.n	8005858 <_printf_i+0x28>
 800586a:	a001      	add	r0, pc, #4	; (adr r0, 8005870 <_printf_i+0x40>)
 800586c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8005870:	080058c9 	.word	0x080058c9
 8005874:	080058dd 	.word	0x080058dd
 8005878:	08005859 	.word	0x08005859
 800587c:	08005859 	.word	0x08005859
 8005880:	08005859 	.word	0x08005859
 8005884:	08005859 	.word	0x08005859
 8005888:	080058dd 	.word	0x080058dd
 800588c:	08005859 	.word	0x08005859
 8005890:	08005859 	.word	0x08005859
 8005894:	08005859 	.word	0x08005859
 8005898:	08005859 	.word	0x08005859
 800589c:	080059eb 	.word	0x080059eb
 80058a0:	0800590d 	.word	0x0800590d
 80058a4:	080059cd 	.word	0x080059cd
 80058a8:	08005859 	.word	0x08005859
 80058ac:	08005859 	.word	0x08005859
 80058b0:	08005a0d 	.word	0x08005a0d
 80058b4:	08005859 	.word	0x08005859
 80058b8:	0800590d 	.word	0x0800590d
 80058bc:	08005859 	.word	0x08005859
 80058c0:	08005859 	.word	0x08005859
 80058c4:	080059d5 	.word	0x080059d5
 80058c8:	680b      	ldr	r3, [r1, #0]
 80058ca:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80058ce:	1d1a      	adds	r2, r3, #4
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	600a      	str	r2, [r1, #0]
 80058d4:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80058d8:	2301      	movs	r3, #1
 80058da:	e0a4      	b.n	8005a26 <_printf_i+0x1f6>
 80058dc:	6825      	ldr	r5, [r4, #0]
 80058de:	6808      	ldr	r0, [r1, #0]
 80058e0:	062e      	lsls	r6, r5, #24
 80058e2:	f100 0304 	add.w	r3, r0, #4
 80058e6:	d50a      	bpl.n	80058fe <_printf_i+0xce>
 80058e8:	6805      	ldr	r5, [r0, #0]
 80058ea:	600b      	str	r3, [r1, #0]
 80058ec:	2d00      	cmp	r5, #0
 80058ee:	da03      	bge.n	80058f8 <_printf_i+0xc8>
 80058f0:	232d      	movs	r3, #45	; 0x2d
 80058f2:	426d      	negs	r5, r5
 80058f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80058f8:	230a      	movs	r3, #10
 80058fa:	485e      	ldr	r0, [pc, #376]	; (8005a74 <_printf_i+0x244>)
 80058fc:	e019      	b.n	8005932 <_printf_i+0x102>
 80058fe:	f015 0f40 	tst.w	r5, #64	; 0x40
 8005902:	6805      	ldr	r5, [r0, #0]
 8005904:	600b      	str	r3, [r1, #0]
 8005906:	bf18      	it	ne
 8005908:	b22d      	sxthne	r5, r5
 800590a:	e7ef      	b.n	80058ec <_printf_i+0xbc>
 800590c:	680b      	ldr	r3, [r1, #0]
 800590e:	6825      	ldr	r5, [r4, #0]
 8005910:	1d18      	adds	r0, r3, #4
 8005912:	6008      	str	r0, [r1, #0]
 8005914:	0628      	lsls	r0, r5, #24
 8005916:	d501      	bpl.n	800591c <_printf_i+0xec>
 8005918:	681d      	ldr	r5, [r3, #0]
 800591a:	e002      	b.n	8005922 <_printf_i+0xf2>
 800591c:	0669      	lsls	r1, r5, #25
 800591e:	d5fb      	bpl.n	8005918 <_printf_i+0xe8>
 8005920:	881d      	ldrh	r5, [r3, #0]
 8005922:	2f6f      	cmp	r7, #111	; 0x6f
 8005924:	bf0c      	ite	eq
 8005926:	2308      	moveq	r3, #8
 8005928:	230a      	movne	r3, #10
 800592a:	4852      	ldr	r0, [pc, #328]	; (8005a74 <_printf_i+0x244>)
 800592c:	2100      	movs	r1, #0
 800592e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8005932:	6866      	ldr	r6, [r4, #4]
 8005934:	2e00      	cmp	r6, #0
 8005936:	bfa8      	it	ge
 8005938:	6821      	ldrge	r1, [r4, #0]
 800593a:	60a6      	str	r6, [r4, #8]
 800593c:	bfa4      	itt	ge
 800593e:	f021 0104 	bicge.w	r1, r1, #4
 8005942:	6021      	strge	r1, [r4, #0]
 8005944:	b90d      	cbnz	r5, 800594a <_printf_i+0x11a>
 8005946:	2e00      	cmp	r6, #0
 8005948:	d04d      	beq.n	80059e6 <_printf_i+0x1b6>
 800594a:	4616      	mov	r6, r2
 800594c:	fbb5 f1f3 	udiv	r1, r5, r3
 8005950:	fb03 5711 	mls	r7, r3, r1, r5
 8005954:	5dc7      	ldrb	r7, [r0, r7]
 8005956:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800595a:	462f      	mov	r7, r5
 800595c:	42bb      	cmp	r3, r7
 800595e:	460d      	mov	r5, r1
 8005960:	d9f4      	bls.n	800594c <_printf_i+0x11c>
 8005962:	2b08      	cmp	r3, #8
 8005964:	d10b      	bne.n	800597e <_printf_i+0x14e>
 8005966:	6823      	ldr	r3, [r4, #0]
 8005968:	07df      	lsls	r7, r3, #31
 800596a:	d508      	bpl.n	800597e <_printf_i+0x14e>
 800596c:	6923      	ldr	r3, [r4, #16]
 800596e:	6861      	ldr	r1, [r4, #4]
 8005970:	4299      	cmp	r1, r3
 8005972:	bfde      	ittt	le
 8005974:	2330      	movle	r3, #48	; 0x30
 8005976:	f806 3c01 	strble.w	r3, [r6, #-1]
 800597a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800597e:	1b92      	subs	r2, r2, r6
 8005980:	6122      	str	r2, [r4, #16]
 8005982:	464b      	mov	r3, r9
 8005984:	4621      	mov	r1, r4
 8005986:	4640      	mov	r0, r8
 8005988:	f8cd a000 	str.w	sl, [sp]
 800598c:	aa03      	add	r2, sp, #12
 800598e:	f7ff fedf 	bl	8005750 <_printf_common>
 8005992:	3001      	adds	r0, #1
 8005994:	d14c      	bne.n	8005a30 <_printf_i+0x200>
 8005996:	f04f 30ff 	mov.w	r0, #4294967295
 800599a:	b004      	add	sp, #16
 800599c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a0:	4834      	ldr	r0, [pc, #208]	; (8005a74 <_printf_i+0x244>)
 80059a2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80059a6:	680e      	ldr	r6, [r1, #0]
 80059a8:	6823      	ldr	r3, [r4, #0]
 80059aa:	f856 5b04 	ldr.w	r5, [r6], #4
 80059ae:	061f      	lsls	r7, r3, #24
 80059b0:	600e      	str	r6, [r1, #0]
 80059b2:	d514      	bpl.n	80059de <_printf_i+0x1ae>
 80059b4:	07d9      	lsls	r1, r3, #31
 80059b6:	bf44      	itt	mi
 80059b8:	f043 0320 	orrmi.w	r3, r3, #32
 80059bc:	6023      	strmi	r3, [r4, #0]
 80059be:	b91d      	cbnz	r5, 80059c8 <_printf_i+0x198>
 80059c0:	6823      	ldr	r3, [r4, #0]
 80059c2:	f023 0320 	bic.w	r3, r3, #32
 80059c6:	6023      	str	r3, [r4, #0]
 80059c8:	2310      	movs	r3, #16
 80059ca:	e7af      	b.n	800592c <_printf_i+0xfc>
 80059cc:	6823      	ldr	r3, [r4, #0]
 80059ce:	f043 0320 	orr.w	r3, r3, #32
 80059d2:	6023      	str	r3, [r4, #0]
 80059d4:	2378      	movs	r3, #120	; 0x78
 80059d6:	4828      	ldr	r0, [pc, #160]	; (8005a78 <_printf_i+0x248>)
 80059d8:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80059dc:	e7e3      	b.n	80059a6 <_printf_i+0x176>
 80059de:	065e      	lsls	r6, r3, #25
 80059e0:	bf48      	it	mi
 80059e2:	b2ad      	uxthmi	r5, r5
 80059e4:	e7e6      	b.n	80059b4 <_printf_i+0x184>
 80059e6:	4616      	mov	r6, r2
 80059e8:	e7bb      	b.n	8005962 <_printf_i+0x132>
 80059ea:	680b      	ldr	r3, [r1, #0]
 80059ec:	6826      	ldr	r6, [r4, #0]
 80059ee:	1d1d      	adds	r5, r3, #4
 80059f0:	6960      	ldr	r0, [r4, #20]
 80059f2:	600d      	str	r5, [r1, #0]
 80059f4:	0635      	lsls	r5, r6, #24
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	d501      	bpl.n	80059fe <_printf_i+0x1ce>
 80059fa:	6018      	str	r0, [r3, #0]
 80059fc:	e002      	b.n	8005a04 <_printf_i+0x1d4>
 80059fe:	0671      	lsls	r1, r6, #25
 8005a00:	d5fb      	bpl.n	80059fa <_printf_i+0x1ca>
 8005a02:	8018      	strh	r0, [r3, #0]
 8005a04:	2300      	movs	r3, #0
 8005a06:	4616      	mov	r6, r2
 8005a08:	6123      	str	r3, [r4, #16]
 8005a0a:	e7ba      	b.n	8005982 <_printf_i+0x152>
 8005a0c:	680b      	ldr	r3, [r1, #0]
 8005a0e:	1d1a      	adds	r2, r3, #4
 8005a10:	600a      	str	r2, [r1, #0]
 8005a12:	681e      	ldr	r6, [r3, #0]
 8005a14:	2100      	movs	r1, #0
 8005a16:	4630      	mov	r0, r6
 8005a18:	6862      	ldr	r2, [r4, #4]
 8005a1a:	f001 f9b7 	bl	8006d8c <memchr>
 8005a1e:	b108      	cbz	r0, 8005a24 <_printf_i+0x1f4>
 8005a20:	1b80      	subs	r0, r0, r6
 8005a22:	6060      	str	r0, [r4, #4]
 8005a24:	6863      	ldr	r3, [r4, #4]
 8005a26:	6123      	str	r3, [r4, #16]
 8005a28:	2300      	movs	r3, #0
 8005a2a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005a2e:	e7a8      	b.n	8005982 <_printf_i+0x152>
 8005a30:	4632      	mov	r2, r6
 8005a32:	4649      	mov	r1, r9
 8005a34:	4640      	mov	r0, r8
 8005a36:	6923      	ldr	r3, [r4, #16]
 8005a38:	47d0      	blx	sl
 8005a3a:	3001      	adds	r0, #1
 8005a3c:	d0ab      	beq.n	8005996 <_printf_i+0x166>
 8005a3e:	6823      	ldr	r3, [r4, #0]
 8005a40:	079b      	lsls	r3, r3, #30
 8005a42:	d413      	bmi.n	8005a6c <_printf_i+0x23c>
 8005a44:	68e0      	ldr	r0, [r4, #12]
 8005a46:	9b03      	ldr	r3, [sp, #12]
 8005a48:	4298      	cmp	r0, r3
 8005a4a:	bfb8      	it	lt
 8005a4c:	4618      	movlt	r0, r3
 8005a4e:	e7a4      	b.n	800599a <_printf_i+0x16a>
 8005a50:	2301      	movs	r3, #1
 8005a52:	4632      	mov	r2, r6
 8005a54:	4649      	mov	r1, r9
 8005a56:	4640      	mov	r0, r8
 8005a58:	47d0      	blx	sl
 8005a5a:	3001      	adds	r0, #1
 8005a5c:	d09b      	beq.n	8005996 <_printf_i+0x166>
 8005a5e:	3501      	adds	r5, #1
 8005a60:	68e3      	ldr	r3, [r4, #12]
 8005a62:	9903      	ldr	r1, [sp, #12]
 8005a64:	1a5b      	subs	r3, r3, r1
 8005a66:	42ab      	cmp	r3, r5
 8005a68:	dcf2      	bgt.n	8005a50 <_printf_i+0x220>
 8005a6a:	e7eb      	b.n	8005a44 <_printf_i+0x214>
 8005a6c:	2500      	movs	r5, #0
 8005a6e:	f104 0619 	add.w	r6, r4, #25
 8005a72:	e7f5      	b.n	8005a60 <_printf_i+0x230>
 8005a74:	08007da2 	.word	0x08007da2
 8005a78:	08007db3 	.word	0x08007db3

08005a7c <iprintf>:
 8005a7c:	b40f      	push	{r0, r1, r2, r3}
 8005a7e:	4b0a      	ldr	r3, [pc, #40]	; (8005aa8 <iprintf+0x2c>)
 8005a80:	b513      	push	{r0, r1, r4, lr}
 8005a82:	681c      	ldr	r4, [r3, #0]
 8005a84:	b124      	cbz	r4, 8005a90 <iprintf+0x14>
 8005a86:	69a3      	ldr	r3, [r4, #24]
 8005a88:	b913      	cbnz	r3, 8005a90 <iprintf+0x14>
 8005a8a:	4620      	mov	r0, r4
 8005a8c:	f001 f86c 	bl	8006b68 <__sinit>
 8005a90:	ab05      	add	r3, sp, #20
 8005a92:	4620      	mov	r0, r4
 8005a94:	9a04      	ldr	r2, [sp, #16]
 8005a96:	68a1      	ldr	r1, [r4, #8]
 8005a98:	9301      	str	r3, [sp, #4]
 8005a9a:	f001 fdf1 	bl	8007680 <_vfiprintf_r>
 8005a9e:	b002      	add	sp, #8
 8005aa0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005aa4:	b004      	add	sp, #16
 8005aa6:	4770      	bx	lr
 8005aa8:	2000000c 	.word	0x2000000c

08005aac <setvbuf>:
 8005aac:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005ab0:	461d      	mov	r5, r3
 8005ab2:	4b5d      	ldr	r3, [pc, #372]	; (8005c28 <setvbuf+0x17c>)
 8005ab4:	4604      	mov	r4, r0
 8005ab6:	681f      	ldr	r7, [r3, #0]
 8005ab8:	460e      	mov	r6, r1
 8005aba:	4690      	mov	r8, r2
 8005abc:	b127      	cbz	r7, 8005ac8 <setvbuf+0x1c>
 8005abe:	69bb      	ldr	r3, [r7, #24]
 8005ac0:	b913      	cbnz	r3, 8005ac8 <setvbuf+0x1c>
 8005ac2:	4638      	mov	r0, r7
 8005ac4:	f001 f850 	bl	8006b68 <__sinit>
 8005ac8:	4b58      	ldr	r3, [pc, #352]	; (8005c2c <setvbuf+0x180>)
 8005aca:	429c      	cmp	r4, r3
 8005acc:	d167      	bne.n	8005b9e <setvbuf+0xf2>
 8005ace:	687c      	ldr	r4, [r7, #4]
 8005ad0:	f1b8 0f02 	cmp.w	r8, #2
 8005ad4:	d006      	beq.n	8005ae4 <setvbuf+0x38>
 8005ad6:	f1b8 0f01 	cmp.w	r8, #1
 8005ada:	f200 809f 	bhi.w	8005c1c <setvbuf+0x170>
 8005ade:	2d00      	cmp	r5, #0
 8005ae0:	f2c0 809c 	blt.w	8005c1c <setvbuf+0x170>
 8005ae4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8005ae6:	07db      	lsls	r3, r3, #31
 8005ae8:	d405      	bmi.n	8005af6 <setvbuf+0x4a>
 8005aea:	89a3      	ldrh	r3, [r4, #12]
 8005aec:	0598      	lsls	r0, r3, #22
 8005aee:	d402      	bmi.n	8005af6 <setvbuf+0x4a>
 8005af0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005af2:	f001 f8dc 	bl	8006cae <__retarget_lock_acquire_recursive>
 8005af6:	4621      	mov	r1, r4
 8005af8:	4638      	mov	r0, r7
 8005afa:	f000 ffa1 	bl	8006a40 <_fflush_r>
 8005afe:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8005b00:	b141      	cbz	r1, 8005b14 <setvbuf+0x68>
 8005b02:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8005b06:	4299      	cmp	r1, r3
 8005b08:	d002      	beq.n	8005b10 <setvbuf+0x64>
 8005b0a:	4638      	mov	r0, r7
 8005b0c:	f001 fcea 	bl	80074e4 <_free_r>
 8005b10:	2300      	movs	r3, #0
 8005b12:	6363      	str	r3, [r4, #52]	; 0x34
 8005b14:	2300      	movs	r3, #0
 8005b16:	61a3      	str	r3, [r4, #24]
 8005b18:	6063      	str	r3, [r4, #4]
 8005b1a:	89a3      	ldrh	r3, [r4, #12]
 8005b1c:	0619      	lsls	r1, r3, #24
 8005b1e:	d503      	bpl.n	8005b28 <setvbuf+0x7c>
 8005b20:	4638      	mov	r0, r7
 8005b22:	6921      	ldr	r1, [r4, #16]
 8005b24:	f001 fcde 	bl	80074e4 <_free_r>
 8005b28:	89a3      	ldrh	r3, [r4, #12]
 8005b2a:	f1b8 0f02 	cmp.w	r8, #2
 8005b2e:	f423 634a 	bic.w	r3, r3, #3232	; 0xca0
 8005b32:	f023 0303 	bic.w	r3, r3, #3
 8005b36:	81a3      	strh	r3, [r4, #12]
 8005b38:	d06c      	beq.n	8005c14 <setvbuf+0x168>
 8005b3a:	ab01      	add	r3, sp, #4
 8005b3c:	466a      	mov	r2, sp
 8005b3e:	4621      	mov	r1, r4
 8005b40:	4638      	mov	r0, r7
 8005b42:	f001 f8b6 	bl	8006cb2 <__swhatbuf_r>
 8005b46:	89a3      	ldrh	r3, [r4, #12]
 8005b48:	4318      	orrs	r0, r3
 8005b4a:	81a0      	strh	r0, [r4, #12]
 8005b4c:	2d00      	cmp	r5, #0
 8005b4e:	d130      	bne.n	8005bb2 <setvbuf+0x106>
 8005b50:	9d00      	ldr	r5, [sp, #0]
 8005b52:	4628      	mov	r0, r5
 8005b54:	f001 f912 	bl	8006d7c <malloc>
 8005b58:	4606      	mov	r6, r0
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d155      	bne.n	8005c0a <setvbuf+0x15e>
 8005b5e:	f8dd 9000 	ldr.w	r9, [sp]
 8005b62:	45a9      	cmp	r9, r5
 8005b64:	d14a      	bne.n	8005bfc <setvbuf+0x150>
 8005b66:	f04f 35ff 	mov.w	r5, #4294967295
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	60a2      	str	r2, [r4, #8]
 8005b6e:	f104 0247 	add.w	r2, r4, #71	; 0x47
 8005b72:	6022      	str	r2, [r4, #0]
 8005b74:	6122      	str	r2, [r4, #16]
 8005b76:	2201      	movs	r2, #1
 8005b78:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005b7c:	6162      	str	r2, [r4, #20]
 8005b7e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8005b80:	f043 0302 	orr.w	r3, r3, #2
 8005b84:	07d2      	lsls	r2, r2, #31
 8005b86:	81a3      	strh	r3, [r4, #12]
 8005b88:	d405      	bmi.n	8005b96 <setvbuf+0xea>
 8005b8a:	f413 7f00 	tst.w	r3, #512	; 0x200
 8005b8e:	d102      	bne.n	8005b96 <setvbuf+0xea>
 8005b90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8005b92:	f001 f88d 	bl	8006cb0 <__retarget_lock_release_recursive>
 8005b96:	4628      	mov	r0, r5
 8005b98:	b003      	add	sp, #12
 8005b9a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b9e:	4b24      	ldr	r3, [pc, #144]	; (8005c30 <setvbuf+0x184>)
 8005ba0:	429c      	cmp	r4, r3
 8005ba2:	d101      	bne.n	8005ba8 <setvbuf+0xfc>
 8005ba4:	68bc      	ldr	r4, [r7, #8]
 8005ba6:	e793      	b.n	8005ad0 <setvbuf+0x24>
 8005ba8:	4b22      	ldr	r3, [pc, #136]	; (8005c34 <setvbuf+0x188>)
 8005baa:	429c      	cmp	r4, r3
 8005bac:	bf08      	it	eq
 8005bae:	68fc      	ldreq	r4, [r7, #12]
 8005bb0:	e78e      	b.n	8005ad0 <setvbuf+0x24>
 8005bb2:	2e00      	cmp	r6, #0
 8005bb4:	d0cd      	beq.n	8005b52 <setvbuf+0xa6>
 8005bb6:	69bb      	ldr	r3, [r7, #24]
 8005bb8:	b913      	cbnz	r3, 8005bc0 <setvbuf+0x114>
 8005bba:	4638      	mov	r0, r7
 8005bbc:	f000 ffd4 	bl	8006b68 <__sinit>
 8005bc0:	f1b8 0f01 	cmp.w	r8, #1
 8005bc4:	bf08      	it	eq
 8005bc6:	89a3      	ldrheq	r3, [r4, #12]
 8005bc8:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8005bcc:	bf04      	itt	eq
 8005bce:	f043 0301 	orreq.w	r3, r3, #1
 8005bd2:	81a3      	strheq	r3, [r4, #12]
 8005bd4:	89a2      	ldrh	r2, [r4, #12]
 8005bd6:	6026      	str	r6, [r4, #0]
 8005bd8:	f012 0308 	ands.w	r3, r2, #8
 8005bdc:	d01c      	beq.n	8005c18 <setvbuf+0x16c>
 8005bde:	07d3      	lsls	r3, r2, #31
 8005be0:	bf41      	itttt	mi
 8005be2:	2300      	movmi	r3, #0
 8005be4:	426d      	negmi	r5, r5
 8005be6:	60a3      	strmi	r3, [r4, #8]
 8005be8:	61a5      	strmi	r5, [r4, #24]
 8005bea:	bf58      	it	pl
 8005bec:	60a5      	strpl	r5, [r4, #8]
 8005bee:	6e65      	ldr	r5, [r4, #100]	; 0x64
 8005bf0:	f015 0501 	ands.w	r5, r5, #1
 8005bf4:	d115      	bne.n	8005c22 <setvbuf+0x176>
 8005bf6:	f412 7f00 	tst.w	r2, #512	; 0x200
 8005bfa:	e7c8      	b.n	8005b8e <setvbuf+0xe2>
 8005bfc:	4648      	mov	r0, r9
 8005bfe:	f001 f8bd 	bl	8006d7c <malloc>
 8005c02:	4606      	mov	r6, r0
 8005c04:	2800      	cmp	r0, #0
 8005c06:	d0ae      	beq.n	8005b66 <setvbuf+0xba>
 8005c08:	464d      	mov	r5, r9
 8005c0a:	89a3      	ldrh	r3, [r4, #12]
 8005c0c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005c10:	81a3      	strh	r3, [r4, #12]
 8005c12:	e7d0      	b.n	8005bb6 <setvbuf+0x10a>
 8005c14:	2500      	movs	r5, #0
 8005c16:	e7a8      	b.n	8005b6a <setvbuf+0xbe>
 8005c18:	60a3      	str	r3, [r4, #8]
 8005c1a:	e7e8      	b.n	8005bee <setvbuf+0x142>
 8005c1c:	f04f 35ff 	mov.w	r5, #4294967295
 8005c20:	e7b9      	b.n	8005b96 <setvbuf+0xea>
 8005c22:	2500      	movs	r5, #0
 8005c24:	e7b7      	b.n	8005b96 <setvbuf+0xea>
 8005c26:	bf00      	nop
 8005c28:	2000000c 	.word	0x2000000c
 8005c2c:	08007e78 	.word	0x08007e78
 8005c30:	08007e98 	.word	0x08007e98
 8005c34:	08007e58 	.word	0x08007e58

08005c38 <quorem>:
 8005c38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c3c:	6903      	ldr	r3, [r0, #16]
 8005c3e:	690c      	ldr	r4, [r1, #16]
 8005c40:	4607      	mov	r7, r0
 8005c42:	42a3      	cmp	r3, r4
 8005c44:	f2c0 8083 	blt.w	8005d4e <quorem+0x116>
 8005c48:	3c01      	subs	r4, #1
 8005c4a:	f100 0514 	add.w	r5, r0, #20
 8005c4e:	f101 0814 	add.w	r8, r1, #20
 8005c52:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005c56:	9301      	str	r3, [sp, #4]
 8005c58:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8005c5c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005c60:	3301      	adds	r3, #1
 8005c62:	429a      	cmp	r2, r3
 8005c64:	fbb2 f6f3 	udiv	r6, r2, r3
 8005c68:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8005c6c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005c70:	d332      	bcc.n	8005cd8 <quorem+0xa0>
 8005c72:	f04f 0e00 	mov.w	lr, #0
 8005c76:	4640      	mov	r0, r8
 8005c78:	46ac      	mov	ip, r5
 8005c7a:	46f2      	mov	sl, lr
 8005c7c:	f850 2b04 	ldr.w	r2, [r0], #4
 8005c80:	b293      	uxth	r3, r2
 8005c82:	fb06 e303 	mla	r3, r6, r3, lr
 8005c86:	0c12      	lsrs	r2, r2, #16
 8005c88:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8005c8c:	fb06 e202 	mla	r2, r6, r2, lr
 8005c90:	b29b      	uxth	r3, r3
 8005c92:	ebaa 0303 	sub.w	r3, sl, r3
 8005c96:	f8dc a000 	ldr.w	sl, [ip]
 8005c9a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005c9e:	fa1f fa8a 	uxth.w	sl, sl
 8005ca2:	4453      	add	r3, sl
 8005ca4:	fa1f fa82 	uxth.w	sl, r2
 8005ca8:	f8dc 2000 	ldr.w	r2, [ip]
 8005cac:	4581      	cmp	r9, r0
 8005cae:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8005cb2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005cb6:	b29b      	uxth	r3, r3
 8005cb8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005cbc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8005cc0:	f84c 3b04 	str.w	r3, [ip], #4
 8005cc4:	d2da      	bcs.n	8005c7c <quorem+0x44>
 8005cc6:	f855 300b 	ldr.w	r3, [r5, fp]
 8005cca:	b92b      	cbnz	r3, 8005cd8 <quorem+0xa0>
 8005ccc:	9b01      	ldr	r3, [sp, #4]
 8005cce:	3b04      	subs	r3, #4
 8005cd0:	429d      	cmp	r5, r3
 8005cd2:	461a      	mov	r2, r3
 8005cd4:	d32f      	bcc.n	8005d36 <quorem+0xfe>
 8005cd6:	613c      	str	r4, [r7, #16]
 8005cd8:	4638      	mov	r0, r7
 8005cda:	f001 faed 	bl	80072b8 <__mcmp>
 8005cde:	2800      	cmp	r0, #0
 8005ce0:	db25      	blt.n	8005d2e <quorem+0xf6>
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	f04f 0c00 	mov.w	ip, #0
 8005ce8:	3601      	adds	r6, #1
 8005cea:	f858 1b04 	ldr.w	r1, [r8], #4
 8005cee:	f8d0 e000 	ldr.w	lr, [r0]
 8005cf2:	b28b      	uxth	r3, r1
 8005cf4:	ebac 0303 	sub.w	r3, ip, r3
 8005cf8:	fa1f f28e 	uxth.w	r2, lr
 8005cfc:	4413      	add	r3, r2
 8005cfe:	0c0a      	lsrs	r2, r1, #16
 8005d00:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8005d04:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8005d08:	b29b      	uxth	r3, r3
 8005d0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8005d0e:	45c1      	cmp	r9, r8
 8005d10:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8005d14:	f840 3b04 	str.w	r3, [r0], #4
 8005d18:	d2e7      	bcs.n	8005cea <quorem+0xb2>
 8005d1a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005d1e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005d22:	b922      	cbnz	r2, 8005d2e <quorem+0xf6>
 8005d24:	3b04      	subs	r3, #4
 8005d26:	429d      	cmp	r5, r3
 8005d28:	461a      	mov	r2, r3
 8005d2a:	d30a      	bcc.n	8005d42 <quorem+0x10a>
 8005d2c:	613c      	str	r4, [r7, #16]
 8005d2e:	4630      	mov	r0, r6
 8005d30:	b003      	add	sp, #12
 8005d32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d36:	6812      	ldr	r2, [r2, #0]
 8005d38:	3b04      	subs	r3, #4
 8005d3a:	2a00      	cmp	r2, #0
 8005d3c:	d1cb      	bne.n	8005cd6 <quorem+0x9e>
 8005d3e:	3c01      	subs	r4, #1
 8005d40:	e7c6      	b.n	8005cd0 <quorem+0x98>
 8005d42:	6812      	ldr	r2, [r2, #0]
 8005d44:	3b04      	subs	r3, #4
 8005d46:	2a00      	cmp	r2, #0
 8005d48:	d1f0      	bne.n	8005d2c <quorem+0xf4>
 8005d4a:	3c01      	subs	r4, #1
 8005d4c:	e7eb      	b.n	8005d26 <quorem+0xee>
 8005d4e:	2000      	movs	r0, #0
 8005d50:	e7ee      	b.n	8005d30 <quorem+0xf8>
 8005d52:	0000      	movs	r0, r0
 8005d54:	0000      	movs	r0, r0
	...

08005d58 <_dtoa_r>:
 8005d58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d5c:	4616      	mov	r6, r2
 8005d5e:	461f      	mov	r7, r3
 8005d60:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8005d62:	b099      	sub	sp, #100	; 0x64
 8005d64:	4605      	mov	r5, r0
 8005d66:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005d6a:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005d6e:	b974      	cbnz	r4, 8005d8e <_dtoa_r+0x36>
 8005d70:	2010      	movs	r0, #16
 8005d72:	f001 f803 	bl	8006d7c <malloc>
 8005d76:	4602      	mov	r2, r0
 8005d78:	6268      	str	r0, [r5, #36]	; 0x24
 8005d7a:	b920      	cbnz	r0, 8005d86 <_dtoa_r+0x2e>
 8005d7c:	21ea      	movs	r1, #234	; 0xea
 8005d7e:	4bae      	ldr	r3, [pc, #696]	; (8006038 <_dtoa_r+0x2e0>)
 8005d80:	48ae      	ldr	r0, [pc, #696]	; (800603c <_dtoa_r+0x2e4>)
 8005d82:	f001 fed3 	bl	8007b2c <__assert_func>
 8005d86:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d8a:	6004      	str	r4, [r0, #0]
 8005d8c:	60c4      	str	r4, [r0, #12]
 8005d8e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005d90:	6819      	ldr	r1, [r3, #0]
 8005d92:	b151      	cbz	r1, 8005daa <_dtoa_r+0x52>
 8005d94:	685a      	ldr	r2, [r3, #4]
 8005d96:	2301      	movs	r3, #1
 8005d98:	4093      	lsls	r3, r2
 8005d9a:	604a      	str	r2, [r1, #4]
 8005d9c:	608b      	str	r3, [r1, #8]
 8005d9e:	4628      	mov	r0, r5
 8005da0:	f001 f850 	bl	8006e44 <_Bfree>
 8005da4:	2200      	movs	r2, #0
 8005da6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005da8:	601a      	str	r2, [r3, #0]
 8005daa:	1e3b      	subs	r3, r7, #0
 8005dac:	bfaf      	iteee	ge
 8005dae:	2300      	movge	r3, #0
 8005db0:	2201      	movlt	r2, #1
 8005db2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8005db6:	9305      	strlt	r3, [sp, #20]
 8005db8:	bfa8      	it	ge
 8005dba:	f8c8 3000 	strge.w	r3, [r8]
 8005dbe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8005dc2:	4b9f      	ldr	r3, [pc, #636]	; (8006040 <_dtoa_r+0x2e8>)
 8005dc4:	bfb8      	it	lt
 8005dc6:	f8c8 2000 	strlt.w	r2, [r8]
 8005dca:	ea33 0309 	bics.w	r3, r3, r9
 8005dce:	d119      	bne.n	8005e04 <_dtoa_r+0xac>
 8005dd0:	f242 730f 	movw	r3, #9999	; 0x270f
 8005dd4:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005dd6:	6013      	str	r3, [r2, #0]
 8005dd8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005ddc:	4333      	orrs	r3, r6
 8005dde:	f000 8580 	beq.w	80068e2 <_dtoa_r+0xb8a>
 8005de2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005de4:	b953      	cbnz	r3, 8005dfc <_dtoa_r+0xa4>
 8005de6:	4b97      	ldr	r3, [pc, #604]	; (8006044 <_dtoa_r+0x2ec>)
 8005de8:	e022      	b.n	8005e30 <_dtoa_r+0xd8>
 8005dea:	4b97      	ldr	r3, [pc, #604]	; (8006048 <_dtoa_r+0x2f0>)
 8005dec:	9308      	str	r3, [sp, #32]
 8005dee:	3308      	adds	r3, #8
 8005df0:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005df2:	6013      	str	r3, [r2, #0]
 8005df4:	9808      	ldr	r0, [sp, #32]
 8005df6:	b019      	add	sp, #100	; 0x64
 8005df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005dfc:	4b91      	ldr	r3, [pc, #580]	; (8006044 <_dtoa_r+0x2ec>)
 8005dfe:	9308      	str	r3, [sp, #32]
 8005e00:	3303      	adds	r3, #3
 8005e02:	e7f5      	b.n	8005df0 <_dtoa_r+0x98>
 8005e04:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8005e08:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8005e0c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e10:	2200      	movs	r2, #0
 8005e12:	2300      	movs	r3, #0
 8005e14:	f7fa fde0 	bl	80009d8 <__aeabi_dcmpeq>
 8005e18:	4680      	mov	r8, r0
 8005e1a:	b158      	cbz	r0, 8005e34 <_dtoa_r+0xdc>
 8005e1c:	2301      	movs	r3, #1
 8005e1e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005e20:	6013      	str	r3, [r2, #0]
 8005e22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005e24:	2b00      	cmp	r3, #0
 8005e26:	f000 8559 	beq.w	80068dc <_dtoa_r+0xb84>
 8005e2a:	4888      	ldr	r0, [pc, #544]	; (800604c <_dtoa_r+0x2f4>)
 8005e2c:	6018      	str	r0, [r3, #0]
 8005e2e:	1e43      	subs	r3, r0, #1
 8005e30:	9308      	str	r3, [sp, #32]
 8005e32:	e7df      	b.n	8005df4 <_dtoa_r+0x9c>
 8005e34:	ab16      	add	r3, sp, #88	; 0x58
 8005e36:	9301      	str	r3, [sp, #4]
 8005e38:	ab17      	add	r3, sp, #92	; 0x5c
 8005e3a:	9300      	str	r3, [sp, #0]
 8005e3c:	4628      	mov	r0, r5
 8005e3e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8005e42:	f001 fae5 	bl	8007410 <__d2b>
 8005e46:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005e4a:	4682      	mov	sl, r0
 8005e4c:	2c00      	cmp	r4, #0
 8005e4e:	d07e      	beq.n	8005f4e <_dtoa_r+0x1f6>
 8005e50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005e54:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005e56:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005e5a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005e5e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8005e62:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8005e66:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005e6a:	2200      	movs	r2, #0
 8005e6c:	4b78      	ldr	r3, [pc, #480]	; (8006050 <_dtoa_r+0x2f8>)
 8005e6e:	f7fa f993 	bl	8000198 <__aeabi_dsub>
 8005e72:	a36b      	add	r3, pc, #428	; (adr r3, 8006020 <_dtoa_r+0x2c8>)
 8005e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e78:	f7fa fb46 	bl	8000508 <__aeabi_dmul>
 8005e7c:	a36a      	add	r3, pc, #424	; (adr r3, 8006028 <_dtoa_r+0x2d0>)
 8005e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e82:	f7fa f98b 	bl	800019c <__adddf3>
 8005e86:	4606      	mov	r6, r0
 8005e88:	4620      	mov	r0, r4
 8005e8a:	460f      	mov	r7, r1
 8005e8c:	f7fa fad2 	bl	8000434 <__aeabi_i2d>
 8005e90:	a367      	add	r3, pc, #412	; (adr r3, 8006030 <_dtoa_r+0x2d8>)
 8005e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e96:	f7fa fb37 	bl	8000508 <__aeabi_dmul>
 8005e9a:	4602      	mov	r2, r0
 8005e9c:	460b      	mov	r3, r1
 8005e9e:	4630      	mov	r0, r6
 8005ea0:	4639      	mov	r1, r7
 8005ea2:	f7fa f97b 	bl	800019c <__adddf3>
 8005ea6:	4606      	mov	r6, r0
 8005ea8:	460f      	mov	r7, r1
 8005eaa:	f7fa fddd 	bl	8000a68 <__aeabi_d2iz>
 8005eae:	2200      	movs	r2, #0
 8005eb0:	4681      	mov	r9, r0
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	4630      	mov	r0, r6
 8005eb6:	4639      	mov	r1, r7
 8005eb8:	f7fa fd98 	bl	80009ec <__aeabi_dcmplt>
 8005ebc:	b148      	cbz	r0, 8005ed2 <_dtoa_r+0x17a>
 8005ebe:	4648      	mov	r0, r9
 8005ec0:	f7fa fab8 	bl	8000434 <__aeabi_i2d>
 8005ec4:	4632      	mov	r2, r6
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	f7fa fd86 	bl	80009d8 <__aeabi_dcmpeq>
 8005ecc:	b908      	cbnz	r0, 8005ed2 <_dtoa_r+0x17a>
 8005ece:	f109 39ff 	add.w	r9, r9, #4294967295
 8005ed2:	f1b9 0f16 	cmp.w	r9, #22
 8005ed6:	d857      	bhi.n	8005f88 <_dtoa_r+0x230>
 8005ed8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005edc:	4b5d      	ldr	r3, [pc, #372]	; (8006054 <_dtoa_r+0x2fc>)
 8005ede:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8005ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee6:	f7fa fd81 	bl	80009ec <__aeabi_dcmplt>
 8005eea:	2800      	cmp	r0, #0
 8005eec:	d04e      	beq.n	8005f8c <_dtoa_r+0x234>
 8005eee:	2300      	movs	r3, #0
 8005ef0:	f109 39ff 	add.w	r9, r9, #4294967295
 8005ef4:	930f      	str	r3, [sp, #60]	; 0x3c
 8005ef6:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ef8:	1b1c      	subs	r4, r3, r4
 8005efa:	1e63      	subs	r3, r4, #1
 8005efc:	9309      	str	r3, [sp, #36]	; 0x24
 8005efe:	bf49      	itett	mi
 8005f00:	f1c4 0301 	rsbmi	r3, r4, #1
 8005f04:	2300      	movpl	r3, #0
 8005f06:	9306      	strmi	r3, [sp, #24]
 8005f08:	2300      	movmi	r3, #0
 8005f0a:	bf54      	ite	pl
 8005f0c:	9306      	strpl	r3, [sp, #24]
 8005f0e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8005f10:	f1b9 0f00 	cmp.w	r9, #0
 8005f14:	db3c      	blt.n	8005f90 <_dtoa_r+0x238>
 8005f16:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005f18:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8005f1c:	444b      	add	r3, r9
 8005f1e:	9309      	str	r3, [sp, #36]	; 0x24
 8005f20:	2300      	movs	r3, #0
 8005f22:	930a      	str	r3, [sp, #40]	; 0x28
 8005f24:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f26:	2b09      	cmp	r3, #9
 8005f28:	d86c      	bhi.n	8006004 <_dtoa_r+0x2ac>
 8005f2a:	2b05      	cmp	r3, #5
 8005f2c:	bfc4      	itt	gt
 8005f2e:	3b04      	subgt	r3, #4
 8005f30:	9322      	strgt	r3, [sp, #136]	; 0x88
 8005f32:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005f34:	bfc8      	it	gt
 8005f36:	2400      	movgt	r4, #0
 8005f38:	f1a3 0302 	sub.w	r3, r3, #2
 8005f3c:	bfd8      	it	le
 8005f3e:	2401      	movle	r4, #1
 8005f40:	2b03      	cmp	r3, #3
 8005f42:	f200 808b 	bhi.w	800605c <_dtoa_r+0x304>
 8005f46:	e8df f003 	tbb	[pc, r3]
 8005f4a:	4f2d      	.short	0x4f2d
 8005f4c:	5b4d      	.short	0x5b4d
 8005f4e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8005f52:	441c      	add	r4, r3
 8005f54:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005f58:	2b20      	cmp	r3, #32
 8005f5a:	bfc3      	ittte	gt
 8005f5c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8005f60:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8005f64:	fa09 f303 	lslgt.w	r3, r9, r3
 8005f68:	f1c3 0320 	rsble	r3, r3, #32
 8005f6c:	bfc6      	itte	gt
 8005f6e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8005f72:	4318      	orrgt	r0, r3
 8005f74:	fa06 f003 	lslle.w	r0, r6, r3
 8005f78:	f7fa fa4c 	bl	8000414 <__aeabi_ui2d>
 8005f7c:	2301      	movs	r3, #1
 8005f7e:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8005f82:	3c01      	subs	r4, #1
 8005f84:	9313      	str	r3, [sp, #76]	; 0x4c
 8005f86:	e770      	b.n	8005e6a <_dtoa_r+0x112>
 8005f88:	2301      	movs	r3, #1
 8005f8a:	e7b3      	b.n	8005ef4 <_dtoa_r+0x19c>
 8005f8c:	900f      	str	r0, [sp, #60]	; 0x3c
 8005f8e:	e7b2      	b.n	8005ef6 <_dtoa_r+0x19e>
 8005f90:	9b06      	ldr	r3, [sp, #24]
 8005f92:	eba3 0309 	sub.w	r3, r3, r9
 8005f96:	9306      	str	r3, [sp, #24]
 8005f98:	f1c9 0300 	rsb	r3, r9, #0
 8005f9c:	930a      	str	r3, [sp, #40]	; 0x28
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	930e      	str	r3, [sp, #56]	; 0x38
 8005fa2:	e7bf      	b.n	8005f24 <_dtoa_r+0x1cc>
 8005fa4:	2300      	movs	r3, #0
 8005fa6:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fa8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	dc59      	bgt.n	8006062 <_dtoa_r+0x30a>
 8005fae:	f04f 0b01 	mov.w	fp, #1
 8005fb2:	465b      	mov	r3, fp
 8005fb4:	f8cd b008 	str.w	fp, [sp, #8]
 8005fb8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8005fbc:	2200      	movs	r2, #0
 8005fbe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005fc0:	6042      	str	r2, [r0, #4]
 8005fc2:	2204      	movs	r2, #4
 8005fc4:	f102 0614 	add.w	r6, r2, #20
 8005fc8:	429e      	cmp	r6, r3
 8005fca:	6841      	ldr	r1, [r0, #4]
 8005fcc:	d94f      	bls.n	800606e <_dtoa_r+0x316>
 8005fce:	4628      	mov	r0, r5
 8005fd0:	f000 fef8 	bl	8006dc4 <_Balloc>
 8005fd4:	9008      	str	r0, [sp, #32]
 8005fd6:	2800      	cmp	r0, #0
 8005fd8:	d14d      	bne.n	8006076 <_dtoa_r+0x31e>
 8005fda:	4602      	mov	r2, r0
 8005fdc:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005fe0:	4b1d      	ldr	r3, [pc, #116]	; (8006058 <_dtoa_r+0x300>)
 8005fe2:	e6cd      	b.n	8005d80 <_dtoa_r+0x28>
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	e7de      	b.n	8005fa6 <_dtoa_r+0x24e>
 8005fe8:	2300      	movs	r3, #0
 8005fea:	930b      	str	r3, [sp, #44]	; 0x2c
 8005fec:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005fee:	eb09 0b03 	add.w	fp, r9, r3
 8005ff2:	f10b 0301 	add.w	r3, fp, #1
 8005ff6:	2b01      	cmp	r3, #1
 8005ff8:	9302      	str	r3, [sp, #8]
 8005ffa:	bfb8      	it	lt
 8005ffc:	2301      	movlt	r3, #1
 8005ffe:	e7dd      	b.n	8005fbc <_dtoa_r+0x264>
 8006000:	2301      	movs	r3, #1
 8006002:	e7f2      	b.n	8005fea <_dtoa_r+0x292>
 8006004:	2401      	movs	r4, #1
 8006006:	2300      	movs	r3, #0
 8006008:	940b      	str	r4, [sp, #44]	; 0x2c
 800600a:	9322      	str	r3, [sp, #136]	; 0x88
 800600c:	f04f 3bff 	mov.w	fp, #4294967295
 8006010:	2200      	movs	r2, #0
 8006012:	2312      	movs	r3, #18
 8006014:	f8cd b008 	str.w	fp, [sp, #8]
 8006018:	9223      	str	r2, [sp, #140]	; 0x8c
 800601a:	e7cf      	b.n	8005fbc <_dtoa_r+0x264>
 800601c:	f3af 8000 	nop.w
 8006020:	636f4361 	.word	0x636f4361
 8006024:	3fd287a7 	.word	0x3fd287a7
 8006028:	8b60c8b3 	.word	0x8b60c8b3
 800602c:	3fc68a28 	.word	0x3fc68a28
 8006030:	509f79fb 	.word	0x509f79fb
 8006034:	3fd34413 	.word	0x3fd34413
 8006038:	08007dd1 	.word	0x08007dd1
 800603c:	08007de8 	.word	0x08007de8
 8006040:	7ff00000 	.word	0x7ff00000
 8006044:	08007dcd 	.word	0x08007dcd
 8006048:	08007dc4 	.word	0x08007dc4
 800604c:	08007da1 	.word	0x08007da1
 8006050:	3ff80000 	.word	0x3ff80000
 8006054:	08007f40 	.word	0x08007f40
 8006058:	08007e47 	.word	0x08007e47
 800605c:	2301      	movs	r3, #1
 800605e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006060:	e7d4      	b.n	800600c <_dtoa_r+0x2b4>
 8006062:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 8006066:	465b      	mov	r3, fp
 8006068:	f8cd b008 	str.w	fp, [sp, #8]
 800606c:	e7a6      	b.n	8005fbc <_dtoa_r+0x264>
 800606e:	3101      	adds	r1, #1
 8006070:	6041      	str	r1, [r0, #4]
 8006072:	0052      	lsls	r2, r2, #1
 8006074:	e7a6      	b.n	8005fc4 <_dtoa_r+0x26c>
 8006076:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006078:	9a08      	ldr	r2, [sp, #32]
 800607a:	601a      	str	r2, [r3, #0]
 800607c:	9b02      	ldr	r3, [sp, #8]
 800607e:	2b0e      	cmp	r3, #14
 8006080:	f200 80a8 	bhi.w	80061d4 <_dtoa_r+0x47c>
 8006084:	2c00      	cmp	r4, #0
 8006086:	f000 80a5 	beq.w	80061d4 <_dtoa_r+0x47c>
 800608a:	f1b9 0f00 	cmp.w	r9, #0
 800608e:	dd34      	ble.n	80060fa <_dtoa_r+0x3a2>
 8006090:	4a9a      	ldr	r2, [pc, #616]	; (80062fc <_dtoa_r+0x5a4>)
 8006092:	f009 030f 	and.w	r3, r9, #15
 8006096:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800609a:	f419 7f80 	tst.w	r9, #256	; 0x100
 800609e:	e9d3 3400 	ldrd	r3, r4, [r3]
 80060a2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80060a6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80060aa:	d016      	beq.n	80060da <_dtoa_r+0x382>
 80060ac:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80060b0:	4b93      	ldr	r3, [pc, #588]	; (8006300 <_dtoa_r+0x5a8>)
 80060b2:	2703      	movs	r7, #3
 80060b4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80060b8:	f7fa fb50 	bl	800075c <__aeabi_ddiv>
 80060bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060c0:	f004 040f 	and.w	r4, r4, #15
 80060c4:	4e8e      	ldr	r6, [pc, #568]	; (8006300 <_dtoa_r+0x5a8>)
 80060c6:	b954      	cbnz	r4, 80060de <_dtoa_r+0x386>
 80060c8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80060cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80060d0:	f7fa fb44 	bl	800075c <__aeabi_ddiv>
 80060d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80060d8:	e029      	b.n	800612e <_dtoa_r+0x3d6>
 80060da:	2702      	movs	r7, #2
 80060dc:	e7f2      	b.n	80060c4 <_dtoa_r+0x36c>
 80060de:	07e1      	lsls	r1, r4, #31
 80060e0:	d508      	bpl.n	80060f4 <_dtoa_r+0x39c>
 80060e2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80060e6:	e9d6 2300 	ldrd	r2, r3, [r6]
 80060ea:	f7fa fa0d 	bl	8000508 <__aeabi_dmul>
 80060ee:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80060f2:	3701      	adds	r7, #1
 80060f4:	1064      	asrs	r4, r4, #1
 80060f6:	3608      	adds	r6, #8
 80060f8:	e7e5      	b.n	80060c6 <_dtoa_r+0x36e>
 80060fa:	f000 80a5 	beq.w	8006248 <_dtoa_r+0x4f0>
 80060fe:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8006102:	f1c9 0400 	rsb	r4, r9, #0
 8006106:	4b7d      	ldr	r3, [pc, #500]	; (80062fc <_dtoa_r+0x5a4>)
 8006108:	f004 020f 	and.w	r2, r4, #15
 800610c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8006110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006114:	f7fa f9f8 	bl	8000508 <__aeabi_dmul>
 8006118:	2702      	movs	r7, #2
 800611a:	2300      	movs	r3, #0
 800611c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8006120:	4e77      	ldr	r6, [pc, #476]	; (8006300 <_dtoa_r+0x5a8>)
 8006122:	1124      	asrs	r4, r4, #4
 8006124:	2c00      	cmp	r4, #0
 8006126:	f040 8084 	bne.w	8006232 <_dtoa_r+0x4da>
 800612a:	2b00      	cmp	r3, #0
 800612c:	d1d2      	bne.n	80060d4 <_dtoa_r+0x37c>
 800612e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006130:	2b00      	cmp	r3, #0
 8006132:	f000 808b 	beq.w	800624c <_dtoa_r+0x4f4>
 8006136:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800613a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800613e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8006142:	2200      	movs	r2, #0
 8006144:	4b6f      	ldr	r3, [pc, #444]	; (8006304 <_dtoa_r+0x5ac>)
 8006146:	f7fa fc51 	bl	80009ec <__aeabi_dcmplt>
 800614a:	2800      	cmp	r0, #0
 800614c:	d07e      	beq.n	800624c <_dtoa_r+0x4f4>
 800614e:	9b02      	ldr	r3, [sp, #8]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d07b      	beq.n	800624c <_dtoa_r+0x4f4>
 8006154:	f1bb 0f00 	cmp.w	fp, #0
 8006158:	dd38      	ble.n	80061cc <_dtoa_r+0x474>
 800615a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800615e:	2200      	movs	r2, #0
 8006160:	4b69      	ldr	r3, [pc, #420]	; (8006308 <_dtoa_r+0x5b0>)
 8006162:	f7fa f9d1 	bl	8000508 <__aeabi_dmul>
 8006166:	465c      	mov	r4, fp
 8006168:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800616c:	f109 38ff 	add.w	r8, r9, #4294967295
 8006170:	3701      	adds	r7, #1
 8006172:	4638      	mov	r0, r7
 8006174:	f7fa f95e 	bl	8000434 <__aeabi_i2d>
 8006178:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800617c:	f7fa f9c4 	bl	8000508 <__aeabi_dmul>
 8006180:	2200      	movs	r2, #0
 8006182:	4b62      	ldr	r3, [pc, #392]	; (800630c <_dtoa_r+0x5b4>)
 8006184:	f7fa f80a 	bl	800019c <__adddf3>
 8006188:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 800618c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006190:	9611      	str	r6, [sp, #68]	; 0x44
 8006192:	2c00      	cmp	r4, #0
 8006194:	d15d      	bne.n	8006252 <_dtoa_r+0x4fa>
 8006196:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800619a:	2200      	movs	r2, #0
 800619c:	4b5c      	ldr	r3, [pc, #368]	; (8006310 <_dtoa_r+0x5b8>)
 800619e:	f7f9 fffb 	bl	8000198 <__aeabi_dsub>
 80061a2:	4602      	mov	r2, r0
 80061a4:	460b      	mov	r3, r1
 80061a6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80061aa:	4633      	mov	r3, r6
 80061ac:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061ae:	f7fa fc3b 	bl	8000a28 <__aeabi_dcmpgt>
 80061b2:	2800      	cmp	r0, #0
 80061b4:	f040 829e 	bne.w	80066f4 <_dtoa_r+0x99c>
 80061b8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80061bc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80061be:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80061c2:	f7fa fc13 	bl	80009ec <__aeabi_dcmplt>
 80061c6:	2800      	cmp	r0, #0
 80061c8:	f040 8292 	bne.w	80066f0 <_dtoa_r+0x998>
 80061cc:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80061d0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80061d4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	f2c0 8153 	blt.w	8006482 <_dtoa_r+0x72a>
 80061dc:	f1b9 0f0e 	cmp.w	r9, #14
 80061e0:	f300 814f 	bgt.w	8006482 <_dtoa_r+0x72a>
 80061e4:	4b45      	ldr	r3, [pc, #276]	; (80062fc <_dtoa_r+0x5a4>)
 80061e6:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 80061ea:	e9d3 3400 	ldrd	r3, r4, [r3]
 80061ee:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80061f2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	f280 80db 	bge.w	80063b0 <_dtoa_r+0x658>
 80061fa:	9b02      	ldr	r3, [sp, #8]
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	f300 80d7 	bgt.w	80063b0 <_dtoa_r+0x658>
 8006202:	f040 8274 	bne.w	80066ee <_dtoa_r+0x996>
 8006206:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800620a:	2200      	movs	r2, #0
 800620c:	4b40      	ldr	r3, [pc, #256]	; (8006310 <_dtoa_r+0x5b8>)
 800620e:	f7fa f97b 	bl	8000508 <__aeabi_dmul>
 8006212:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006216:	f7fa fbfd 	bl	8000a14 <__aeabi_dcmpge>
 800621a:	9c02      	ldr	r4, [sp, #8]
 800621c:	4626      	mov	r6, r4
 800621e:	2800      	cmp	r0, #0
 8006220:	f040 824a 	bne.w	80066b8 <_dtoa_r+0x960>
 8006224:	2331      	movs	r3, #49	; 0x31
 8006226:	9f08      	ldr	r7, [sp, #32]
 8006228:	f109 0901 	add.w	r9, r9, #1
 800622c:	f807 3b01 	strb.w	r3, [r7], #1
 8006230:	e246      	b.n	80066c0 <_dtoa_r+0x968>
 8006232:	07e2      	lsls	r2, r4, #31
 8006234:	d505      	bpl.n	8006242 <_dtoa_r+0x4ea>
 8006236:	e9d6 2300 	ldrd	r2, r3, [r6]
 800623a:	f7fa f965 	bl	8000508 <__aeabi_dmul>
 800623e:	2301      	movs	r3, #1
 8006240:	3701      	adds	r7, #1
 8006242:	1064      	asrs	r4, r4, #1
 8006244:	3608      	adds	r6, #8
 8006246:	e76d      	b.n	8006124 <_dtoa_r+0x3cc>
 8006248:	2702      	movs	r7, #2
 800624a:	e770      	b.n	800612e <_dtoa_r+0x3d6>
 800624c:	46c8      	mov	r8, r9
 800624e:	9c02      	ldr	r4, [sp, #8]
 8006250:	e78f      	b.n	8006172 <_dtoa_r+0x41a>
 8006252:	9908      	ldr	r1, [sp, #32]
 8006254:	4b29      	ldr	r3, [pc, #164]	; (80062fc <_dtoa_r+0x5a4>)
 8006256:	4421      	add	r1, r4
 8006258:	9112      	str	r1, [sp, #72]	; 0x48
 800625a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800625c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006260:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 8006264:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006268:	2900      	cmp	r1, #0
 800626a:	d055      	beq.n	8006318 <_dtoa_r+0x5c0>
 800626c:	2000      	movs	r0, #0
 800626e:	4929      	ldr	r1, [pc, #164]	; (8006314 <_dtoa_r+0x5bc>)
 8006270:	f7fa fa74 	bl	800075c <__aeabi_ddiv>
 8006274:	463b      	mov	r3, r7
 8006276:	4632      	mov	r2, r6
 8006278:	f7f9 ff8e 	bl	8000198 <__aeabi_dsub>
 800627c:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006280:	9f08      	ldr	r7, [sp, #32]
 8006282:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006286:	f7fa fbef 	bl	8000a68 <__aeabi_d2iz>
 800628a:	4604      	mov	r4, r0
 800628c:	f7fa f8d2 	bl	8000434 <__aeabi_i2d>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006298:	f7f9 ff7e 	bl	8000198 <__aeabi_dsub>
 800629c:	4602      	mov	r2, r0
 800629e:	460b      	mov	r3, r1
 80062a0:	3430      	adds	r4, #48	; 0x30
 80062a2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80062a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062aa:	f807 4b01 	strb.w	r4, [r7], #1
 80062ae:	f7fa fb9d 	bl	80009ec <__aeabi_dcmplt>
 80062b2:	2800      	cmp	r0, #0
 80062b4:	d174      	bne.n	80063a0 <_dtoa_r+0x648>
 80062b6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80062ba:	2000      	movs	r0, #0
 80062bc:	4911      	ldr	r1, [pc, #68]	; (8006304 <_dtoa_r+0x5ac>)
 80062be:	f7f9 ff6b 	bl	8000198 <__aeabi_dsub>
 80062c2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80062c6:	f7fa fb91 	bl	80009ec <__aeabi_dcmplt>
 80062ca:	2800      	cmp	r0, #0
 80062cc:	f040 80b6 	bne.w	800643c <_dtoa_r+0x6e4>
 80062d0:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80062d2:	429f      	cmp	r7, r3
 80062d4:	f43f af7a 	beq.w	80061cc <_dtoa_r+0x474>
 80062d8:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80062dc:	2200      	movs	r2, #0
 80062de:	4b0a      	ldr	r3, [pc, #40]	; (8006308 <_dtoa_r+0x5b0>)
 80062e0:	f7fa f912 	bl	8000508 <__aeabi_dmul>
 80062e4:	2200      	movs	r2, #0
 80062e6:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80062ea:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80062ee:	4b06      	ldr	r3, [pc, #24]	; (8006308 <_dtoa_r+0x5b0>)
 80062f0:	f7fa f90a 	bl	8000508 <__aeabi_dmul>
 80062f4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80062f8:	e7c3      	b.n	8006282 <_dtoa_r+0x52a>
 80062fa:	bf00      	nop
 80062fc:	08007f40 	.word	0x08007f40
 8006300:	08007f18 	.word	0x08007f18
 8006304:	3ff00000 	.word	0x3ff00000
 8006308:	40240000 	.word	0x40240000
 800630c:	401c0000 	.word	0x401c0000
 8006310:	40140000 	.word	0x40140000
 8006314:	3fe00000 	.word	0x3fe00000
 8006318:	4630      	mov	r0, r6
 800631a:	4639      	mov	r1, r7
 800631c:	f7fa f8f4 	bl	8000508 <__aeabi_dmul>
 8006320:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006322:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8006326:	9c08      	ldr	r4, [sp, #32]
 8006328:	9314      	str	r3, [sp, #80]	; 0x50
 800632a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800632e:	f7fa fb9b 	bl	8000a68 <__aeabi_d2iz>
 8006332:	9015      	str	r0, [sp, #84]	; 0x54
 8006334:	f7fa f87e 	bl	8000434 <__aeabi_i2d>
 8006338:	4602      	mov	r2, r0
 800633a:	460b      	mov	r3, r1
 800633c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006340:	f7f9 ff2a 	bl	8000198 <__aeabi_dsub>
 8006344:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8006346:	4606      	mov	r6, r0
 8006348:	3330      	adds	r3, #48	; 0x30
 800634a:	f804 3b01 	strb.w	r3, [r4], #1
 800634e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8006350:	460f      	mov	r7, r1
 8006352:	429c      	cmp	r4, r3
 8006354:	f04f 0200 	mov.w	r2, #0
 8006358:	d124      	bne.n	80063a4 <_dtoa_r+0x64c>
 800635a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800635e:	4bb3      	ldr	r3, [pc, #716]	; (800662c <_dtoa_r+0x8d4>)
 8006360:	f7f9 ff1c 	bl	800019c <__adddf3>
 8006364:	4602      	mov	r2, r0
 8006366:	460b      	mov	r3, r1
 8006368:	4630      	mov	r0, r6
 800636a:	4639      	mov	r1, r7
 800636c:	f7fa fb5c 	bl	8000a28 <__aeabi_dcmpgt>
 8006370:	2800      	cmp	r0, #0
 8006372:	d162      	bne.n	800643a <_dtoa_r+0x6e2>
 8006374:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8006378:	2000      	movs	r0, #0
 800637a:	49ac      	ldr	r1, [pc, #688]	; (800662c <_dtoa_r+0x8d4>)
 800637c:	f7f9 ff0c 	bl	8000198 <__aeabi_dsub>
 8006380:	4602      	mov	r2, r0
 8006382:	460b      	mov	r3, r1
 8006384:	4630      	mov	r0, r6
 8006386:	4639      	mov	r1, r7
 8006388:	f7fa fb30 	bl	80009ec <__aeabi_dcmplt>
 800638c:	2800      	cmp	r0, #0
 800638e:	f43f af1d 	beq.w	80061cc <_dtoa_r+0x474>
 8006392:	9f14      	ldr	r7, [sp, #80]	; 0x50
 8006394:	1e7b      	subs	r3, r7, #1
 8006396:	9314      	str	r3, [sp, #80]	; 0x50
 8006398:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 800639c:	2b30      	cmp	r3, #48	; 0x30
 800639e:	d0f8      	beq.n	8006392 <_dtoa_r+0x63a>
 80063a0:	46c1      	mov	r9, r8
 80063a2:	e03a      	b.n	800641a <_dtoa_r+0x6c2>
 80063a4:	4ba2      	ldr	r3, [pc, #648]	; (8006630 <_dtoa_r+0x8d8>)
 80063a6:	f7fa f8af 	bl	8000508 <__aeabi_dmul>
 80063aa:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80063ae:	e7bc      	b.n	800632a <_dtoa_r+0x5d2>
 80063b0:	9f08      	ldr	r7, [sp, #32]
 80063b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063b6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063ba:	f7fa f9cf 	bl	800075c <__aeabi_ddiv>
 80063be:	f7fa fb53 	bl	8000a68 <__aeabi_d2iz>
 80063c2:	4604      	mov	r4, r0
 80063c4:	f7fa f836 	bl	8000434 <__aeabi_i2d>
 80063c8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063cc:	f7fa f89c 	bl	8000508 <__aeabi_dmul>
 80063d0:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80063d4:	460b      	mov	r3, r1
 80063d6:	4602      	mov	r2, r0
 80063d8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80063dc:	f7f9 fedc 	bl	8000198 <__aeabi_dsub>
 80063e0:	f807 6b01 	strb.w	r6, [r7], #1
 80063e4:	9e08      	ldr	r6, [sp, #32]
 80063e6:	9b02      	ldr	r3, [sp, #8]
 80063e8:	1bbe      	subs	r6, r7, r6
 80063ea:	42b3      	cmp	r3, r6
 80063ec:	d13a      	bne.n	8006464 <_dtoa_r+0x70c>
 80063ee:	4602      	mov	r2, r0
 80063f0:	460b      	mov	r3, r1
 80063f2:	f7f9 fed3 	bl	800019c <__adddf3>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80063fe:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8006402:	f7fa fb11 	bl	8000a28 <__aeabi_dcmpgt>
 8006406:	bb58      	cbnz	r0, 8006460 <_dtoa_r+0x708>
 8006408:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800640c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006410:	f7fa fae2 	bl	80009d8 <__aeabi_dcmpeq>
 8006414:	b108      	cbz	r0, 800641a <_dtoa_r+0x6c2>
 8006416:	07e1      	lsls	r1, r4, #31
 8006418:	d422      	bmi.n	8006460 <_dtoa_r+0x708>
 800641a:	4628      	mov	r0, r5
 800641c:	4651      	mov	r1, sl
 800641e:	f000 fd11 	bl	8006e44 <_Bfree>
 8006422:	2300      	movs	r3, #0
 8006424:	703b      	strb	r3, [r7, #0]
 8006426:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8006428:	f109 0001 	add.w	r0, r9, #1
 800642c:	6018      	str	r0, [r3, #0]
 800642e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8006430:	2b00      	cmp	r3, #0
 8006432:	f43f acdf 	beq.w	8005df4 <_dtoa_r+0x9c>
 8006436:	601f      	str	r7, [r3, #0]
 8006438:	e4dc      	b.n	8005df4 <_dtoa_r+0x9c>
 800643a:	4627      	mov	r7, r4
 800643c:	463b      	mov	r3, r7
 800643e:	461f      	mov	r7, r3
 8006440:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006444:	2a39      	cmp	r2, #57	; 0x39
 8006446:	d107      	bne.n	8006458 <_dtoa_r+0x700>
 8006448:	9a08      	ldr	r2, [sp, #32]
 800644a:	429a      	cmp	r2, r3
 800644c:	d1f7      	bne.n	800643e <_dtoa_r+0x6e6>
 800644e:	2230      	movs	r2, #48	; 0x30
 8006450:	9908      	ldr	r1, [sp, #32]
 8006452:	f108 0801 	add.w	r8, r8, #1
 8006456:	700a      	strb	r2, [r1, #0]
 8006458:	781a      	ldrb	r2, [r3, #0]
 800645a:	3201      	adds	r2, #1
 800645c:	701a      	strb	r2, [r3, #0]
 800645e:	e79f      	b.n	80063a0 <_dtoa_r+0x648>
 8006460:	46c8      	mov	r8, r9
 8006462:	e7eb      	b.n	800643c <_dtoa_r+0x6e4>
 8006464:	2200      	movs	r2, #0
 8006466:	4b72      	ldr	r3, [pc, #456]	; (8006630 <_dtoa_r+0x8d8>)
 8006468:	f7fa f84e 	bl	8000508 <__aeabi_dmul>
 800646c:	4602      	mov	r2, r0
 800646e:	460b      	mov	r3, r1
 8006470:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8006474:	2200      	movs	r2, #0
 8006476:	2300      	movs	r3, #0
 8006478:	f7fa faae 	bl	80009d8 <__aeabi_dcmpeq>
 800647c:	2800      	cmp	r0, #0
 800647e:	d098      	beq.n	80063b2 <_dtoa_r+0x65a>
 8006480:	e7cb      	b.n	800641a <_dtoa_r+0x6c2>
 8006482:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8006484:	2a00      	cmp	r2, #0
 8006486:	f000 80cd 	beq.w	8006624 <_dtoa_r+0x8cc>
 800648a:	9a22      	ldr	r2, [sp, #136]	; 0x88
 800648c:	2a01      	cmp	r2, #1
 800648e:	f300 80af 	bgt.w	80065f0 <_dtoa_r+0x898>
 8006492:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006494:	2a00      	cmp	r2, #0
 8006496:	f000 80a7 	beq.w	80065e8 <_dtoa_r+0x890>
 800649a:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800649e:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80064a0:	9f06      	ldr	r7, [sp, #24]
 80064a2:	9a06      	ldr	r2, [sp, #24]
 80064a4:	2101      	movs	r1, #1
 80064a6:	441a      	add	r2, r3
 80064a8:	9206      	str	r2, [sp, #24]
 80064aa:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064ac:	4628      	mov	r0, r5
 80064ae:	441a      	add	r2, r3
 80064b0:	9209      	str	r2, [sp, #36]	; 0x24
 80064b2:	f000 fd81 	bl	8006fb8 <__i2b>
 80064b6:	4606      	mov	r6, r0
 80064b8:	2f00      	cmp	r7, #0
 80064ba:	dd0c      	ble.n	80064d6 <_dtoa_r+0x77e>
 80064bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80064be:	2b00      	cmp	r3, #0
 80064c0:	dd09      	ble.n	80064d6 <_dtoa_r+0x77e>
 80064c2:	42bb      	cmp	r3, r7
 80064c4:	bfa8      	it	ge
 80064c6:	463b      	movge	r3, r7
 80064c8:	9a06      	ldr	r2, [sp, #24]
 80064ca:	1aff      	subs	r7, r7, r3
 80064cc:	1ad2      	subs	r2, r2, r3
 80064ce:	9206      	str	r2, [sp, #24]
 80064d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064d2:	1ad3      	subs	r3, r2, r3
 80064d4:	9309      	str	r3, [sp, #36]	; 0x24
 80064d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80064d8:	b1f3      	cbz	r3, 8006518 <_dtoa_r+0x7c0>
 80064da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80064dc:	2b00      	cmp	r3, #0
 80064de:	f000 80a9 	beq.w	8006634 <_dtoa_r+0x8dc>
 80064e2:	2c00      	cmp	r4, #0
 80064e4:	dd10      	ble.n	8006508 <_dtoa_r+0x7b0>
 80064e6:	4631      	mov	r1, r6
 80064e8:	4622      	mov	r2, r4
 80064ea:	4628      	mov	r0, r5
 80064ec:	f000 fe1e 	bl	800712c <__pow5mult>
 80064f0:	4652      	mov	r2, sl
 80064f2:	4601      	mov	r1, r0
 80064f4:	4606      	mov	r6, r0
 80064f6:	4628      	mov	r0, r5
 80064f8:	f000 fd74 	bl	8006fe4 <__multiply>
 80064fc:	4680      	mov	r8, r0
 80064fe:	4651      	mov	r1, sl
 8006500:	4628      	mov	r0, r5
 8006502:	f000 fc9f 	bl	8006e44 <_Bfree>
 8006506:	46c2      	mov	sl, r8
 8006508:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800650a:	1b1a      	subs	r2, r3, r4
 800650c:	d004      	beq.n	8006518 <_dtoa_r+0x7c0>
 800650e:	4651      	mov	r1, sl
 8006510:	4628      	mov	r0, r5
 8006512:	f000 fe0b 	bl	800712c <__pow5mult>
 8006516:	4682      	mov	sl, r0
 8006518:	2101      	movs	r1, #1
 800651a:	4628      	mov	r0, r5
 800651c:	f000 fd4c 	bl	8006fb8 <__i2b>
 8006520:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006522:	4604      	mov	r4, r0
 8006524:	2b00      	cmp	r3, #0
 8006526:	f340 8087 	ble.w	8006638 <_dtoa_r+0x8e0>
 800652a:	461a      	mov	r2, r3
 800652c:	4601      	mov	r1, r0
 800652e:	4628      	mov	r0, r5
 8006530:	f000 fdfc 	bl	800712c <__pow5mult>
 8006534:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8006536:	4604      	mov	r4, r0
 8006538:	2b01      	cmp	r3, #1
 800653a:	f340 8080 	ble.w	800663e <_dtoa_r+0x8e6>
 800653e:	f04f 0800 	mov.w	r8, #0
 8006542:	6923      	ldr	r3, [r4, #16]
 8006544:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006548:	6918      	ldr	r0, [r3, #16]
 800654a:	f000 fce7 	bl	8006f1c <__hi0bits>
 800654e:	f1c0 0020 	rsb	r0, r0, #32
 8006552:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006554:	4418      	add	r0, r3
 8006556:	f010 001f 	ands.w	r0, r0, #31
 800655a:	f000 8092 	beq.w	8006682 <_dtoa_r+0x92a>
 800655e:	f1c0 0320 	rsb	r3, r0, #32
 8006562:	2b04      	cmp	r3, #4
 8006564:	f340 808a 	ble.w	800667c <_dtoa_r+0x924>
 8006568:	f1c0 001c 	rsb	r0, r0, #28
 800656c:	9b06      	ldr	r3, [sp, #24]
 800656e:	4407      	add	r7, r0
 8006570:	4403      	add	r3, r0
 8006572:	9306      	str	r3, [sp, #24]
 8006574:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006576:	4403      	add	r3, r0
 8006578:	9309      	str	r3, [sp, #36]	; 0x24
 800657a:	9b06      	ldr	r3, [sp, #24]
 800657c:	2b00      	cmp	r3, #0
 800657e:	dd05      	ble.n	800658c <_dtoa_r+0x834>
 8006580:	4651      	mov	r1, sl
 8006582:	461a      	mov	r2, r3
 8006584:	4628      	mov	r0, r5
 8006586:	f000 fe2b 	bl	80071e0 <__lshift>
 800658a:	4682      	mov	sl, r0
 800658c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800658e:	2b00      	cmp	r3, #0
 8006590:	dd05      	ble.n	800659e <_dtoa_r+0x846>
 8006592:	4621      	mov	r1, r4
 8006594:	461a      	mov	r2, r3
 8006596:	4628      	mov	r0, r5
 8006598:	f000 fe22 	bl	80071e0 <__lshift>
 800659c:	4604      	mov	r4, r0
 800659e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80065a0:	2b00      	cmp	r3, #0
 80065a2:	d070      	beq.n	8006686 <_dtoa_r+0x92e>
 80065a4:	4621      	mov	r1, r4
 80065a6:	4650      	mov	r0, sl
 80065a8:	f000 fe86 	bl	80072b8 <__mcmp>
 80065ac:	2800      	cmp	r0, #0
 80065ae:	da6a      	bge.n	8006686 <_dtoa_r+0x92e>
 80065b0:	2300      	movs	r3, #0
 80065b2:	4651      	mov	r1, sl
 80065b4:	220a      	movs	r2, #10
 80065b6:	4628      	mov	r0, r5
 80065b8:	f000 fc66 	bl	8006e88 <__multadd>
 80065bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80065be:	4682      	mov	sl, r0
 80065c0:	f109 39ff 	add.w	r9, r9, #4294967295
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	f000 8193 	beq.w	80068f0 <_dtoa_r+0xb98>
 80065ca:	4631      	mov	r1, r6
 80065cc:	2300      	movs	r3, #0
 80065ce:	220a      	movs	r2, #10
 80065d0:	4628      	mov	r0, r5
 80065d2:	f000 fc59 	bl	8006e88 <__multadd>
 80065d6:	f1bb 0f00 	cmp.w	fp, #0
 80065da:	4606      	mov	r6, r0
 80065dc:	f300 8093 	bgt.w	8006706 <_dtoa_r+0x9ae>
 80065e0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80065e2:	2b02      	cmp	r3, #2
 80065e4:	dc57      	bgt.n	8006696 <_dtoa_r+0x93e>
 80065e6:	e08e      	b.n	8006706 <_dtoa_r+0x9ae>
 80065e8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80065ea:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 80065ee:	e756      	b.n	800649e <_dtoa_r+0x746>
 80065f0:	9b02      	ldr	r3, [sp, #8]
 80065f2:	1e5c      	subs	r4, r3, #1
 80065f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80065f6:	42a3      	cmp	r3, r4
 80065f8:	bfb7      	itett	lt
 80065fa:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 80065fc:	1b1c      	subge	r4, r3, r4
 80065fe:	1ae2      	sublt	r2, r4, r3
 8006600:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8006602:	bfbe      	ittt	lt
 8006604:	940a      	strlt	r4, [sp, #40]	; 0x28
 8006606:	189b      	addlt	r3, r3, r2
 8006608:	930e      	strlt	r3, [sp, #56]	; 0x38
 800660a:	9b02      	ldr	r3, [sp, #8]
 800660c:	bfb8      	it	lt
 800660e:	2400      	movlt	r4, #0
 8006610:	2b00      	cmp	r3, #0
 8006612:	bfbb      	ittet	lt
 8006614:	9b06      	ldrlt	r3, [sp, #24]
 8006616:	9a02      	ldrlt	r2, [sp, #8]
 8006618:	9f06      	ldrge	r7, [sp, #24]
 800661a:	1a9f      	sublt	r7, r3, r2
 800661c:	bfac      	ite	ge
 800661e:	9b02      	ldrge	r3, [sp, #8]
 8006620:	2300      	movlt	r3, #0
 8006622:	e73e      	b.n	80064a2 <_dtoa_r+0x74a>
 8006624:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8006626:	9f06      	ldr	r7, [sp, #24]
 8006628:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800662a:	e745      	b.n	80064b8 <_dtoa_r+0x760>
 800662c:	3fe00000 	.word	0x3fe00000
 8006630:	40240000 	.word	0x40240000
 8006634:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8006636:	e76a      	b.n	800650e <_dtoa_r+0x7b6>
 8006638:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800663a:	2b01      	cmp	r3, #1
 800663c:	dc19      	bgt.n	8006672 <_dtoa_r+0x91a>
 800663e:	9b04      	ldr	r3, [sp, #16]
 8006640:	b9bb      	cbnz	r3, 8006672 <_dtoa_r+0x91a>
 8006642:	9b05      	ldr	r3, [sp, #20]
 8006644:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006648:	b99b      	cbnz	r3, 8006672 <_dtoa_r+0x91a>
 800664a:	9b05      	ldr	r3, [sp, #20]
 800664c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006650:	0d1b      	lsrs	r3, r3, #20
 8006652:	051b      	lsls	r3, r3, #20
 8006654:	b183      	cbz	r3, 8006678 <_dtoa_r+0x920>
 8006656:	f04f 0801 	mov.w	r8, #1
 800665a:	9b06      	ldr	r3, [sp, #24]
 800665c:	3301      	adds	r3, #1
 800665e:	9306      	str	r3, [sp, #24]
 8006660:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006662:	3301      	adds	r3, #1
 8006664:	9309      	str	r3, [sp, #36]	; 0x24
 8006666:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8006668:	2b00      	cmp	r3, #0
 800666a:	f47f af6a 	bne.w	8006542 <_dtoa_r+0x7ea>
 800666e:	2001      	movs	r0, #1
 8006670:	e76f      	b.n	8006552 <_dtoa_r+0x7fa>
 8006672:	f04f 0800 	mov.w	r8, #0
 8006676:	e7f6      	b.n	8006666 <_dtoa_r+0x90e>
 8006678:	4698      	mov	r8, r3
 800667a:	e7f4      	b.n	8006666 <_dtoa_r+0x90e>
 800667c:	f43f af7d 	beq.w	800657a <_dtoa_r+0x822>
 8006680:	4618      	mov	r0, r3
 8006682:	301c      	adds	r0, #28
 8006684:	e772      	b.n	800656c <_dtoa_r+0x814>
 8006686:	9b02      	ldr	r3, [sp, #8]
 8006688:	2b00      	cmp	r3, #0
 800668a:	dc36      	bgt.n	80066fa <_dtoa_r+0x9a2>
 800668c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800668e:	2b02      	cmp	r3, #2
 8006690:	dd33      	ble.n	80066fa <_dtoa_r+0x9a2>
 8006692:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006696:	f1bb 0f00 	cmp.w	fp, #0
 800669a:	d10d      	bne.n	80066b8 <_dtoa_r+0x960>
 800669c:	4621      	mov	r1, r4
 800669e:	465b      	mov	r3, fp
 80066a0:	2205      	movs	r2, #5
 80066a2:	4628      	mov	r0, r5
 80066a4:	f000 fbf0 	bl	8006e88 <__multadd>
 80066a8:	4601      	mov	r1, r0
 80066aa:	4604      	mov	r4, r0
 80066ac:	4650      	mov	r0, sl
 80066ae:	f000 fe03 	bl	80072b8 <__mcmp>
 80066b2:	2800      	cmp	r0, #0
 80066b4:	f73f adb6 	bgt.w	8006224 <_dtoa_r+0x4cc>
 80066b8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80066ba:	9f08      	ldr	r7, [sp, #32]
 80066bc:	ea6f 0903 	mvn.w	r9, r3
 80066c0:	f04f 0800 	mov.w	r8, #0
 80066c4:	4621      	mov	r1, r4
 80066c6:	4628      	mov	r0, r5
 80066c8:	f000 fbbc 	bl	8006e44 <_Bfree>
 80066cc:	2e00      	cmp	r6, #0
 80066ce:	f43f aea4 	beq.w	800641a <_dtoa_r+0x6c2>
 80066d2:	f1b8 0f00 	cmp.w	r8, #0
 80066d6:	d005      	beq.n	80066e4 <_dtoa_r+0x98c>
 80066d8:	45b0      	cmp	r8, r6
 80066da:	d003      	beq.n	80066e4 <_dtoa_r+0x98c>
 80066dc:	4641      	mov	r1, r8
 80066de:	4628      	mov	r0, r5
 80066e0:	f000 fbb0 	bl	8006e44 <_Bfree>
 80066e4:	4631      	mov	r1, r6
 80066e6:	4628      	mov	r0, r5
 80066e8:	f000 fbac 	bl	8006e44 <_Bfree>
 80066ec:	e695      	b.n	800641a <_dtoa_r+0x6c2>
 80066ee:	2400      	movs	r4, #0
 80066f0:	4626      	mov	r6, r4
 80066f2:	e7e1      	b.n	80066b8 <_dtoa_r+0x960>
 80066f4:	46c1      	mov	r9, r8
 80066f6:	4626      	mov	r6, r4
 80066f8:	e594      	b.n	8006224 <_dtoa_r+0x4cc>
 80066fa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80066fc:	f8dd b008 	ldr.w	fp, [sp, #8]
 8006700:	2b00      	cmp	r3, #0
 8006702:	f000 80fc 	beq.w	80068fe <_dtoa_r+0xba6>
 8006706:	2f00      	cmp	r7, #0
 8006708:	dd05      	ble.n	8006716 <_dtoa_r+0x9be>
 800670a:	4631      	mov	r1, r6
 800670c:	463a      	mov	r2, r7
 800670e:	4628      	mov	r0, r5
 8006710:	f000 fd66 	bl	80071e0 <__lshift>
 8006714:	4606      	mov	r6, r0
 8006716:	f1b8 0f00 	cmp.w	r8, #0
 800671a:	d05c      	beq.n	80067d6 <_dtoa_r+0xa7e>
 800671c:	4628      	mov	r0, r5
 800671e:	6871      	ldr	r1, [r6, #4]
 8006720:	f000 fb50 	bl	8006dc4 <_Balloc>
 8006724:	4607      	mov	r7, r0
 8006726:	b928      	cbnz	r0, 8006734 <_dtoa_r+0x9dc>
 8006728:	4602      	mov	r2, r0
 800672a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800672e:	4b7e      	ldr	r3, [pc, #504]	; (8006928 <_dtoa_r+0xbd0>)
 8006730:	f7ff bb26 	b.w	8005d80 <_dtoa_r+0x28>
 8006734:	6932      	ldr	r2, [r6, #16]
 8006736:	f106 010c 	add.w	r1, r6, #12
 800673a:	3202      	adds	r2, #2
 800673c:	0092      	lsls	r2, r2, #2
 800673e:	300c      	adds	r0, #12
 8006740:	f000 fb32 	bl	8006da8 <memcpy>
 8006744:	2201      	movs	r2, #1
 8006746:	4639      	mov	r1, r7
 8006748:	4628      	mov	r0, r5
 800674a:	f000 fd49 	bl	80071e0 <__lshift>
 800674e:	46b0      	mov	r8, r6
 8006750:	4606      	mov	r6, r0
 8006752:	9b08      	ldr	r3, [sp, #32]
 8006754:	3301      	adds	r3, #1
 8006756:	9302      	str	r3, [sp, #8]
 8006758:	9b08      	ldr	r3, [sp, #32]
 800675a:	445b      	add	r3, fp
 800675c:	930a      	str	r3, [sp, #40]	; 0x28
 800675e:	9b04      	ldr	r3, [sp, #16]
 8006760:	f003 0301 	and.w	r3, r3, #1
 8006764:	9309      	str	r3, [sp, #36]	; 0x24
 8006766:	9b02      	ldr	r3, [sp, #8]
 8006768:	4621      	mov	r1, r4
 800676a:	4650      	mov	r0, sl
 800676c:	f103 3bff 	add.w	fp, r3, #4294967295
 8006770:	f7ff fa62 	bl	8005c38 <quorem>
 8006774:	4603      	mov	r3, r0
 8006776:	4641      	mov	r1, r8
 8006778:	3330      	adds	r3, #48	; 0x30
 800677a:	9004      	str	r0, [sp, #16]
 800677c:	4650      	mov	r0, sl
 800677e:	930b      	str	r3, [sp, #44]	; 0x2c
 8006780:	f000 fd9a 	bl	80072b8 <__mcmp>
 8006784:	4632      	mov	r2, r6
 8006786:	9006      	str	r0, [sp, #24]
 8006788:	4621      	mov	r1, r4
 800678a:	4628      	mov	r0, r5
 800678c:	f000 fdb0 	bl	80072f0 <__mdiff>
 8006790:	68c2      	ldr	r2, [r0, #12]
 8006792:	4607      	mov	r7, r0
 8006794:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006796:	bb02      	cbnz	r2, 80067da <_dtoa_r+0xa82>
 8006798:	4601      	mov	r1, r0
 800679a:	4650      	mov	r0, sl
 800679c:	f000 fd8c 	bl	80072b8 <__mcmp>
 80067a0:	4602      	mov	r2, r0
 80067a2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067a4:	4639      	mov	r1, r7
 80067a6:	4628      	mov	r0, r5
 80067a8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80067ac:	f000 fb4a 	bl	8006e44 <_Bfree>
 80067b0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80067b2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80067b4:	9f02      	ldr	r7, [sp, #8]
 80067b6:	ea43 0102 	orr.w	r1, r3, r2
 80067ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80067bc:	430b      	orrs	r3, r1
 80067be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80067c0:	d10d      	bne.n	80067de <_dtoa_r+0xa86>
 80067c2:	2b39      	cmp	r3, #57	; 0x39
 80067c4:	d027      	beq.n	8006816 <_dtoa_r+0xabe>
 80067c6:	9a06      	ldr	r2, [sp, #24]
 80067c8:	2a00      	cmp	r2, #0
 80067ca:	dd01      	ble.n	80067d0 <_dtoa_r+0xa78>
 80067cc:	9b04      	ldr	r3, [sp, #16]
 80067ce:	3331      	adds	r3, #49	; 0x31
 80067d0:	f88b 3000 	strb.w	r3, [fp]
 80067d4:	e776      	b.n	80066c4 <_dtoa_r+0x96c>
 80067d6:	4630      	mov	r0, r6
 80067d8:	e7b9      	b.n	800674e <_dtoa_r+0x9f6>
 80067da:	2201      	movs	r2, #1
 80067dc:	e7e2      	b.n	80067a4 <_dtoa_r+0xa4c>
 80067de:	9906      	ldr	r1, [sp, #24]
 80067e0:	2900      	cmp	r1, #0
 80067e2:	db04      	blt.n	80067ee <_dtoa_r+0xa96>
 80067e4:	9822      	ldr	r0, [sp, #136]	; 0x88
 80067e6:	4301      	orrs	r1, r0
 80067e8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067ea:	4301      	orrs	r1, r0
 80067ec:	d120      	bne.n	8006830 <_dtoa_r+0xad8>
 80067ee:	2a00      	cmp	r2, #0
 80067f0:	ddee      	ble.n	80067d0 <_dtoa_r+0xa78>
 80067f2:	4651      	mov	r1, sl
 80067f4:	2201      	movs	r2, #1
 80067f6:	4628      	mov	r0, r5
 80067f8:	9302      	str	r3, [sp, #8]
 80067fa:	f000 fcf1 	bl	80071e0 <__lshift>
 80067fe:	4621      	mov	r1, r4
 8006800:	4682      	mov	sl, r0
 8006802:	f000 fd59 	bl	80072b8 <__mcmp>
 8006806:	2800      	cmp	r0, #0
 8006808:	9b02      	ldr	r3, [sp, #8]
 800680a:	dc02      	bgt.n	8006812 <_dtoa_r+0xaba>
 800680c:	d1e0      	bne.n	80067d0 <_dtoa_r+0xa78>
 800680e:	07da      	lsls	r2, r3, #31
 8006810:	d5de      	bpl.n	80067d0 <_dtoa_r+0xa78>
 8006812:	2b39      	cmp	r3, #57	; 0x39
 8006814:	d1da      	bne.n	80067cc <_dtoa_r+0xa74>
 8006816:	2339      	movs	r3, #57	; 0x39
 8006818:	f88b 3000 	strb.w	r3, [fp]
 800681c:	463b      	mov	r3, r7
 800681e:	461f      	mov	r7, r3
 8006820:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8006824:	3b01      	subs	r3, #1
 8006826:	2a39      	cmp	r2, #57	; 0x39
 8006828:	d050      	beq.n	80068cc <_dtoa_r+0xb74>
 800682a:	3201      	adds	r2, #1
 800682c:	701a      	strb	r2, [r3, #0]
 800682e:	e749      	b.n	80066c4 <_dtoa_r+0x96c>
 8006830:	2a00      	cmp	r2, #0
 8006832:	dd03      	ble.n	800683c <_dtoa_r+0xae4>
 8006834:	2b39      	cmp	r3, #57	; 0x39
 8006836:	d0ee      	beq.n	8006816 <_dtoa_r+0xabe>
 8006838:	3301      	adds	r3, #1
 800683a:	e7c9      	b.n	80067d0 <_dtoa_r+0xa78>
 800683c:	9a02      	ldr	r2, [sp, #8]
 800683e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8006840:	f802 3c01 	strb.w	r3, [r2, #-1]
 8006844:	428a      	cmp	r2, r1
 8006846:	d02a      	beq.n	800689e <_dtoa_r+0xb46>
 8006848:	4651      	mov	r1, sl
 800684a:	2300      	movs	r3, #0
 800684c:	220a      	movs	r2, #10
 800684e:	4628      	mov	r0, r5
 8006850:	f000 fb1a 	bl	8006e88 <__multadd>
 8006854:	45b0      	cmp	r8, r6
 8006856:	4682      	mov	sl, r0
 8006858:	f04f 0300 	mov.w	r3, #0
 800685c:	f04f 020a 	mov.w	r2, #10
 8006860:	4641      	mov	r1, r8
 8006862:	4628      	mov	r0, r5
 8006864:	d107      	bne.n	8006876 <_dtoa_r+0xb1e>
 8006866:	f000 fb0f 	bl	8006e88 <__multadd>
 800686a:	4680      	mov	r8, r0
 800686c:	4606      	mov	r6, r0
 800686e:	9b02      	ldr	r3, [sp, #8]
 8006870:	3301      	adds	r3, #1
 8006872:	9302      	str	r3, [sp, #8]
 8006874:	e777      	b.n	8006766 <_dtoa_r+0xa0e>
 8006876:	f000 fb07 	bl	8006e88 <__multadd>
 800687a:	4631      	mov	r1, r6
 800687c:	4680      	mov	r8, r0
 800687e:	2300      	movs	r3, #0
 8006880:	220a      	movs	r2, #10
 8006882:	4628      	mov	r0, r5
 8006884:	f000 fb00 	bl	8006e88 <__multadd>
 8006888:	4606      	mov	r6, r0
 800688a:	e7f0      	b.n	800686e <_dtoa_r+0xb16>
 800688c:	f1bb 0f00 	cmp.w	fp, #0
 8006890:	bfcc      	ite	gt
 8006892:	465f      	movgt	r7, fp
 8006894:	2701      	movle	r7, #1
 8006896:	f04f 0800 	mov.w	r8, #0
 800689a:	9a08      	ldr	r2, [sp, #32]
 800689c:	4417      	add	r7, r2
 800689e:	4651      	mov	r1, sl
 80068a0:	2201      	movs	r2, #1
 80068a2:	4628      	mov	r0, r5
 80068a4:	9302      	str	r3, [sp, #8]
 80068a6:	f000 fc9b 	bl	80071e0 <__lshift>
 80068aa:	4621      	mov	r1, r4
 80068ac:	4682      	mov	sl, r0
 80068ae:	f000 fd03 	bl	80072b8 <__mcmp>
 80068b2:	2800      	cmp	r0, #0
 80068b4:	dcb2      	bgt.n	800681c <_dtoa_r+0xac4>
 80068b6:	d102      	bne.n	80068be <_dtoa_r+0xb66>
 80068b8:	9b02      	ldr	r3, [sp, #8]
 80068ba:	07db      	lsls	r3, r3, #31
 80068bc:	d4ae      	bmi.n	800681c <_dtoa_r+0xac4>
 80068be:	463b      	mov	r3, r7
 80068c0:	461f      	mov	r7, r3
 80068c2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80068c6:	2a30      	cmp	r2, #48	; 0x30
 80068c8:	d0fa      	beq.n	80068c0 <_dtoa_r+0xb68>
 80068ca:	e6fb      	b.n	80066c4 <_dtoa_r+0x96c>
 80068cc:	9a08      	ldr	r2, [sp, #32]
 80068ce:	429a      	cmp	r2, r3
 80068d0:	d1a5      	bne.n	800681e <_dtoa_r+0xac6>
 80068d2:	2331      	movs	r3, #49	; 0x31
 80068d4:	f109 0901 	add.w	r9, r9, #1
 80068d8:	7013      	strb	r3, [r2, #0]
 80068da:	e6f3      	b.n	80066c4 <_dtoa_r+0x96c>
 80068dc:	4b13      	ldr	r3, [pc, #76]	; (800692c <_dtoa_r+0xbd4>)
 80068de:	f7ff baa7 	b.w	8005e30 <_dtoa_r+0xd8>
 80068e2:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80068e4:	2b00      	cmp	r3, #0
 80068e6:	f47f aa80 	bne.w	8005dea <_dtoa_r+0x92>
 80068ea:	4b11      	ldr	r3, [pc, #68]	; (8006930 <_dtoa_r+0xbd8>)
 80068ec:	f7ff baa0 	b.w	8005e30 <_dtoa_r+0xd8>
 80068f0:	f1bb 0f00 	cmp.w	fp, #0
 80068f4:	dc03      	bgt.n	80068fe <_dtoa_r+0xba6>
 80068f6:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80068f8:	2b02      	cmp	r3, #2
 80068fa:	f73f aecc 	bgt.w	8006696 <_dtoa_r+0x93e>
 80068fe:	9f08      	ldr	r7, [sp, #32]
 8006900:	4621      	mov	r1, r4
 8006902:	4650      	mov	r0, sl
 8006904:	f7ff f998 	bl	8005c38 <quorem>
 8006908:	9a08      	ldr	r2, [sp, #32]
 800690a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800690e:	f807 3b01 	strb.w	r3, [r7], #1
 8006912:	1aba      	subs	r2, r7, r2
 8006914:	4593      	cmp	fp, r2
 8006916:	ddb9      	ble.n	800688c <_dtoa_r+0xb34>
 8006918:	4651      	mov	r1, sl
 800691a:	2300      	movs	r3, #0
 800691c:	220a      	movs	r2, #10
 800691e:	4628      	mov	r0, r5
 8006920:	f000 fab2 	bl	8006e88 <__multadd>
 8006924:	4682      	mov	sl, r0
 8006926:	e7eb      	b.n	8006900 <_dtoa_r+0xba8>
 8006928:	08007e47 	.word	0x08007e47
 800692c:	08007da0 	.word	0x08007da0
 8006930:	08007dc4 	.word	0x08007dc4

08006934 <__sflush_r>:
 8006934:	898a      	ldrh	r2, [r1, #12]
 8006936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800693a:	4605      	mov	r5, r0
 800693c:	0710      	lsls	r0, r2, #28
 800693e:	460c      	mov	r4, r1
 8006940:	d458      	bmi.n	80069f4 <__sflush_r+0xc0>
 8006942:	684b      	ldr	r3, [r1, #4]
 8006944:	2b00      	cmp	r3, #0
 8006946:	dc05      	bgt.n	8006954 <__sflush_r+0x20>
 8006948:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800694a:	2b00      	cmp	r3, #0
 800694c:	dc02      	bgt.n	8006954 <__sflush_r+0x20>
 800694e:	2000      	movs	r0, #0
 8006950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006956:	2e00      	cmp	r6, #0
 8006958:	d0f9      	beq.n	800694e <__sflush_r+0x1a>
 800695a:	2300      	movs	r3, #0
 800695c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006960:	682f      	ldr	r7, [r5, #0]
 8006962:	602b      	str	r3, [r5, #0]
 8006964:	d032      	beq.n	80069cc <__sflush_r+0x98>
 8006966:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006968:	89a3      	ldrh	r3, [r4, #12]
 800696a:	075a      	lsls	r2, r3, #29
 800696c:	d505      	bpl.n	800697a <__sflush_r+0x46>
 800696e:	6863      	ldr	r3, [r4, #4]
 8006970:	1ac0      	subs	r0, r0, r3
 8006972:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006974:	b10b      	cbz	r3, 800697a <__sflush_r+0x46>
 8006976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006978:	1ac0      	subs	r0, r0, r3
 800697a:	2300      	movs	r3, #0
 800697c:	4602      	mov	r2, r0
 800697e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006980:	4628      	mov	r0, r5
 8006982:	6a21      	ldr	r1, [r4, #32]
 8006984:	47b0      	blx	r6
 8006986:	1c43      	adds	r3, r0, #1
 8006988:	89a3      	ldrh	r3, [r4, #12]
 800698a:	d106      	bne.n	800699a <__sflush_r+0x66>
 800698c:	6829      	ldr	r1, [r5, #0]
 800698e:	291d      	cmp	r1, #29
 8006990:	d82c      	bhi.n	80069ec <__sflush_r+0xb8>
 8006992:	4a2a      	ldr	r2, [pc, #168]	; (8006a3c <__sflush_r+0x108>)
 8006994:	40ca      	lsrs	r2, r1
 8006996:	07d6      	lsls	r6, r2, #31
 8006998:	d528      	bpl.n	80069ec <__sflush_r+0xb8>
 800699a:	2200      	movs	r2, #0
 800699c:	6062      	str	r2, [r4, #4]
 800699e:	6922      	ldr	r2, [r4, #16]
 80069a0:	04d9      	lsls	r1, r3, #19
 80069a2:	6022      	str	r2, [r4, #0]
 80069a4:	d504      	bpl.n	80069b0 <__sflush_r+0x7c>
 80069a6:	1c42      	adds	r2, r0, #1
 80069a8:	d101      	bne.n	80069ae <__sflush_r+0x7a>
 80069aa:	682b      	ldr	r3, [r5, #0]
 80069ac:	b903      	cbnz	r3, 80069b0 <__sflush_r+0x7c>
 80069ae:	6560      	str	r0, [r4, #84]	; 0x54
 80069b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069b2:	602f      	str	r7, [r5, #0]
 80069b4:	2900      	cmp	r1, #0
 80069b6:	d0ca      	beq.n	800694e <__sflush_r+0x1a>
 80069b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069bc:	4299      	cmp	r1, r3
 80069be:	d002      	beq.n	80069c6 <__sflush_r+0x92>
 80069c0:	4628      	mov	r0, r5
 80069c2:	f000 fd8f 	bl	80074e4 <_free_r>
 80069c6:	2000      	movs	r0, #0
 80069c8:	6360      	str	r0, [r4, #52]	; 0x34
 80069ca:	e7c1      	b.n	8006950 <__sflush_r+0x1c>
 80069cc:	6a21      	ldr	r1, [r4, #32]
 80069ce:	2301      	movs	r3, #1
 80069d0:	4628      	mov	r0, r5
 80069d2:	47b0      	blx	r6
 80069d4:	1c41      	adds	r1, r0, #1
 80069d6:	d1c7      	bne.n	8006968 <__sflush_r+0x34>
 80069d8:	682b      	ldr	r3, [r5, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d0c4      	beq.n	8006968 <__sflush_r+0x34>
 80069de:	2b1d      	cmp	r3, #29
 80069e0:	d001      	beq.n	80069e6 <__sflush_r+0xb2>
 80069e2:	2b16      	cmp	r3, #22
 80069e4:	d101      	bne.n	80069ea <__sflush_r+0xb6>
 80069e6:	602f      	str	r7, [r5, #0]
 80069e8:	e7b1      	b.n	800694e <__sflush_r+0x1a>
 80069ea:	89a3      	ldrh	r3, [r4, #12]
 80069ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80069f0:	81a3      	strh	r3, [r4, #12]
 80069f2:	e7ad      	b.n	8006950 <__sflush_r+0x1c>
 80069f4:	690f      	ldr	r7, [r1, #16]
 80069f6:	2f00      	cmp	r7, #0
 80069f8:	d0a9      	beq.n	800694e <__sflush_r+0x1a>
 80069fa:	0793      	lsls	r3, r2, #30
 80069fc:	bf18      	it	ne
 80069fe:	2300      	movne	r3, #0
 8006a00:	680e      	ldr	r6, [r1, #0]
 8006a02:	bf08      	it	eq
 8006a04:	694b      	ldreq	r3, [r1, #20]
 8006a06:	eba6 0807 	sub.w	r8, r6, r7
 8006a0a:	600f      	str	r7, [r1, #0]
 8006a0c:	608b      	str	r3, [r1, #8]
 8006a0e:	f1b8 0f00 	cmp.w	r8, #0
 8006a12:	dd9c      	ble.n	800694e <__sflush_r+0x1a>
 8006a14:	4643      	mov	r3, r8
 8006a16:	463a      	mov	r2, r7
 8006a18:	4628      	mov	r0, r5
 8006a1a:	6a21      	ldr	r1, [r4, #32]
 8006a1c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006a1e:	47b0      	blx	r6
 8006a20:	2800      	cmp	r0, #0
 8006a22:	dc06      	bgt.n	8006a32 <__sflush_r+0xfe>
 8006a24:	89a3      	ldrh	r3, [r4, #12]
 8006a26:	f04f 30ff 	mov.w	r0, #4294967295
 8006a2a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a2e:	81a3      	strh	r3, [r4, #12]
 8006a30:	e78e      	b.n	8006950 <__sflush_r+0x1c>
 8006a32:	4407      	add	r7, r0
 8006a34:	eba8 0800 	sub.w	r8, r8, r0
 8006a38:	e7e9      	b.n	8006a0e <__sflush_r+0xda>
 8006a3a:	bf00      	nop
 8006a3c:	20400001 	.word	0x20400001

08006a40 <_fflush_r>:
 8006a40:	b538      	push	{r3, r4, r5, lr}
 8006a42:	690b      	ldr	r3, [r1, #16]
 8006a44:	4605      	mov	r5, r0
 8006a46:	460c      	mov	r4, r1
 8006a48:	b913      	cbnz	r3, 8006a50 <_fflush_r+0x10>
 8006a4a:	2500      	movs	r5, #0
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	bd38      	pop	{r3, r4, r5, pc}
 8006a50:	b118      	cbz	r0, 8006a5a <_fflush_r+0x1a>
 8006a52:	6983      	ldr	r3, [r0, #24]
 8006a54:	b90b      	cbnz	r3, 8006a5a <_fflush_r+0x1a>
 8006a56:	f000 f887 	bl	8006b68 <__sinit>
 8006a5a:	4b14      	ldr	r3, [pc, #80]	; (8006aac <_fflush_r+0x6c>)
 8006a5c:	429c      	cmp	r4, r3
 8006a5e:	d11b      	bne.n	8006a98 <_fflush_r+0x58>
 8006a60:	686c      	ldr	r4, [r5, #4]
 8006a62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d0ef      	beq.n	8006a4a <_fflush_r+0xa>
 8006a6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006a6c:	07d0      	lsls	r0, r2, #31
 8006a6e:	d404      	bmi.n	8006a7a <_fflush_r+0x3a>
 8006a70:	0599      	lsls	r1, r3, #22
 8006a72:	d402      	bmi.n	8006a7a <_fflush_r+0x3a>
 8006a74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a76:	f000 f91a 	bl	8006cae <__retarget_lock_acquire_recursive>
 8006a7a:	4628      	mov	r0, r5
 8006a7c:	4621      	mov	r1, r4
 8006a7e:	f7ff ff59 	bl	8006934 <__sflush_r>
 8006a82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006a84:	4605      	mov	r5, r0
 8006a86:	07da      	lsls	r2, r3, #31
 8006a88:	d4e0      	bmi.n	8006a4c <_fflush_r+0xc>
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	059b      	lsls	r3, r3, #22
 8006a8e:	d4dd      	bmi.n	8006a4c <_fflush_r+0xc>
 8006a90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006a92:	f000 f90d 	bl	8006cb0 <__retarget_lock_release_recursive>
 8006a96:	e7d9      	b.n	8006a4c <_fflush_r+0xc>
 8006a98:	4b05      	ldr	r3, [pc, #20]	; (8006ab0 <_fflush_r+0x70>)
 8006a9a:	429c      	cmp	r4, r3
 8006a9c:	d101      	bne.n	8006aa2 <_fflush_r+0x62>
 8006a9e:	68ac      	ldr	r4, [r5, #8]
 8006aa0:	e7df      	b.n	8006a62 <_fflush_r+0x22>
 8006aa2:	4b04      	ldr	r3, [pc, #16]	; (8006ab4 <_fflush_r+0x74>)
 8006aa4:	429c      	cmp	r4, r3
 8006aa6:	bf08      	it	eq
 8006aa8:	68ec      	ldreq	r4, [r5, #12]
 8006aaa:	e7da      	b.n	8006a62 <_fflush_r+0x22>
 8006aac:	08007e78 	.word	0x08007e78
 8006ab0:	08007e98 	.word	0x08007e98
 8006ab4:	08007e58 	.word	0x08007e58

08006ab8 <std>:
 8006ab8:	2300      	movs	r3, #0
 8006aba:	b510      	push	{r4, lr}
 8006abc:	4604      	mov	r4, r0
 8006abe:	e9c0 3300 	strd	r3, r3, [r0]
 8006ac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006ac6:	6083      	str	r3, [r0, #8]
 8006ac8:	8181      	strh	r1, [r0, #12]
 8006aca:	6643      	str	r3, [r0, #100]	; 0x64
 8006acc:	81c2      	strh	r2, [r0, #14]
 8006ace:	6183      	str	r3, [r0, #24]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	2208      	movs	r2, #8
 8006ad4:	305c      	adds	r0, #92	; 0x5c
 8006ad6:	f7fe fb69 	bl	80051ac <memset>
 8006ada:	4b05      	ldr	r3, [pc, #20]	; (8006af0 <std+0x38>)
 8006adc:	6224      	str	r4, [r4, #32]
 8006ade:	6263      	str	r3, [r4, #36]	; 0x24
 8006ae0:	4b04      	ldr	r3, [pc, #16]	; (8006af4 <std+0x3c>)
 8006ae2:	62a3      	str	r3, [r4, #40]	; 0x28
 8006ae4:	4b04      	ldr	r3, [pc, #16]	; (8006af8 <std+0x40>)
 8006ae6:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006ae8:	4b04      	ldr	r3, [pc, #16]	; (8006afc <std+0x44>)
 8006aea:	6323      	str	r3, [r4, #48]	; 0x30
 8006aec:	bd10      	pop	{r4, pc}
 8006aee:	bf00      	nop
 8006af0:	08007901 	.word	0x08007901
 8006af4:	08007923 	.word	0x08007923
 8006af8:	0800795b 	.word	0x0800795b
 8006afc:	0800797f 	.word	0x0800797f

08006b00 <_cleanup_r>:
 8006b00:	4901      	ldr	r1, [pc, #4]	; (8006b08 <_cleanup_r+0x8>)
 8006b02:	f000 b8af 	b.w	8006c64 <_fwalk_reent>
 8006b06:	bf00      	nop
 8006b08:	08006a41 	.word	0x08006a41

08006b0c <__sfmoreglue>:
 8006b0c:	b570      	push	{r4, r5, r6, lr}
 8006b0e:	2568      	movs	r5, #104	; 0x68
 8006b10:	1e4a      	subs	r2, r1, #1
 8006b12:	4355      	muls	r5, r2
 8006b14:	460e      	mov	r6, r1
 8006b16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006b1a:	f000 fd2f 	bl	800757c <_malloc_r>
 8006b1e:	4604      	mov	r4, r0
 8006b20:	b140      	cbz	r0, 8006b34 <__sfmoreglue+0x28>
 8006b22:	2100      	movs	r1, #0
 8006b24:	e9c0 1600 	strd	r1, r6, [r0]
 8006b28:	300c      	adds	r0, #12
 8006b2a:	60a0      	str	r0, [r4, #8]
 8006b2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006b30:	f7fe fb3c 	bl	80051ac <memset>
 8006b34:	4620      	mov	r0, r4
 8006b36:	bd70      	pop	{r4, r5, r6, pc}

08006b38 <__sfp_lock_acquire>:
 8006b38:	4801      	ldr	r0, [pc, #4]	; (8006b40 <__sfp_lock_acquire+0x8>)
 8006b3a:	f000 b8b8 	b.w	8006cae <__retarget_lock_acquire_recursive>
 8006b3e:	bf00      	nop
 8006b40:	200003dc 	.word	0x200003dc

08006b44 <__sfp_lock_release>:
 8006b44:	4801      	ldr	r0, [pc, #4]	; (8006b4c <__sfp_lock_release+0x8>)
 8006b46:	f000 b8b3 	b.w	8006cb0 <__retarget_lock_release_recursive>
 8006b4a:	bf00      	nop
 8006b4c:	200003dc 	.word	0x200003dc

08006b50 <__sinit_lock_acquire>:
 8006b50:	4801      	ldr	r0, [pc, #4]	; (8006b58 <__sinit_lock_acquire+0x8>)
 8006b52:	f000 b8ac 	b.w	8006cae <__retarget_lock_acquire_recursive>
 8006b56:	bf00      	nop
 8006b58:	200003d7 	.word	0x200003d7

08006b5c <__sinit_lock_release>:
 8006b5c:	4801      	ldr	r0, [pc, #4]	; (8006b64 <__sinit_lock_release+0x8>)
 8006b5e:	f000 b8a7 	b.w	8006cb0 <__retarget_lock_release_recursive>
 8006b62:	bf00      	nop
 8006b64:	200003d7 	.word	0x200003d7

08006b68 <__sinit>:
 8006b68:	b510      	push	{r4, lr}
 8006b6a:	4604      	mov	r4, r0
 8006b6c:	f7ff fff0 	bl	8006b50 <__sinit_lock_acquire>
 8006b70:	69a3      	ldr	r3, [r4, #24]
 8006b72:	b11b      	cbz	r3, 8006b7c <__sinit+0x14>
 8006b74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b78:	f7ff bff0 	b.w	8006b5c <__sinit_lock_release>
 8006b7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006b80:	6523      	str	r3, [r4, #80]	; 0x50
 8006b82:	4b13      	ldr	r3, [pc, #76]	; (8006bd0 <__sinit+0x68>)
 8006b84:	4a13      	ldr	r2, [pc, #76]	; (8006bd4 <__sinit+0x6c>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	62a2      	str	r2, [r4, #40]	; 0x28
 8006b8a:	42a3      	cmp	r3, r4
 8006b8c:	bf08      	it	eq
 8006b8e:	2301      	moveq	r3, #1
 8006b90:	4620      	mov	r0, r4
 8006b92:	bf08      	it	eq
 8006b94:	61a3      	streq	r3, [r4, #24]
 8006b96:	f000 f81f 	bl	8006bd8 <__sfp>
 8006b9a:	6060      	str	r0, [r4, #4]
 8006b9c:	4620      	mov	r0, r4
 8006b9e:	f000 f81b 	bl	8006bd8 <__sfp>
 8006ba2:	60a0      	str	r0, [r4, #8]
 8006ba4:	4620      	mov	r0, r4
 8006ba6:	f000 f817 	bl	8006bd8 <__sfp>
 8006baa:	2200      	movs	r2, #0
 8006bac:	2104      	movs	r1, #4
 8006bae:	60e0      	str	r0, [r4, #12]
 8006bb0:	6860      	ldr	r0, [r4, #4]
 8006bb2:	f7ff ff81 	bl	8006ab8 <std>
 8006bb6:	2201      	movs	r2, #1
 8006bb8:	2109      	movs	r1, #9
 8006bba:	68a0      	ldr	r0, [r4, #8]
 8006bbc:	f7ff ff7c 	bl	8006ab8 <std>
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	2112      	movs	r1, #18
 8006bc4:	68e0      	ldr	r0, [r4, #12]
 8006bc6:	f7ff ff77 	bl	8006ab8 <std>
 8006bca:	2301      	movs	r3, #1
 8006bcc:	61a3      	str	r3, [r4, #24]
 8006bce:	e7d1      	b.n	8006b74 <__sinit+0xc>
 8006bd0:	08007d8c 	.word	0x08007d8c
 8006bd4:	08006b01 	.word	0x08006b01

08006bd8 <__sfp>:
 8006bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006bda:	4607      	mov	r7, r0
 8006bdc:	f7ff ffac 	bl	8006b38 <__sfp_lock_acquire>
 8006be0:	4b1e      	ldr	r3, [pc, #120]	; (8006c5c <__sfp+0x84>)
 8006be2:	681e      	ldr	r6, [r3, #0]
 8006be4:	69b3      	ldr	r3, [r6, #24]
 8006be6:	b913      	cbnz	r3, 8006bee <__sfp+0x16>
 8006be8:	4630      	mov	r0, r6
 8006bea:	f7ff ffbd 	bl	8006b68 <__sinit>
 8006bee:	3648      	adds	r6, #72	; 0x48
 8006bf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006bf4:	3b01      	subs	r3, #1
 8006bf6:	d503      	bpl.n	8006c00 <__sfp+0x28>
 8006bf8:	6833      	ldr	r3, [r6, #0]
 8006bfa:	b30b      	cbz	r3, 8006c40 <__sfp+0x68>
 8006bfc:	6836      	ldr	r6, [r6, #0]
 8006bfe:	e7f7      	b.n	8006bf0 <__sfp+0x18>
 8006c00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006c04:	b9d5      	cbnz	r5, 8006c3c <__sfp+0x64>
 8006c06:	4b16      	ldr	r3, [pc, #88]	; (8006c60 <__sfp+0x88>)
 8006c08:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006c0c:	60e3      	str	r3, [r4, #12]
 8006c0e:	6665      	str	r5, [r4, #100]	; 0x64
 8006c10:	f000 f84c 	bl	8006cac <__retarget_lock_init_recursive>
 8006c14:	f7ff ff96 	bl	8006b44 <__sfp_lock_release>
 8006c18:	2208      	movs	r2, #8
 8006c1a:	4629      	mov	r1, r5
 8006c1c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006c20:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006c24:	6025      	str	r5, [r4, #0]
 8006c26:	61a5      	str	r5, [r4, #24]
 8006c28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006c2c:	f7fe fabe 	bl	80051ac <memset>
 8006c30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006c34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006c38:	4620      	mov	r0, r4
 8006c3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006c3c:	3468      	adds	r4, #104	; 0x68
 8006c3e:	e7d9      	b.n	8006bf4 <__sfp+0x1c>
 8006c40:	2104      	movs	r1, #4
 8006c42:	4638      	mov	r0, r7
 8006c44:	f7ff ff62 	bl	8006b0c <__sfmoreglue>
 8006c48:	4604      	mov	r4, r0
 8006c4a:	6030      	str	r0, [r6, #0]
 8006c4c:	2800      	cmp	r0, #0
 8006c4e:	d1d5      	bne.n	8006bfc <__sfp+0x24>
 8006c50:	f7ff ff78 	bl	8006b44 <__sfp_lock_release>
 8006c54:	230c      	movs	r3, #12
 8006c56:	603b      	str	r3, [r7, #0]
 8006c58:	e7ee      	b.n	8006c38 <__sfp+0x60>
 8006c5a:	bf00      	nop
 8006c5c:	08007d8c 	.word	0x08007d8c
 8006c60:	ffff0001 	.word	0xffff0001

08006c64 <_fwalk_reent>:
 8006c64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006c68:	4606      	mov	r6, r0
 8006c6a:	4688      	mov	r8, r1
 8006c6c:	2700      	movs	r7, #0
 8006c6e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006c72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006c76:	f1b9 0901 	subs.w	r9, r9, #1
 8006c7a:	d505      	bpl.n	8006c88 <_fwalk_reent+0x24>
 8006c7c:	6824      	ldr	r4, [r4, #0]
 8006c7e:	2c00      	cmp	r4, #0
 8006c80:	d1f7      	bne.n	8006c72 <_fwalk_reent+0xe>
 8006c82:	4638      	mov	r0, r7
 8006c84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006c88:	89ab      	ldrh	r3, [r5, #12]
 8006c8a:	2b01      	cmp	r3, #1
 8006c8c:	d907      	bls.n	8006c9e <_fwalk_reent+0x3a>
 8006c8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006c92:	3301      	adds	r3, #1
 8006c94:	d003      	beq.n	8006c9e <_fwalk_reent+0x3a>
 8006c96:	4629      	mov	r1, r5
 8006c98:	4630      	mov	r0, r6
 8006c9a:	47c0      	blx	r8
 8006c9c:	4307      	orrs	r7, r0
 8006c9e:	3568      	adds	r5, #104	; 0x68
 8006ca0:	e7e9      	b.n	8006c76 <_fwalk_reent+0x12>
	...

08006ca4 <_localeconv_r>:
 8006ca4:	4800      	ldr	r0, [pc, #0]	; (8006ca8 <_localeconv_r+0x4>)
 8006ca6:	4770      	bx	lr
 8006ca8:	20000160 	.word	0x20000160

08006cac <__retarget_lock_init_recursive>:
 8006cac:	4770      	bx	lr

08006cae <__retarget_lock_acquire_recursive>:
 8006cae:	4770      	bx	lr

08006cb0 <__retarget_lock_release_recursive>:
 8006cb0:	4770      	bx	lr

08006cb2 <__swhatbuf_r>:
 8006cb2:	b570      	push	{r4, r5, r6, lr}
 8006cb4:	460e      	mov	r6, r1
 8006cb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006cba:	4614      	mov	r4, r2
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	461d      	mov	r5, r3
 8006cc0:	b096      	sub	sp, #88	; 0x58
 8006cc2:	da07      	bge.n	8006cd4 <__swhatbuf_r+0x22>
 8006cc4:	2300      	movs	r3, #0
 8006cc6:	602b      	str	r3, [r5, #0]
 8006cc8:	89b3      	ldrh	r3, [r6, #12]
 8006cca:	061a      	lsls	r2, r3, #24
 8006ccc:	d410      	bmi.n	8006cf0 <__swhatbuf_r+0x3e>
 8006cce:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006cd2:	e00e      	b.n	8006cf2 <__swhatbuf_r+0x40>
 8006cd4:	466a      	mov	r2, sp
 8006cd6:	f000 ff69 	bl	8007bac <_fstat_r>
 8006cda:	2800      	cmp	r0, #0
 8006cdc:	dbf2      	blt.n	8006cc4 <__swhatbuf_r+0x12>
 8006cde:	9a01      	ldr	r2, [sp, #4]
 8006ce0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006ce4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006ce8:	425a      	negs	r2, r3
 8006cea:	415a      	adcs	r2, r3
 8006cec:	602a      	str	r2, [r5, #0]
 8006cee:	e7ee      	b.n	8006cce <__swhatbuf_r+0x1c>
 8006cf0:	2340      	movs	r3, #64	; 0x40
 8006cf2:	2000      	movs	r0, #0
 8006cf4:	6023      	str	r3, [r4, #0]
 8006cf6:	b016      	add	sp, #88	; 0x58
 8006cf8:	bd70      	pop	{r4, r5, r6, pc}
	...

08006cfc <__smakebuf_r>:
 8006cfc:	898b      	ldrh	r3, [r1, #12]
 8006cfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006d00:	079d      	lsls	r5, r3, #30
 8006d02:	4606      	mov	r6, r0
 8006d04:	460c      	mov	r4, r1
 8006d06:	d507      	bpl.n	8006d18 <__smakebuf_r+0x1c>
 8006d08:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006d0c:	6023      	str	r3, [r4, #0]
 8006d0e:	6123      	str	r3, [r4, #16]
 8006d10:	2301      	movs	r3, #1
 8006d12:	6163      	str	r3, [r4, #20]
 8006d14:	b002      	add	sp, #8
 8006d16:	bd70      	pop	{r4, r5, r6, pc}
 8006d18:	466a      	mov	r2, sp
 8006d1a:	ab01      	add	r3, sp, #4
 8006d1c:	f7ff ffc9 	bl	8006cb2 <__swhatbuf_r>
 8006d20:	9900      	ldr	r1, [sp, #0]
 8006d22:	4605      	mov	r5, r0
 8006d24:	4630      	mov	r0, r6
 8006d26:	f000 fc29 	bl	800757c <_malloc_r>
 8006d2a:	b948      	cbnz	r0, 8006d40 <__smakebuf_r+0x44>
 8006d2c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006d30:	059a      	lsls	r2, r3, #22
 8006d32:	d4ef      	bmi.n	8006d14 <__smakebuf_r+0x18>
 8006d34:	f023 0303 	bic.w	r3, r3, #3
 8006d38:	f043 0302 	orr.w	r3, r3, #2
 8006d3c:	81a3      	strh	r3, [r4, #12]
 8006d3e:	e7e3      	b.n	8006d08 <__smakebuf_r+0xc>
 8006d40:	4b0d      	ldr	r3, [pc, #52]	; (8006d78 <__smakebuf_r+0x7c>)
 8006d42:	62b3      	str	r3, [r6, #40]	; 0x28
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	6020      	str	r0, [r4, #0]
 8006d48:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d4c:	81a3      	strh	r3, [r4, #12]
 8006d4e:	9b00      	ldr	r3, [sp, #0]
 8006d50:	6120      	str	r0, [r4, #16]
 8006d52:	6163      	str	r3, [r4, #20]
 8006d54:	9b01      	ldr	r3, [sp, #4]
 8006d56:	b15b      	cbz	r3, 8006d70 <__smakebuf_r+0x74>
 8006d58:	4630      	mov	r0, r6
 8006d5a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d5e:	f000 ff37 	bl	8007bd0 <_isatty_r>
 8006d62:	b128      	cbz	r0, 8006d70 <__smakebuf_r+0x74>
 8006d64:	89a3      	ldrh	r3, [r4, #12]
 8006d66:	f023 0303 	bic.w	r3, r3, #3
 8006d6a:	f043 0301 	orr.w	r3, r3, #1
 8006d6e:	81a3      	strh	r3, [r4, #12]
 8006d70:	89a0      	ldrh	r0, [r4, #12]
 8006d72:	4305      	orrs	r5, r0
 8006d74:	81a5      	strh	r5, [r4, #12]
 8006d76:	e7cd      	b.n	8006d14 <__smakebuf_r+0x18>
 8006d78:	08006b01 	.word	0x08006b01

08006d7c <malloc>:
 8006d7c:	4b02      	ldr	r3, [pc, #8]	; (8006d88 <malloc+0xc>)
 8006d7e:	4601      	mov	r1, r0
 8006d80:	6818      	ldr	r0, [r3, #0]
 8006d82:	f000 bbfb 	b.w	800757c <_malloc_r>
 8006d86:	bf00      	nop
 8006d88:	2000000c 	.word	0x2000000c

08006d8c <memchr>:
 8006d8c:	4603      	mov	r3, r0
 8006d8e:	b510      	push	{r4, lr}
 8006d90:	b2c9      	uxtb	r1, r1
 8006d92:	4402      	add	r2, r0
 8006d94:	4293      	cmp	r3, r2
 8006d96:	4618      	mov	r0, r3
 8006d98:	d101      	bne.n	8006d9e <memchr+0x12>
 8006d9a:	2000      	movs	r0, #0
 8006d9c:	e003      	b.n	8006da6 <memchr+0x1a>
 8006d9e:	7804      	ldrb	r4, [r0, #0]
 8006da0:	3301      	adds	r3, #1
 8006da2:	428c      	cmp	r4, r1
 8006da4:	d1f6      	bne.n	8006d94 <memchr+0x8>
 8006da6:	bd10      	pop	{r4, pc}

08006da8 <memcpy>:
 8006da8:	440a      	add	r2, r1
 8006daa:	4291      	cmp	r1, r2
 8006dac:	f100 33ff 	add.w	r3, r0, #4294967295
 8006db0:	d100      	bne.n	8006db4 <memcpy+0xc>
 8006db2:	4770      	bx	lr
 8006db4:	b510      	push	{r4, lr}
 8006db6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006dba:	4291      	cmp	r1, r2
 8006dbc:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006dc0:	d1f9      	bne.n	8006db6 <memcpy+0xe>
 8006dc2:	bd10      	pop	{r4, pc}

08006dc4 <_Balloc>:
 8006dc4:	b570      	push	{r4, r5, r6, lr}
 8006dc6:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006dc8:	4604      	mov	r4, r0
 8006dca:	460d      	mov	r5, r1
 8006dcc:	b976      	cbnz	r6, 8006dec <_Balloc+0x28>
 8006dce:	2010      	movs	r0, #16
 8006dd0:	f7ff ffd4 	bl	8006d7c <malloc>
 8006dd4:	4602      	mov	r2, r0
 8006dd6:	6260      	str	r0, [r4, #36]	; 0x24
 8006dd8:	b920      	cbnz	r0, 8006de4 <_Balloc+0x20>
 8006dda:	2166      	movs	r1, #102	; 0x66
 8006ddc:	4b17      	ldr	r3, [pc, #92]	; (8006e3c <_Balloc+0x78>)
 8006dde:	4818      	ldr	r0, [pc, #96]	; (8006e40 <_Balloc+0x7c>)
 8006de0:	f000 fea4 	bl	8007b2c <__assert_func>
 8006de4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006de8:	6006      	str	r6, [r0, #0]
 8006dea:	60c6      	str	r6, [r0, #12]
 8006dec:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8006dee:	68f3      	ldr	r3, [r6, #12]
 8006df0:	b183      	cbz	r3, 8006e14 <_Balloc+0x50>
 8006df2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006df4:	68db      	ldr	r3, [r3, #12]
 8006df6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006dfa:	b9b8      	cbnz	r0, 8006e2c <_Balloc+0x68>
 8006dfc:	2101      	movs	r1, #1
 8006dfe:	fa01 f605 	lsl.w	r6, r1, r5
 8006e02:	1d72      	adds	r2, r6, #5
 8006e04:	4620      	mov	r0, r4
 8006e06:	0092      	lsls	r2, r2, #2
 8006e08:	f000 fb5e 	bl	80074c8 <_calloc_r>
 8006e0c:	b160      	cbz	r0, 8006e28 <_Balloc+0x64>
 8006e0e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8006e12:	e00e      	b.n	8006e32 <_Balloc+0x6e>
 8006e14:	2221      	movs	r2, #33	; 0x21
 8006e16:	2104      	movs	r1, #4
 8006e18:	4620      	mov	r0, r4
 8006e1a:	f000 fb55 	bl	80074c8 <_calloc_r>
 8006e1e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006e20:	60f0      	str	r0, [r6, #12]
 8006e22:	68db      	ldr	r3, [r3, #12]
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e4      	bne.n	8006df2 <_Balloc+0x2e>
 8006e28:	2000      	movs	r0, #0
 8006e2a:	bd70      	pop	{r4, r5, r6, pc}
 8006e2c:	6802      	ldr	r2, [r0, #0]
 8006e2e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8006e32:	2300      	movs	r3, #0
 8006e34:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006e38:	e7f7      	b.n	8006e2a <_Balloc+0x66>
 8006e3a:	bf00      	nop
 8006e3c:	08007dd1 	.word	0x08007dd1
 8006e40:	08007eb8 	.word	0x08007eb8

08006e44 <_Bfree>:
 8006e44:	b570      	push	{r4, r5, r6, lr}
 8006e46:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8006e48:	4605      	mov	r5, r0
 8006e4a:	460c      	mov	r4, r1
 8006e4c:	b976      	cbnz	r6, 8006e6c <_Bfree+0x28>
 8006e4e:	2010      	movs	r0, #16
 8006e50:	f7ff ff94 	bl	8006d7c <malloc>
 8006e54:	4602      	mov	r2, r0
 8006e56:	6268      	str	r0, [r5, #36]	; 0x24
 8006e58:	b920      	cbnz	r0, 8006e64 <_Bfree+0x20>
 8006e5a:	218a      	movs	r1, #138	; 0x8a
 8006e5c:	4b08      	ldr	r3, [pc, #32]	; (8006e80 <_Bfree+0x3c>)
 8006e5e:	4809      	ldr	r0, [pc, #36]	; (8006e84 <_Bfree+0x40>)
 8006e60:	f000 fe64 	bl	8007b2c <__assert_func>
 8006e64:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006e68:	6006      	str	r6, [r0, #0]
 8006e6a:	60c6      	str	r6, [r0, #12]
 8006e6c:	b13c      	cbz	r4, 8006e7e <_Bfree+0x3a>
 8006e6e:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8006e70:	6862      	ldr	r2, [r4, #4]
 8006e72:	68db      	ldr	r3, [r3, #12]
 8006e74:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8006e78:	6021      	str	r1, [r4, #0]
 8006e7a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8006e7e:	bd70      	pop	{r4, r5, r6, pc}
 8006e80:	08007dd1 	.word	0x08007dd1
 8006e84:	08007eb8 	.word	0x08007eb8

08006e88 <__multadd>:
 8006e88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006e8c:	4698      	mov	r8, r3
 8006e8e:	460c      	mov	r4, r1
 8006e90:	2300      	movs	r3, #0
 8006e92:	690e      	ldr	r6, [r1, #16]
 8006e94:	4607      	mov	r7, r0
 8006e96:	f101 0014 	add.w	r0, r1, #20
 8006e9a:	6805      	ldr	r5, [r0, #0]
 8006e9c:	3301      	adds	r3, #1
 8006e9e:	b2a9      	uxth	r1, r5
 8006ea0:	fb02 8101 	mla	r1, r2, r1, r8
 8006ea4:	0c2d      	lsrs	r5, r5, #16
 8006ea6:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8006eaa:	fb02 c505 	mla	r5, r2, r5, ip
 8006eae:	b289      	uxth	r1, r1
 8006eb0:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8006eb4:	429e      	cmp	r6, r3
 8006eb6:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8006eba:	f840 1b04 	str.w	r1, [r0], #4
 8006ebe:	dcec      	bgt.n	8006e9a <__multadd+0x12>
 8006ec0:	f1b8 0f00 	cmp.w	r8, #0
 8006ec4:	d022      	beq.n	8006f0c <__multadd+0x84>
 8006ec6:	68a3      	ldr	r3, [r4, #8]
 8006ec8:	42b3      	cmp	r3, r6
 8006eca:	dc19      	bgt.n	8006f00 <__multadd+0x78>
 8006ecc:	6861      	ldr	r1, [r4, #4]
 8006ece:	4638      	mov	r0, r7
 8006ed0:	3101      	adds	r1, #1
 8006ed2:	f7ff ff77 	bl	8006dc4 <_Balloc>
 8006ed6:	4605      	mov	r5, r0
 8006ed8:	b928      	cbnz	r0, 8006ee6 <__multadd+0x5e>
 8006eda:	4602      	mov	r2, r0
 8006edc:	21b5      	movs	r1, #181	; 0xb5
 8006ede:	4b0d      	ldr	r3, [pc, #52]	; (8006f14 <__multadd+0x8c>)
 8006ee0:	480d      	ldr	r0, [pc, #52]	; (8006f18 <__multadd+0x90>)
 8006ee2:	f000 fe23 	bl	8007b2c <__assert_func>
 8006ee6:	6922      	ldr	r2, [r4, #16]
 8006ee8:	f104 010c 	add.w	r1, r4, #12
 8006eec:	3202      	adds	r2, #2
 8006eee:	0092      	lsls	r2, r2, #2
 8006ef0:	300c      	adds	r0, #12
 8006ef2:	f7ff ff59 	bl	8006da8 <memcpy>
 8006ef6:	4621      	mov	r1, r4
 8006ef8:	4638      	mov	r0, r7
 8006efa:	f7ff ffa3 	bl	8006e44 <_Bfree>
 8006efe:	462c      	mov	r4, r5
 8006f00:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8006f04:	3601      	adds	r6, #1
 8006f06:	f8c3 8014 	str.w	r8, [r3, #20]
 8006f0a:	6126      	str	r6, [r4, #16]
 8006f0c:	4620      	mov	r0, r4
 8006f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006f12:	bf00      	nop
 8006f14:	08007e47 	.word	0x08007e47
 8006f18:	08007eb8 	.word	0x08007eb8

08006f1c <__hi0bits>:
 8006f1c:	0c02      	lsrs	r2, r0, #16
 8006f1e:	0412      	lsls	r2, r2, #16
 8006f20:	4603      	mov	r3, r0
 8006f22:	b9ca      	cbnz	r2, 8006f58 <__hi0bits+0x3c>
 8006f24:	0403      	lsls	r3, r0, #16
 8006f26:	2010      	movs	r0, #16
 8006f28:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006f2c:	bf04      	itt	eq
 8006f2e:	021b      	lsleq	r3, r3, #8
 8006f30:	3008      	addeq	r0, #8
 8006f32:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8006f36:	bf04      	itt	eq
 8006f38:	011b      	lsleq	r3, r3, #4
 8006f3a:	3004      	addeq	r0, #4
 8006f3c:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006f40:	bf04      	itt	eq
 8006f42:	009b      	lsleq	r3, r3, #2
 8006f44:	3002      	addeq	r0, #2
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	db05      	blt.n	8006f56 <__hi0bits+0x3a>
 8006f4a:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006f4e:	f100 0001 	add.w	r0, r0, #1
 8006f52:	bf08      	it	eq
 8006f54:	2020      	moveq	r0, #32
 8006f56:	4770      	bx	lr
 8006f58:	2000      	movs	r0, #0
 8006f5a:	e7e5      	b.n	8006f28 <__hi0bits+0xc>

08006f5c <__lo0bits>:
 8006f5c:	6803      	ldr	r3, [r0, #0]
 8006f5e:	4602      	mov	r2, r0
 8006f60:	f013 0007 	ands.w	r0, r3, #7
 8006f64:	d00b      	beq.n	8006f7e <__lo0bits+0x22>
 8006f66:	07d9      	lsls	r1, r3, #31
 8006f68:	d422      	bmi.n	8006fb0 <__lo0bits+0x54>
 8006f6a:	0798      	lsls	r0, r3, #30
 8006f6c:	bf49      	itett	mi
 8006f6e:	085b      	lsrmi	r3, r3, #1
 8006f70:	089b      	lsrpl	r3, r3, #2
 8006f72:	2001      	movmi	r0, #1
 8006f74:	6013      	strmi	r3, [r2, #0]
 8006f76:	bf5c      	itt	pl
 8006f78:	2002      	movpl	r0, #2
 8006f7a:	6013      	strpl	r3, [r2, #0]
 8006f7c:	4770      	bx	lr
 8006f7e:	b299      	uxth	r1, r3
 8006f80:	b909      	cbnz	r1, 8006f86 <__lo0bits+0x2a>
 8006f82:	2010      	movs	r0, #16
 8006f84:	0c1b      	lsrs	r3, r3, #16
 8006f86:	f013 0fff 	tst.w	r3, #255	; 0xff
 8006f8a:	bf04      	itt	eq
 8006f8c:	0a1b      	lsreq	r3, r3, #8
 8006f8e:	3008      	addeq	r0, #8
 8006f90:	0719      	lsls	r1, r3, #28
 8006f92:	bf04      	itt	eq
 8006f94:	091b      	lsreq	r3, r3, #4
 8006f96:	3004      	addeq	r0, #4
 8006f98:	0799      	lsls	r1, r3, #30
 8006f9a:	bf04      	itt	eq
 8006f9c:	089b      	lsreq	r3, r3, #2
 8006f9e:	3002      	addeq	r0, #2
 8006fa0:	07d9      	lsls	r1, r3, #31
 8006fa2:	d403      	bmi.n	8006fac <__lo0bits+0x50>
 8006fa4:	085b      	lsrs	r3, r3, #1
 8006fa6:	f100 0001 	add.w	r0, r0, #1
 8006faa:	d003      	beq.n	8006fb4 <__lo0bits+0x58>
 8006fac:	6013      	str	r3, [r2, #0]
 8006fae:	4770      	bx	lr
 8006fb0:	2000      	movs	r0, #0
 8006fb2:	4770      	bx	lr
 8006fb4:	2020      	movs	r0, #32
 8006fb6:	4770      	bx	lr

08006fb8 <__i2b>:
 8006fb8:	b510      	push	{r4, lr}
 8006fba:	460c      	mov	r4, r1
 8006fbc:	2101      	movs	r1, #1
 8006fbe:	f7ff ff01 	bl	8006dc4 <_Balloc>
 8006fc2:	4602      	mov	r2, r0
 8006fc4:	b928      	cbnz	r0, 8006fd2 <__i2b+0x1a>
 8006fc6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8006fca:	4b04      	ldr	r3, [pc, #16]	; (8006fdc <__i2b+0x24>)
 8006fcc:	4804      	ldr	r0, [pc, #16]	; (8006fe0 <__i2b+0x28>)
 8006fce:	f000 fdad 	bl	8007b2c <__assert_func>
 8006fd2:	2301      	movs	r3, #1
 8006fd4:	6144      	str	r4, [r0, #20]
 8006fd6:	6103      	str	r3, [r0, #16]
 8006fd8:	bd10      	pop	{r4, pc}
 8006fda:	bf00      	nop
 8006fdc:	08007e47 	.word	0x08007e47
 8006fe0:	08007eb8 	.word	0x08007eb8

08006fe4 <__multiply>:
 8006fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006fe8:	4614      	mov	r4, r2
 8006fea:	690a      	ldr	r2, [r1, #16]
 8006fec:	6923      	ldr	r3, [r4, #16]
 8006fee:	460d      	mov	r5, r1
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	bfbe      	ittt	lt
 8006ff4:	460b      	movlt	r3, r1
 8006ff6:	4625      	movlt	r5, r4
 8006ff8:	461c      	movlt	r4, r3
 8006ffa:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8006ffe:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8007002:	68ab      	ldr	r3, [r5, #8]
 8007004:	6869      	ldr	r1, [r5, #4]
 8007006:	eb0a 0709 	add.w	r7, sl, r9
 800700a:	42bb      	cmp	r3, r7
 800700c:	b085      	sub	sp, #20
 800700e:	bfb8      	it	lt
 8007010:	3101      	addlt	r1, #1
 8007012:	f7ff fed7 	bl	8006dc4 <_Balloc>
 8007016:	b930      	cbnz	r0, 8007026 <__multiply+0x42>
 8007018:	4602      	mov	r2, r0
 800701a:	f240 115d 	movw	r1, #349	; 0x15d
 800701e:	4b41      	ldr	r3, [pc, #260]	; (8007124 <__multiply+0x140>)
 8007020:	4841      	ldr	r0, [pc, #260]	; (8007128 <__multiply+0x144>)
 8007022:	f000 fd83 	bl	8007b2c <__assert_func>
 8007026:	f100 0614 	add.w	r6, r0, #20
 800702a:	4633      	mov	r3, r6
 800702c:	2200      	movs	r2, #0
 800702e:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8007032:	4543      	cmp	r3, r8
 8007034:	d31e      	bcc.n	8007074 <__multiply+0x90>
 8007036:	f105 0c14 	add.w	ip, r5, #20
 800703a:	f104 0314 	add.w	r3, r4, #20
 800703e:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8007042:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8007046:	9202      	str	r2, [sp, #8]
 8007048:	ebac 0205 	sub.w	r2, ip, r5
 800704c:	3a15      	subs	r2, #21
 800704e:	f022 0203 	bic.w	r2, r2, #3
 8007052:	3204      	adds	r2, #4
 8007054:	f105 0115 	add.w	r1, r5, #21
 8007058:	458c      	cmp	ip, r1
 800705a:	bf38      	it	cc
 800705c:	2204      	movcc	r2, #4
 800705e:	9201      	str	r2, [sp, #4]
 8007060:	9a02      	ldr	r2, [sp, #8]
 8007062:	9303      	str	r3, [sp, #12]
 8007064:	429a      	cmp	r2, r3
 8007066:	d808      	bhi.n	800707a <__multiply+0x96>
 8007068:	2f00      	cmp	r7, #0
 800706a:	dc55      	bgt.n	8007118 <__multiply+0x134>
 800706c:	6107      	str	r7, [r0, #16]
 800706e:	b005      	add	sp, #20
 8007070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007074:	f843 2b04 	str.w	r2, [r3], #4
 8007078:	e7db      	b.n	8007032 <__multiply+0x4e>
 800707a:	f8b3 a000 	ldrh.w	sl, [r3]
 800707e:	f1ba 0f00 	cmp.w	sl, #0
 8007082:	d020      	beq.n	80070c6 <__multiply+0xe2>
 8007084:	46b1      	mov	r9, r6
 8007086:	2200      	movs	r2, #0
 8007088:	f105 0e14 	add.w	lr, r5, #20
 800708c:	f85e 4b04 	ldr.w	r4, [lr], #4
 8007090:	f8d9 b000 	ldr.w	fp, [r9]
 8007094:	b2a1      	uxth	r1, r4
 8007096:	fa1f fb8b 	uxth.w	fp, fp
 800709a:	fb0a b101 	mla	r1, sl, r1, fp
 800709e:	4411      	add	r1, r2
 80070a0:	f8d9 2000 	ldr.w	r2, [r9]
 80070a4:	0c24      	lsrs	r4, r4, #16
 80070a6:	0c12      	lsrs	r2, r2, #16
 80070a8:	fb0a 2404 	mla	r4, sl, r4, r2
 80070ac:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 80070b0:	b289      	uxth	r1, r1
 80070b2:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 80070b6:	45f4      	cmp	ip, lr
 80070b8:	ea4f 4214 	mov.w	r2, r4, lsr #16
 80070bc:	f849 1b04 	str.w	r1, [r9], #4
 80070c0:	d8e4      	bhi.n	800708c <__multiply+0xa8>
 80070c2:	9901      	ldr	r1, [sp, #4]
 80070c4:	5072      	str	r2, [r6, r1]
 80070c6:	9a03      	ldr	r2, [sp, #12]
 80070c8:	3304      	adds	r3, #4
 80070ca:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 80070ce:	f1b9 0f00 	cmp.w	r9, #0
 80070d2:	d01f      	beq.n	8007114 <__multiply+0x130>
 80070d4:	46b6      	mov	lr, r6
 80070d6:	f04f 0a00 	mov.w	sl, #0
 80070da:	6834      	ldr	r4, [r6, #0]
 80070dc:	f105 0114 	add.w	r1, r5, #20
 80070e0:	880a      	ldrh	r2, [r1, #0]
 80070e2:	f8be b002 	ldrh.w	fp, [lr, #2]
 80070e6:	b2a4      	uxth	r4, r4
 80070e8:	fb09 b202 	mla	r2, r9, r2, fp
 80070ec:	4492      	add	sl, r2
 80070ee:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 80070f2:	f84e 4b04 	str.w	r4, [lr], #4
 80070f6:	f851 4b04 	ldr.w	r4, [r1], #4
 80070fa:	f8be 2000 	ldrh.w	r2, [lr]
 80070fe:	0c24      	lsrs	r4, r4, #16
 8007100:	fb09 2404 	mla	r4, r9, r4, r2
 8007104:	458c      	cmp	ip, r1
 8007106:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 800710a:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800710e:	d8e7      	bhi.n	80070e0 <__multiply+0xfc>
 8007110:	9a01      	ldr	r2, [sp, #4]
 8007112:	50b4      	str	r4, [r6, r2]
 8007114:	3604      	adds	r6, #4
 8007116:	e7a3      	b.n	8007060 <__multiply+0x7c>
 8007118:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800711c:	2b00      	cmp	r3, #0
 800711e:	d1a5      	bne.n	800706c <__multiply+0x88>
 8007120:	3f01      	subs	r7, #1
 8007122:	e7a1      	b.n	8007068 <__multiply+0x84>
 8007124:	08007e47 	.word	0x08007e47
 8007128:	08007eb8 	.word	0x08007eb8

0800712c <__pow5mult>:
 800712c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007130:	4615      	mov	r5, r2
 8007132:	f012 0203 	ands.w	r2, r2, #3
 8007136:	4606      	mov	r6, r0
 8007138:	460f      	mov	r7, r1
 800713a:	d007      	beq.n	800714c <__pow5mult+0x20>
 800713c:	4c25      	ldr	r4, [pc, #148]	; (80071d4 <__pow5mult+0xa8>)
 800713e:	3a01      	subs	r2, #1
 8007140:	2300      	movs	r3, #0
 8007142:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8007146:	f7ff fe9f 	bl	8006e88 <__multadd>
 800714a:	4607      	mov	r7, r0
 800714c:	10ad      	asrs	r5, r5, #2
 800714e:	d03d      	beq.n	80071cc <__pow5mult+0xa0>
 8007150:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8007152:	b97c      	cbnz	r4, 8007174 <__pow5mult+0x48>
 8007154:	2010      	movs	r0, #16
 8007156:	f7ff fe11 	bl	8006d7c <malloc>
 800715a:	4602      	mov	r2, r0
 800715c:	6270      	str	r0, [r6, #36]	; 0x24
 800715e:	b928      	cbnz	r0, 800716c <__pow5mult+0x40>
 8007160:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8007164:	4b1c      	ldr	r3, [pc, #112]	; (80071d8 <__pow5mult+0xac>)
 8007166:	481d      	ldr	r0, [pc, #116]	; (80071dc <__pow5mult+0xb0>)
 8007168:	f000 fce0 	bl	8007b2c <__assert_func>
 800716c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007170:	6004      	str	r4, [r0, #0]
 8007172:	60c4      	str	r4, [r0, #12]
 8007174:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8007178:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800717c:	b94c      	cbnz	r4, 8007192 <__pow5mult+0x66>
 800717e:	f240 2171 	movw	r1, #625	; 0x271
 8007182:	4630      	mov	r0, r6
 8007184:	f7ff ff18 	bl	8006fb8 <__i2b>
 8007188:	2300      	movs	r3, #0
 800718a:	4604      	mov	r4, r0
 800718c:	f8c8 0008 	str.w	r0, [r8, #8]
 8007190:	6003      	str	r3, [r0, #0]
 8007192:	f04f 0900 	mov.w	r9, #0
 8007196:	07eb      	lsls	r3, r5, #31
 8007198:	d50a      	bpl.n	80071b0 <__pow5mult+0x84>
 800719a:	4639      	mov	r1, r7
 800719c:	4622      	mov	r2, r4
 800719e:	4630      	mov	r0, r6
 80071a0:	f7ff ff20 	bl	8006fe4 <__multiply>
 80071a4:	4680      	mov	r8, r0
 80071a6:	4639      	mov	r1, r7
 80071a8:	4630      	mov	r0, r6
 80071aa:	f7ff fe4b 	bl	8006e44 <_Bfree>
 80071ae:	4647      	mov	r7, r8
 80071b0:	106d      	asrs	r5, r5, #1
 80071b2:	d00b      	beq.n	80071cc <__pow5mult+0xa0>
 80071b4:	6820      	ldr	r0, [r4, #0]
 80071b6:	b938      	cbnz	r0, 80071c8 <__pow5mult+0x9c>
 80071b8:	4622      	mov	r2, r4
 80071ba:	4621      	mov	r1, r4
 80071bc:	4630      	mov	r0, r6
 80071be:	f7ff ff11 	bl	8006fe4 <__multiply>
 80071c2:	6020      	str	r0, [r4, #0]
 80071c4:	f8c0 9000 	str.w	r9, [r0]
 80071c8:	4604      	mov	r4, r0
 80071ca:	e7e4      	b.n	8007196 <__pow5mult+0x6a>
 80071cc:	4638      	mov	r0, r7
 80071ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80071d2:	bf00      	nop
 80071d4:	08008008 	.word	0x08008008
 80071d8:	08007dd1 	.word	0x08007dd1
 80071dc:	08007eb8 	.word	0x08007eb8

080071e0 <__lshift>:
 80071e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80071e4:	460c      	mov	r4, r1
 80071e6:	4607      	mov	r7, r0
 80071e8:	4691      	mov	r9, r2
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	6849      	ldr	r1, [r1, #4]
 80071ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80071f2:	68a3      	ldr	r3, [r4, #8]
 80071f4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80071f8:	f108 0601 	add.w	r6, r8, #1
 80071fc:	42b3      	cmp	r3, r6
 80071fe:	db0b      	blt.n	8007218 <__lshift+0x38>
 8007200:	4638      	mov	r0, r7
 8007202:	f7ff fddf 	bl	8006dc4 <_Balloc>
 8007206:	4605      	mov	r5, r0
 8007208:	b948      	cbnz	r0, 800721e <__lshift+0x3e>
 800720a:	4602      	mov	r2, r0
 800720c:	f240 11d9 	movw	r1, #473	; 0x1d9
 8007210:	4b27      	ldr	r3, [pc, #156]	; (80072b0 <__lshift+0xd0>)
 8007212:	4828      	ldr	r0, [pc, #160]	; (80072b4 <__lshift+0xd4>)
 8007214:	f000 fc8a 	bl	8007b2c <__assert_func>
 8007218:	3101      	adds	r1, #1
 800721a:	005b      	lsls	r3, r3, #1
 800721c:	e7ee      	b.n	80071fc <__lshift+0x1c>
 800721e:	2300      	movs	r3, #0
 8007220:	f100 0114 	add.w	r1, r0, #20
 8007224:	f100 0210 	add.w	r2, r0, #16
 8007228:	4618      	mov	r0, r3
 800722a:	4553      	cmp	r3, sl
 800722c:	db33      	blt.n	8007296 <__lshift+0xb6>
 800722e:	6920      	ldr	r0, [r4, #16]
 8007230:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007234:	f104 0314 	add.w	r3, r4, #20
 8007238:	f019 091f 	ands.w	r9, r9, #31
 800723c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007240:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007244:	d02b      	beq.n	800729e <__lshift+0xbe>
 8007246:	468a      	mov	sl, r1
 8007248:	2200      	movs	r2, #0
 800724a:	f1c9 0e20 	rsb	lr, r9, #32
 800724e:	6818      	ldr	r0, [r3, #0]
 8007250:	fa00 f009 	lsl.w	r0, r0, r9
 8007254:	4302      	orrs	r2, r0
 8007256:	f84a 2b04 	str.w	r2, [sl], #4
 800725a:	f853 2b04 	ldr.w	r2, [r3], #4
 800725e:	459c      	cmp	ip, r3
 8007260:	fa22 f20e 	lsr.w	r2, r2, lr
 8007264:	d8f3      	bhi.n	800724e <__lshift+0x6e>
 8007266:	ebac 0304 	sub.w	r3, ip, r4
 800726a:	3b15      	subs	r3, #21
 800726c:	f023 0303 	bic.w	r3, r3, #3
 8007270:	3304      	adds	r3, #4
 8007272:	f104 0015 	add.w	r0, r4, #21
 8007276:	4584      	cmp	ip, r0
 8007278:	bf38      	it	cc
 800727a:	2304      	movcc	r3, #4
 800727c:	50ca      	str	r2, [r1, r3]
 800727e:	b10a      	cbz	r2, 8007284 <__lshift+0xa4>
 8007280:	f108 0602 	add.w	r6, r8, #2
 8007284:	3e01      	subs	r6, #1
 8007286:	4638      	mov	r0, r7
 8007288:	4621      	mov	r1, r4
 800728a:	612e      	str	r6, [r5, #16]
 800728c:	f7ff fdda 	bl	8006e44 <_Bfree>
 8007290:	4628      	mov	r0, r5
 8007292:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007296:	f842 0f04 	str.w	r0, [r2, #4]!
 800729a:	3301      	adds	r3, #1
 800729c:	e7c5      	b.n	800722a <__lshift+0x4a>
 800729e:	3904      	subs	r1, #4
 80072a0:	f853 2b04 	ldr.w	r2, [r3], #4
 80072a4:	459c      	cmp	ip, r3
 80072a6:	f841 2f04 	str.w	r2, [r1, #4]!
 80072aa:	d8f9      	bhi.n	80072a0 <__lshift+0xc0>
 80072ac:	e7ea      	b.n	8007284 <__lshift+0xa4>
 80072ae:	bf00      	nop
 80072b0:	08007e47 	.word	0x08007e47
 80072b4:	08007eb8 	.word	0x08007eb8

080072b8 <__mcmp>:
 80072b8:	4603      	mov	r3, r0
 80072ba:	690a      	ldr	r2, [r1, #16]
 80072bc:	6900      	ldr	r0, [r0, #16]
 80072be:	b530      	push	{r4, r5, lr}
 80072c0:	1a80      	subs	r0, r0, r2
 80072c2:	d10d      	bne.n	80072e0 <__mcmp+0x28>
 80072c4:	3314      	adds	r3, #20
 80072c6:	3114      	adds	r1, #20
 80072c8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80072cc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80072d0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80072d4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80072d8:	4295      	cmp	r5, r2
 80072da:	d002      	beq.n	80072e2 <__mcmp+0x2a>
 80072dc:	d304      	bcc.n	80072e8 <__mcmp+0x30>
 80072de:	2001      	movs	r0, #1
 80072e0:	bd30      	pop	{r4, r5, pc}
 80072e2:	42a3      	cmp	r3, r4
 80072e4:	d3f4      	bcc.n	80072d0 <__mcmp+0x18>
 80072e6:	e7fb      	b.n	80072e0 <__mcmp+0x28>
 80072e8:	f04f 30ff 	mov.w	r0, #4294967295
 80072ec:	e7f8      	b.n	80072e0 <__mcmp+0x28>
	...

080072f0 <__mdiff>:
 80072f0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80072f4:	460c      	mov	r4, r1
 80072f6:	4606      	mov	r6, r0
 80072f8:	4611      	mov	r1, r2
 80072fa:	4620      	mov	r0, r4
 80072fc:	4692      	mov	sl, r2
 80072fe:	f7ff ffdb 	bl	80072b8 <__mcmp>
 8007302:	1e05      	subs	r5, r0, #0
 8007304:	d111      	bne.n	800732a <__mdiff+0x3a>
 8007306:	4629      	mov	r1, r5
 8007308:	4630      	mov	r0, r6
 800730a:	f7ff fd5b 	bl	8006dc4 <_Balloc>
 800730e:	4602      	mov	r2, r0
 8007310:	b928      	cbnz	r0, 800731e <__mdiff+0x2e>
 8007312:	f240 2132 	movw	r1, #562	; 0x232
 8007316:	4b3c      	ldr	r3, [pc, #240]	; (8007408 <__mdiff+0x118>)
 8007318:	483c      	ldr	r0, [pc, #240]	; (800740c <__mdiff+0x11c>)
 800731a:	f000 fc07 	bl	8007b2c <__assert_func>
 800731e:	2301      	movs	r3, #1
 8007320:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007324:	4610      	mov	r0, r2
 8007326:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800732a:	bfa4      	itt	ge
 800732c:	4653      	movge	r3, sl
 800732e:	46a2      	movge	sl, r4
 8007330:	4630      	mov	r0, r6
 8007332:	f8da 1004 	ldr.w	r1, [sl, #4]
 8007336:	bfa6      	itte	ge
 8007338:	461c      	movge	r4, r3
 800733a:	2500      	movge	r5, #0
 800733c:	2501      	movlt	r5, #1
 800733e:	f7ff fd41 	bl	8006dc4 <_Balloc>
 8007342:	4602      	mov	r2, r0
 8007344:	b918      	cbnz	r0, 800734e <__mdiff+0x5e>
 8007346:	f44f 7110 	mov.w	r1, #576	; 0x240
 800734a:	4b2f      	ldr	r3, [pc, #188]	; (8007408 <__mdiff+0x118>)
 800734c:	e7e4      	b.n	8007318 <__mdiff+0x28>
 800734e:	f100 0814 	add.w	r8, r0, #20
 8007352:	f8da 7010 	ldr.w	r7, [sl, #16]
 8007356:	60c5      	str	r5, [r0, #12]
 8007358:	f04f 0c00 	mov.w	ip, #0
 800735c:	f10a 0514 	add.w	r5, sl, #20
 8007360:	f10a 0010 	add.w	r0, sl, #16
 8007364:	46c2      	mov	sl, r8
 8007366:	6926      	ldr	r6, [r4, #16]
 8007368:	f104 0914 	add.w	r9, r4, #20
 800736c:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8007370:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8007374:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8007378:	f859 3b04 	ldr.w	r3, [r9], #4
 800737c:	fa1f f18b 	uxth.w	r1, fp
 8007380:	4461      	add	r1, ip
 8007382:	fa1f fc83 	uxth.w	ip, r3
 8007386:	0c1b      	lsrs	r3, r3, #16
 8007388:	eba1 010c 	sub.w	r1, r1, ip
 800738c:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8007390:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8007394:	b289      	uxth	r1, r1
 8007396:	ea4f 4c23 	mov.w	ip, r3, asr #16
 800739a:	454e      	cmp	r6, r9
 800739c:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80073a0:	f84a 3b04 	str.w	r3, [sl], #4
 80073a4:	d8e6      	bhi.n	8007374 <__mdiff+0x84>
 80073a6:	1b33      	subs	r3, r6, r4
 80073a8:	3b15      	subs	r3, #21
 80073aa:	f023 0303 	bic.w	r3, r3, #3
 80073ae:	3415      	adds	r4, #21
 80073b0:	3304      	adds	r3, #4
 80073b2:	42a6      	cmp	r6, r4
 80073b4:	bf38      	it	cc
 80073b6:	2304      	movcc	r3, #4
 80073b8:	441d      	add	r5, r3
 80073ba:	4443      	add	r3, r8
 80073bc:	461e      	mov	r6, r3
 80073be:	462c      	mov	r4, r5
 80073c0:	4574      	cmp	r4, lr
 80073c2:	d30e      	bcc.n	80073e2 <__mdiff+0xf2>
 80073c4:	f10e 0103 	add.w	r1, lr, #3
 80073c8:	1b49      	subs	r1, r1, r5
 80073ca:	f021 0103 	bic.w	r1, r1, #3
 80073ce:	3d03      	subs	r5, #3
 80073d0:	45ae      	cmp	lr, r5
 80073d2:	bf38      	it	cc
 80073d4:	2100      	movcc	r1, #0
 80073d6:	4419      	add	r1, r3
 80073d8:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 80073dc:	b18b      	cbz	r3, 8007402 <__mdiff+0x112>
 80073de:	6117      	str	r7, [r2, #16]
 80073e0:	e7a0      	b.n	8007324 <__mdiff+0x34>
 80073e2:	f854 8b04 	ldr.w	r8, [r4], #4
 80073e6:	fa1f f188 	uxth.w	r1, r8
 80073ea:	4461      	add	r1, ip
 80073ec:	1408      	asrs	r0, r1, #16
 80073ee:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 80073f2:	b289      	uxth	r1, r1
 80073f4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80073f8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80073fc:	f846 1b04 	str.w	r1, [r6], #4
 8007400:	e7de      	b.n	80073c0 <__mdiff+0xd0>
 8007402:	3f01      	subs	r7, #1
 8007404:	e7e8      	b.n	80073d8 <__mdiff+0xe8>
 8007406:	bf00      	nop
 8007408:	08007e47 	.word	0x08007e47
 800740c:	08007eb8 	.word	0x08007eb8

08007410 <__d2b>:
 8007410:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8007414:	2101      	movs	r1, #1
 8007416:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 800741a:	4690      	mov	r8, r2
 800741c:	461d      	mov	r5, r3
 800741e:	f7ff fcd1 	bl	8006dc4 <_Balloc>
 8007422:	4604      	mov	r4, r0
 8007424:	b930      	cbnz	r0, 8007434 <__d2b+0x24>
 8007426:	4602      	mov	r2, r0
 8007428:	f240 310a 	movw	r1, #778	; 0x30a
 800742c:	4b24      	ldr	r3, [pc, #144]	; (80074c0 <__d2b+0xb0>)
 800742e:	4825      	ldr	r0, [pc, #148]	; (80074c4 <__d2b+0xb4>)
 8007430:	f000 fb7c 	bl	8007b2c <__assert_func>
 8007434:	f3c5 0313 	ubfx	r3, r5, #0, #20
 8007438:	f3c5 550a 	ubfx	r5, r5, #20, #11
 800743c:	bb2d      	cbnz	r5, 800748a <__d2b+0x7a>
 800743e:	9301      	str	r3, [sp, #4]
 8007440:	f1b8 0300 	subs.w	r3, r8, #0
 8007444:	d026      	beq.n	8007494 <__d2b+0x84>
 8007446:	4668      	mov	r0, sp
 8007448:	9300      	str	r3, [sp, #0]
 800744a:	f7ff fd87 	bl	8006f5c <__lo0bits>
 800744e:	9900      	ldr	r1, [sp, #0]
 8007450:	b1f0      	cbz	r0, 8007490 <__d2b+0x80>
 8007452:	9a01      	ldr	r2, [sp, #4]
 8007454:	f1c0 0320 	rsb	r3, r0, #32
 8007458:	fa02 f303 	lsl.w	r3, r2, r3
 800745c:	430b      	orrs	r3, r1
 800745e:	40c2      	lsrs	r2, r0
 8007460:	6163      	str	r3, [r4, #20]
 8007462:	9201      	str	r2, [sp, #4]
 8007464:	9b01      	ldr	r3, [sp, #4]
 8007466:	2b00      	cmp	r3, #0
 8007468:	bf14      	ite	ne
 800746a:	2102      	movne	r1, #2
 800746c:	2101      	moveq	r1, #1
 800746e:	61a3      	str	r3, [r4, #24]
 8007470:	6121      	str	r1, [r4, #16]
 8007472:	b1c5      	cbz	r5, 80074a6 <__d2b+0x96>
 8007474:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 8007478:	4405      	add	r5, r0
 800747a:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800747e:	603d      	str	r5, [r7, #0]
 8007480:	6030      	str	r0, [r6, #0]
 8007482:	4620      	mov	r0, r4
 8007484:	b002      	add	sp, #8
 8007486:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800748a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800748e:	e7d6      	b.n	800743e <__d2b+0x2e>
 8007490:	6161      	str	r1, [r4, #20]
 8007492:	e7e7      	b.n	8007464 <__d2b+0x54>
 8007494:	a801      	add	r0, sp, #4
 8007496:	f7ff fd61 	bl	8006f5c <__lo0bits>
 800749a:	2101      	movs	r1, #1
 800749c:	9b01      	ldr	r3, [sp, #4]
 800749e:	6121      	str	r1, [r4, #16]
 80074a0:	6163      	str	r3, [r4, #20]
 80074a2:	3020      	adds	r0, #32
 80074a4:	e7e5      	b.n	8007472 <__d2b+0x62>
 80074a6:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 80074aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80074ae:	6038      	str	r0, [r7, #0]
 80074b0:	6918      	ldr	r0, [r3, #16]
 80074b2:	f7ff fd33 	bl	8006f1c <__hi0bits>
 80074b6:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 80074ba:	6031      	str	r1, [r6, #0]
 80074bc:	e7e1      	b.n	8007482 <__d2b+0x72>
 80074be:	bf00      	nop
 80074c0:	08007e47 	.word	0x08007e47
 80074c4:	08007eb8 	.word	0x08007eb8

080074c8 <_calloc_r>:
 80074c8:	b538      	push	{r3, r4, r5, lr}
 80074ca:	fb02 f501 	mul.w	r5, r2, r1
 80074ce:	4629      	mov	r1, r5
 80074d0:	f000 f854 	bl	800757c <_malloc_r>
 80074d4:	4604      	mov	r4, r0
 80074d6:	b118      	cbz	r0, 80074e0 <_calloc_r+0x18>
 80074d8:	462a      	mov	r2, r5
 80074da:	2100      	movs	r1, #0
 80074dc:	f7fd fe66 	bl	80051ac <memset>
 80074e0:	4620      	mov	r0, r4
 80074e2:	bd38      	pop	{r3, r4, r5, pc}

080074e4 <_free_r>:
 80074e4:	b538      	push	{r3, r4, r5, lr}
 80074e6:	4605      	mov	r5, r0
 80074e8:	2900      	cmp	r1, #0
 80074ea:	d043      	beq.n	8007574 <_free_r+0x90>
 80074ec:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80074f0:	1f0c      	subs	r4, r1, #4
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	bfb8      	it	lt
 80074f6:	18e4      	addlt	r4, r4, r3
 80074f8:	f000 fb9e 	bl	8007c38 <__malloc_lock>
 80074fc:	4a1e      	ldr	r2, [pc, #120]	; (8007578 <_free_r+0x94>)
 80074fe:	6813      	ldr	r3, [r2, #0]
 8007500:	4610      	mov	r0, r2
 8007502:	b933      	cbnz	r3, 8007512 <_free_r+0x2e>
 8007504:	6063      	str	r3, [r4, #4]
 8007506:	6014      	str	r4, [r2, #0]
 8007508:	4628      	mov	r0, r5
 800750a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800750e:	f000 bb99 	b.w	8007c44 <__malloc_unlock>
 8007512:	42a3      	cmp	r3, r4
 8007514:	d90a      	bls.n	800752c <_free_r+0x48>
 8007516:	6821      	ldr	r1, [r4, #0]
 8007518:	1862      	adds	r2, r4, r1
 800751a:	4293      	cmp	r3, r2
 800751c:	bf01      	itttt	eq
 800751e:	681a      	ldreq	r2, [r3, #0]
 8007520:	685b      	ldreq	r3, [r3, #4]
 8007522:	1852      	addeq	r2, r2, r1
 8007524:	6022      	streq	r2, [r4, #0]
 8007526:	6063      	str	r3, [r4, #4]
 8007528:	6004      	str	r4, [r0, #0]
 800752a:	e7ed      	b.n	8007508 <_free_r+0x24>
 800752c:	461a      	mov	r2, r3
 800752e:	685b      	ldr	r3, [r3, #4]
 8007530:	b10b      	cbz	r3, 8007536 <_free_r+0x52>
 8007532:	42a3      	cmp	r3, r4
 8007534:	d9fa      	bls.n	800752c <_free_r+0x48>
 8007536:	6811      	ldr	r1, [r2, #0]
 8007538:	1850      	adds	r0, r2, r1
 800753a:	42a0      	cmp	r0, r4
 800753c:	d10b      	bne.n	8007556 <_free_r+0x72>
 800753e:	6820      	ldr	r0, [r4, #0]
 8007540:	4401      	add	r1, r0
 8007542:	1850      	adds	r0, r2, r1
 8007544:	4283      	cmp	r3, r0
 8007546:	6011      	str	r1, [r2, #0]
 8007548:	d1de      	bne.n	8007508 <_free_r+0x24>
 800754a:	6818      	ldr	r0, [r3, #0]
 800754c:	685b      	ldr	r3, [r3, #4]
 800754e:	4401      	add	r1, r0
 8007550:	6011      	str	r1, [r2, #0]
 8007552:	6053      	str	r3, [r2, #4]
 8007554:	e7d8      	b.n	8007508 <_free_r+0x24>
 8007556:	d902      	bls.n	800755e <_free_r+0x7a>
 8007558:	230c      	movs	r3, #12
 800755a:	602b      	str	r3, [r5, #0]
 800755c:	e7d4      	b.n	8007508 <_free_r+0x24>
 800755e:	6820      	ldr	r0, [r4, #0]
 8007560:	1821      	adds	r1, r4, r0
 8007562:	428b      	cmp	r3, r1
 8007564:	bf01      	itttt	eq
 8007566:	6819      	ldreq	r1, [r3, #0]
 8007568:	685b      	ldreq	r3, [r3, #4]
 800756a:	1809      	addeq	r1, r1, r0
 800756c:	6021      	streq	r1, [r4, #0]
 800756e:	6063      	str	r3, [r4, #4]
 8007570:	6054      	str	r4, [r2, #4]
 8007572:	e7c9      	b.n	8007508 <_free_r+0x24>
 8007574:	bd38      	pop	{r3, r4, r5, pc}
 8007576:	bf00      	nop
 8007578:	20000204 	.word	0x20000204

0800757c <_malloc_r>:
 800757c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800757e:	1ccd      	adds	r5, r1, #3
 8007580:	f025 0503 	bic.w	r5, r5, #3
 8007584:	3508      	adds	r5, #8
 8007586:	2d0c      	cmp	r5, #12
 8007588:	bf38      	it	cc
 800758a:	250c      	movcc	r5, #12
 800758c:	2d00      	cmp	r5, #0
 800758e:	4606      	mov	r6, r0
 8007590:	db01      	blt.n	8007596 <_malloc_r+0x1a>
 8007592:	42a9      	cmp	r1, r5
 8007594:	d903      	bls.n	800759e <_malloc_r+0x22>
 8007596:	230c      	movs	r3, #12
 8007598:	6033      	str	r3, [r6, #0]
 800759a:	2000      	movs	r0, #0
 800759c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800759e:	f000 fb4b 	bl	8007c38 <__malloc_lock>
 80075a2:	4921      	ldr	r1, [pc, #132]	; (8007628 <_malloc_r+0xac>)
 80075a4:	680a      	ldr	r2, [r1, #0]
 80075a6:	4614      	mov	r4, r2
 80075a8:	b99c      	cbnz	r4, 80075d2 <_malloc_r+0x56>
 80075aa:	4f20      	ldr	r7, [pc, #128]	; (800762c <_malloc_r+0xb0>)
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	b923      	cbnz	r3, 80075ba <_malloc_r+0x3e>
 80075b0:	4621      	mov	r1, r4
 80075b2:	4630      	mov	r0, r6
 80075b4:	f000 f994 	bl	80078e0 <_sbrk_r>
 80075b8:	6038      	str	r0, [r7, #0]
 80075ba:	4629      	mov	r1, r5
 80075bc:	4630      	mov	r0, r6
 80075be:	f000 f98f 	bl	80078e0 <_sbrk_r>
 80075c2:	1c43      	adds	r3, r0, #1
 80075c4:	d123      	bne.n	800760e <_malloc_r+0x92>
 80075c6:	230c      	movs	r3, #12
 80075c8:	4630      	mov	r0, r6
 80075ca:	6033      	str	r3, [r6, #0]
 80075cc:	f000 fb3a 	bl	8007c44 <__malloc_unlock>
 80075d0:	e7e3      	b.n	800759a <_malloc_r+0x1e>
 80075d2:	6823      	ldr	r3, [r4, #0]
 80075d4:	1b5b      	subs	r3, r3, r5
 80075d6:	d417      	bmi.n	8007608 <_malloc_r+0x8c>
 80075d8:	2b0b      	cmp	r3, #11
 80075da:	d903      	bls.n	80075e4 <_malloc_r+0x68>
 80075dc:	6023      	str	r3, [r4, #0]
 80075de:	441c      	add	r4, r3
 80075e0:	6025      	str	r5, [r4, #0]
 80075e2:	e004      	b.n	80075ee <_malloc_r+0x72>
 80075e4:	6863      	ldr	r3, [r4, #4]
 80075e6:	42a2      	cmp	r2, r4
 80075e8:	bf0c      	ite	eq
 80075ea:	600b      	streq	r3, [r1, #0]
 80075ec:	6053      	strne	r3, [r2, #4]
 80075ee:	4630      	mov	r0, r6
 80075f0:	f000 fb28 	bl	8007c44 <__malloc_unlock>
 80075f4:	f104 000b 	add.w	r0, r4, #11
 80075f8:	1d23      	adds	r3, r4, #4
 80075fa:	f020 0007 	bic.w	r0, r0, #7
 80075fe:	1ac2      	subs	r2, r0, r3
 8007600:	d0cc      	beq.n	800759c <_malloc_r+0x20>
 8007602:	1a1b      	subs	r3, r3, r0
 8007604:	50a3      	str	r3, [r4, r2]
 8007606:	e7c9      	b.n	800759c <_malloc_r+0x20>
 8007608:	4622      	mov	r2, r4
 800760a:	6864      	ldr	r4, [r4, #4]
 800760c:	e7cc      	b.n	80075a8 <_malloc_r+0x2c>
 800760e:	1cc4      	adds	r4, r0, #3
 8007610:	f024 0403 	bic.w	r4, r4, #3
 8007614:	42a0      	cmp	r0, r4
 8007616:	d0e3      	beq.n	80075e0 <_malloc_r+0x64>
 8007618:	1a21      	subs	r1, r4, r0
 800761a:	4630      	mov	r0, r6
 800761c:	f000 f960 	bl	80078e0 <_sbrk_r>
 8007620:	3001      	adds	r0, #1
 8007622:	d1dd      	bne.n	80075e0 <_malloc_r+0x64>
 8007624:	e7cf      	b.n	80075c6 <_malloc_r+0x4a>
 8007626:	bf00      	nop
 8007628:	20000204 	.word	0x20000204
 800762c:	20000208 	.word	0x20000208

08007630 <__sfputc_r>:
 8007630:	6893      	ldr	r3, [r2, #8]
 8007632:	b410      	push	{r4}
 8007634:	3b01      	subs	r3, #1
 8007636:	2b00      	cmp	r3, #0
 8007638:	6093      	str	r3, [r2, #8]
 800763a:	da07      	bge.n	800764c <__sfputc_r+0x1c>
 800763c:	6994      	ldr	r4, [r2, #24]
 800763e:	42a3      	cmp	r3, r4
 8007640:	db01      	blt.n	8007646 <__sfputc_r+0x16>
 8007642:	290a      	cmp	r1, #10
 8007644:	d102      	bne.n	800764c <__sfputc_r+0x1c>
 8007646:	bc10      	pop	{r4}
 8007648:	f000 b99e 	b.w	8007988 <__swbuf_r>
 800764c:	6813      	ldr	r3, [r2, #0]
 800764e:	1c58      	adds	r0, r3, #1
 8007650:	6010      	str	r0, [r2, #0]
 8007652:	7019      	strb	r1, [r3, #0]
 8007654:	4608      	mov	r0, r1
 8007656:	bc10      	pop	{r4}
 8007658:	4770      	bx	lr

0800765a <__sfputs_r>:
 800765a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800765c:	4606      	mov	r6, r0
 800765e:	460f      	mov	r7, r1
 8007660:	4614      	mov	r4, r2
 8007662:	18d5      	adds	r5, r2, r3
 8007664:	42ac      	cmp	r4, r5
 8007666:	d101      	bne.n	800766c <__sfputs_r+0x12>
 8007668:	2000      	movs	r0, #0
 800766a:	e007      	b.n	800767c <__sfputs_r+0x22>
 800766c:	463a      	mov	r2, r7
 800766e:	4630      	mov	r0, r6
 8007670:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007674:	f7ff ffdc 	bl	8007630 <__sfputc_r>
 8007678:	1c43      	adds	r3, r0, #1
 800767a:	d1f3      	bne.n	8007664 <__sfputs_r+0xa>
 800767c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007680 <_vfiprintf_r>:
 8007680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007684:	460d      	mov	r5, r1
 8007686:	4614      	mov	r4, r2
 8007688:	4698      	mov	r8, r3
 800768a:	4606      	mov	r6, r0
 800768c:	b09d      	sub	sp, #116	; 0x74
 800768e:	b118      	cbz	r0, 8007698 <_vfiprintf_r+0x18>
 8007690:	6983      	ldr	r3, [r0, #24]
 8007692:	b90b      	cbnz	r3, 8007698 <_vfiprintf_r+0x18>
 8007694:	f7ff fa68 	bl	8006b68 <__sinit>
 8007698:	4b89      	ldr	r3, [pc, #548]	; (80078c0 <_vfiprintf_r+0x240>)
 800769a:	429d      	cmp	r5, r3
 800769c:	d11b      	bne.n	80076d6 <_vfiprintf_r+0x56>
 800769e:	6875      	ldr	r5, [r6, #4]
 80076a0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076a2:	07d9      	lsls	r1, r3, #31
 80076a4:	d405      	bmi.n	80076b2 <_vfiprintf_r+0x32>
 80076a6:	89ab      	ldrh	r3, [r5, #12]
 80076a8:	059a      	lsls	r2, r3, #22
 80076aa:	d402      	bmi.n	80076b2 <_vfiprintf_r+0x32>
 80076ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076ae:	f7ff fafe 	bl	8006cae <__retarget_lock_acquire_recursive>
 80076b2:	89ab      	ldrh	r3, [r5, #12]
 80076b4:	071b      	lsls	r3, r3, #28
 80076b6:	d501      	bpl.n	80076bc <_vfiprintf_r+0x3c>
 80076b8:	692b      	ldr	r3, [r5, #16]
 80076ba:	b9eb      	cbnz	r3, 80076f8 <_vfiprintf_r+0x78>
 80076bc:	4629      	mov	r1, r5
 80076be:	4630      	mov	r0, r6
 80076c0:	f000 f9c6 	bl	8007a50 <__swsetup_r>
 80076c4:	b1c0      	cbz	r0, 80076f8 <_vfiprintf_r+0x78>
 80076c6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80076c8:	07dc      	lsls	r4, r3, #31
 80076ca:	d50e      	bpl.n	80076ea <_vfiprintf_r+0x6a>
 80076cc:	f04f 30ff 	mov.w	r0, #4294967295
 80076d0:	b01d      	add	sp, #116	; 0x74
 80076d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80076d6:	4b7b      	ldr	r3, [pc, #492]	; (80078c4 <_vfiprintf_r+0x244>)
 80076d8:	429d      	cmp	r5, r3
 80076da:	d101      	bne.n	80076e0 <_vfiprintf_r+0x60>
 80076dc:	68b5      	ldr	r5, [r6, #8]
 80076de:	e7df      	b.n	80076a0 <_vfiprintf_r+0x20>
 80076e0:	4b79      	ldr	r3, [pc, #484]	; (80078c8 <_vfiprintf_r+0x248>)
 80076e2:	429d      	cmp	r5, r3
 80076e4:	bf08      	it	eq
 80076e6:	68f5      	ldreq	r5, [r6, #12]
 80076e8:	e7da      	b.n	80076a0 <_vfiprintf_r+0x20>
 80076ea:	89ab      	ldrh	r3, [r5, #12]
 80076ec:	0598      	lsls	r0, r3, #22
 80076ee:	d4ed      	bmi.n	80076cc <_vfiprintf_r+0x4c>
 80076f0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80076f2:	f7ff fadd 	bl	8006cb0 <__retarget_lock_release_recursive>
 80076f6:	e7e9      	b.n	80076cc <_vfiprintf_r+0x4c>
 80076f8:	2300      	movs	r3, #0
 80076fa:	9309      	str	r3, [sp, #36]	; 0x24
 80076fc:	2320      	movs	r3, #32
 80076fe:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8007702:	2330      	movs	r3, #48	; 0x30
 8007704:	f04f 0901 	mov.w	r9, #1
 8007708:	f8cd 800c 	str.w	r8, [sp, #12]
 800770c:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80078cc <_vfiprintf_r+0x24c>
 8007710:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8007714:	4623      	mov	r3, r4
 8007716:	469a      	mov	sl, r3
 8007718:	f813 2b01 	ldrb.w	r2, [r3], #1
 800771c:	b10a      	cbz	r2, 8007722 <_vfiprintf_r+0xa2>
 800771e:	2a25      	cmp	r2, #37	; 0x25
 8007720:	d1f9      	bne.n	8007716 <_vfiprintf_r+0x96>
 8007722:	ebba 0b04 	subs.w	fp, sl, r4
 8007726:	d00b      	beq.n	8007740 <_vfiprintf_r+0xc0>
 8007728:	465b      	mov	r3, fp
 800772a:	4622      	mov	r2, r4
 800772c:	4629      	mov	r1, r5
 800772e:	4630      	mov	r0, r6
 8007730:	f7ff ff93 	bl	800765a <__sfputs_r>
 8007734:	3001      	adds	r0, #1
 8007736:	f000 80aa 	beq.w	800788e <_vfiprintf_r+0x20e>
 800773a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800773c:	445a      	add	r2, fp
 800773e:	9209      	str	r2, [sp, #36]	; 0x24
 8007740:	f89a 3000 	ldrb.w	r3, [sl]
 8007744:	2b00      	cmp	r3, #0
 8007746:	f000 80a2 	beq.w	800788e <_vfiprintf_r+0x20e>
 800774a:	2300      	movs	r3, #0
 800774c:	f04f 32ff 	mov.w	r2, #4294967295
 8007750:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007754:	f10a 0a01 	add.w	sl, sl, #1
 8007758:	9304      	str	r3, [sp, #16]
 800775a:	9307      	str	r3, [sp, #28]
 800775c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8007760:	931a      	str	r3, [sp, #104]	; 0x68
 8007762:	4654      	mov	r4, sl
 8007764:	2205      	movs	r2, #5
 8007766:	f814 1b01 	ldrb.w	r1, [r4], #1
 800776a:	4858      	ldr	r0, [pc, #352]	; (80078cc <_vfiprintf_r+0x24c>)
 800776c:	f7ff fb0e 	bl	8006d8c <memchr>
 8007770:	9a04      	ldr	r2, [sp, #16]
 8007772:	b9d8      	cbnz	r0, 80077ac <_vfiprintf_r+0x12c>
 8007774:	06d1      	lsls	r1, r2, #27
 8007776:	bf44      	itt	mi
 8007778:	2320      	movmi	r3, #32
 800777a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800777e:	0713      	lsls	r3, r2, #28
 8007780:	bf44      	itt	mi
 8007782:	232b      	movmi	r3, #43	; 0x2b
 8007784:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8007788:	f89a 3000 	ldrb.w	r3, [sl]
 800778c:	2b2a      	cmp	r3, #42	; 0x2a
 800778e:	d015      	beq.n	80077bc <_vfiprintf_r+0x13c>
 8007790:	4654      	mov	r4, sl
 8007792:	2000      	movs	r0, #0
 8007794:	f04f 0c0a 	mov.w	ip, #10
 8007798:	9a07      	ldr	r2, [sp, #28]
 800779a:	4621      	mov	r1, r4
 800779c:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077a0:	3b30      	subs	r3, #48	; 0x30
 80077a2:	2b09      	cmp	r3, #9
 80077a4:	d94e      	bls.n	8007844 <_vfiprintf_r+0x1c4>
 80077a6:	b1b0      	cbz	r0, 80077d6 <_vfiprintf_r+0x156>
 80077a8:	9207      	str	r2, [sp, #28]
 80077aa:	e014      	b.n	80077d6 <_vfiprintf_r+0x156>
 80077ac:	eba0 0308 	sub.w	r3, r0, r8
 80077b0:	fa09 f303 	lsl.w	r3, r9, r3
 80077b4:	4313      	orrs	r3, r2
 80077b6:	46a2      	mov	sl, r4
 80077b8:	9304      	str	r3, [sp, #16]
 80077ba:	e7d2      	b.n	8007762 <_vfiprintf_r+0xe2>
 80077bc:	9b03      	ldr	r3, [sp, #12]
 80077be:	1d19      	adds	r1, r3, #4
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	9103      	str	r1, [sp, #12]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	bfbb      	ittet	lt
 80077c8:	425b      	neglt	r3, r3
 80077ca:	f042 0202 	orrlt.w	r2, r2, #2
 80077ce:	9307      	strge	r3, [sp, #28]
 80077d0:	9307      	strlt	r3, [sp, #28]
 80077d2:	bfb8      	it	lt
 80077d4:	9204      	strlt	r2, [sp, #16]
 80077d6:	7823      	ldrb	r3, [r4, #0]
 80077d8:	2b2e      	cmp	r3, #46	; 0x2e
 80077da:	d10c      	bne.n	80077f6 <_vfiprintf_r+0x176>
 80077dc:	7863      	ldrb	r3, [r4, #1]
 80077de:	2b2a      	cmp	r3, #42	; 0x2a
 80077e0:	d135      	bne.n	800784e <_vfiprintf_r+0x1ce>
 80077e2:	9b03      	ldr	r3, [sp, #12]
 80077e4:	3402      	adds	r4, #2
 80077e6:	1d1a      	adds	r2, r3, #4
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	9203      	str	r2, [sp, #12]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	bfb8      	it	lt
 80077f0:	f04f 33ff 	movlt.w	r3, #4294967295
 80077f4:	9305      	str	r3, [sp, #20]
 80077f6:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80078dc <_vfiprintf_r+0x25c>
 80077fa:	2203      	movs	r2, #3
 80077fc:	4650      	mov	r0, sl
 80077fe:	7821      	ldrb	r1, [r4, #0]
 8007800:	f7ff fac4 	bl	8006d8c <memchr>
 8007804:	b140      	cbz	r0, 8007818 <_vfiprintf_r+0x198>
 8007806:	2340      	movs	r3, #64	; 0x40
 8007808:	eba0 000a 	sub.w	r0, r0, sl
 800780c:	fa03 f000 	lsl.w	r0, r3, r0
 8007810:	9b04      	ldr	r3, [sp, #16]
 8007812:	3401      	adds	r4, #1
 8007814:	4303      	orrs	r3, r0
 8007816:	9304      	str	r3, [sp, #16]
 8007818:	f814 1b01 	ldrb.w	r1, [r4], #1
 800781c:	2206      	movs	r2, #6
 800781e:	482c      	ldr	r0, [pc, #176]	; (80078d0 <_vfiprintf_r+0x250>)
 8007820:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8007824:	f7ff fab2 	bl	8006d8c <memchr>
 8007828:	2800      	cmp	r0, #0
 800782a:	d03f      	beq.n	80078ac <_vfiprintf_r+0x22c>
 800782c:	4b29      	ldr	r3, [pc, #164]	; (80078d4 <_vfiprintf_r+0x254>)
 800782e:	bb1b      	cbnz	r3, 8007878 <_vfiprintf_r+0x1f8>
 8007830:	9b03      	ldr	r3, [sp, #12]
 8007832:	3307      	adds	r3, #7
 8007834:	f023 0307 	bic.w	r3, r3, #7
 8007838:	3308      	adds	r3, #8
 800783a:	9303      	str	r3, [sp, #12]
 800783c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800783e:	443b      	add	r3, r7
 8007840:	9309      	str	r3, [sp, #36]	; 0x24
 8007842:	e767      	b.n	8007714 <_vfiprintf_r+0x94>
 8007844:	460c      	mov	r4, r1
 8007846:	2001      	movs	r0, #1
 8007848:	fb0c 3202 	mla	r2, ip, r2, r3
 800784c:	e7a5      	b.n	800779a <_vfiprintf_r+0x11a>
 800784e:	2300      	movs	r3, #0
 8007850:	f04f 0c0a 	mov.w	ip, #10
 8007854:	4619      	mov	r1, r3
 8007856:	3401      	adds	r4, #1
 8007858:	9305      	str	r3, [sp, #20]
 800785a:	4620      	mov	r0, r4
 800785c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007860:	3a30      	subs	r2, #48	; 0x30
 8007862:	2a09      	cmp	r2, #9
 8007864:	d903      	bls.n	800786e <_vfiprintf_r+0x1ee>
 8007866:	2b00      	cmp	r3, #0
 8007868:	d0c5      	beq.n	80077f6 <_vfiprintf_r+0x176>
 800786a:	9105      	str	r1, [sp, #20]
 800786c:	e7c3      	b.n	80077f6 <_vfiprintf_r+0x176>
 800786e:	4604      	mov	r4, r0
 8007870:	2301      	movs	r3, #1
 8007872:	fb0c 2101 	mla	r1, ip, r1, r2
 8007876:	e7f0      	b.n	800785a <_vfiprintf_r+0x1da>
 8007878:	ab03      	add	r3, sp, #12
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	462a      	mov	r2, r5
 800787e:	4630      	mov	r0, r6
 8007880:	4b15      	ldr	r3, [pc, #84]	; (80078d8 <_vfiprintf_r+0x258>)
 8007882:	a904      	add	r1, sp, #16
 8007884:	f7fd fd38 	bl	80052f8 <_printf_float>
 8007888:	4607      	mov	r7, r0
 800788a:	1c78      	adds	r0, r7, #1
 800788c:	d1d6      	bne.n	800783c <_vfiprintf_r+0x1bc>
 800788e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8007890:	07d9      	lsls	r1, r3, #31
 8007892:	d405      	bmi.n	80078a0 <_vfiprintf_r+0x220>
 8007894:	89ab      	ldrh	r3, [r5, #12]
 8007896:	059a      	lsls	r2, r3, #22
 8007898:	d402      	bmi.n	80078a0 <_vfiprintf_r+0x220>
 800789a:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800789c:	f7ff fa08 	bl	8006cb0 <__retarget_lock_release_recursive>
 80078a0:	89ab      	ldrh	r3, [r5, #12]
 80078a2:	065b      	lsls	r3, r3, #25
 80078a4:	f53f af12 	bmi.w	80076cc <_vfiprintf_r+0x4c>
 80078a8:	9809      	ldr	r0, [sp, #36]	; 0x24
 80078aa:	e711      	b.n	80076d0 <_vfiprintf_r+0x50>
 80078ac:	ab03      	add	r3, sp, #12
 80078ae:	9300      	str	r3, [sp, #0]
 80078b0:	462a      	mov	r2, r5
 80078b2:	4630      	mov	r0, r6
 80078b4:	4b08      	ldr	r3, [pc, #32]	; (80078d8 <_vfiprintf_r+0x258>)
 80078b6:	a904      	add	r1, sp, #16
 80078b8:	f7fd ffba 	bl	8005830 <_printf_i>
 80078bc:	e7e4      	b.n	8007888 <_vfiprintf_r+0x208>
 80078be:	bf00      	nop
 80078c0:	08007e78 	.word	0x08007e78
 80078c4:	08007e98 	.word	0x08007e98
 80078c8:	08007e58 	.word	0x08007e58
 80078cc:	08008014 	.word	0x08008014
 80078d0:	0800801e 	.word	0x0800801e
 80078d4:	080052f9 	.word	0x080052f9
 80078d8:	0800765b 	.word	0x0800765b
 80078dc:	0800801a 	.word	0x0800801a

080078e0 <_sbrk_r>:
 80078e0:	b538      	push	{r3, r4, r5, lr}
 80078e2:	2300      	movs	r3, #0
 80078e4:	4d05      	ldr	r5, [pc, #20]	; (80078fc <_sbrk_r+0x1c>)
 80078e6:	4604      	mov	r4, r0
 80078e8:	4608      	mov	r0, r1
 80078ea:	602b      	str	r3, [r5, #0]
 80078ec:	f7fa fbd0 	bl	8002090 <_sbrk>
 80078f0:	1c43      	adds	r3, r0, #1
 80078f2:	d102      	bne.n	80078fa <_sbrk_r+0x1a>
 80078f4:	682b      	ldr	r3, [r5, #0]
 80078f6:	b103      	cbz	r3, 80078fa <_sbrk_r+0x1a>
 80078f8:	6023      	str	r3, [r4, #0]
 80078fa:	bd38      	pop	{r3, r4, r5, pc}
 80078fc:	200003e0 	.word	0x200003e0

08007900 <__sread>:
 8007900:	b510      	push	{r4, lr}
 8007902:	460c      	mov	r4, r1
 8007904:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007908:	f000 f9a2 	bl	8007c50 <_read_r>
 800790c:	2800      	cmp	r0, #0
 800790e:	bfab      	itete	ge
 8007910:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007912:	89a3      	ldrhlt	r3, [r4, #12]
 8007914:	181b      	addge	r3, r3, r0
 8007916:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800791a:	bfac      	ite	ge
 800791c:	6563      	strge	r3, [r4, #84]	; 0x54
 800791e:	81a3      	strhlt	r3, [r4, #12]
 8007920:	bd10      	pop	{r4, pc}

08007922 <__swrite>:
 8007922:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007926:	461f      	mov	r7, r3
 8007928:	898b      	ldrh	r3, [r1, #12]
 800792a:	4605      	mov	r5, r0
 800792c:	05db      	lsls	r3, r3, #23
 800792e:	460c      	mov	r4, r1
 8007930:	4616      	mov	r6, r2
 8007932:	d505      	bpl.n	8007940 <__swrite+0x1e>
 8007934:	2302      	movs	r3, #2
 8007936:	2200      	movs	r2, #0
 8007938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800793c:	f000 f958 	bl	8007bf0 <_lseek_r>
 8007940:	89a3      	ldrh	r3, [r4, #12]
 8007942:	4632      	mov	r2, r6
 8007944:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007948:	81a3      	strh	r3, [r4, #12]
 800794a:	4628      	mov	r0, r5
 800794c:	463b      	mov	r3, r7
 800794e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007952:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007956:	f000 b869 	b.w	8007a2c <_write_r>

0800795a <__sseek>:
 800795a:	b510      	push	{r4, lr}
 800795c:	460c      	mov	r4, r1
 800795e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007962:	f000 f945 	bl	8007bf0 <_lseek_r>
 8007966:	1c43      	adds	r3, r0, #1
 8007968:	89a3      	ldrh	r3, [r4, #12]
 800796a:	bf15      	itete	ne
 800796c:	6560      	strne	r0, [r4, #84]	; 0x54
 800796e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8007972:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8007976:	81a3      	strheq	r3, [r4, #12]
 8007978:	bf18      	it	ne
 800797a:	81a3      	strhne	r3, [r4, #12]
 800797c:	bd10      	pop	{r4, pc}

0800797e <__sclose>:
 800797e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007982:	f000 b8f1 	b.w	8007b68 <_close_r>
	...

08007988 <__swbuf_r>:
 8007988:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800798a:	460e      	mov	r6, r1
 800798c:	4614      	mov	r4, r2
 800798e:	4605      	mov	r5, r0
 8007990:	b118      	cbz	r0, 800799a <__swbuf_r+0x12>
 8007992:	6983      	ldr	r3, [r0, #24]
 8007994:	b90b      	cbnz	r3, 800799a <__swbuf_r+0x12>
 8007996:	f7ff f8e7 	bl	8006b68 <__sinit>
 800799a:	4b21      	ldr	r3, [pc, #132]	; (8007a20 <__swbuf_r+0x98>)
 800799c:	429c      	cmp	r4, r3
 800799e:	d12b      	bne.n	80079f8 <__swbuf_r+0x70>
 80079a0:	686c      	ldr	r4, [r5, #4]
 80079a2:	69a3      	ldr	r3, [r4, #24]
 80079a4:	60a3      	str	r3, [r4, #8]
 80079a6:	89a3      	ldrh	r3, [r4, #12]
 80079a8:	071a      	lsls	r2, r3, #28
 80079aa:	d52f      	bpl.n	8007a0c <__swbuf_r+0x84>
 80079ac:	6923      	ldr	r3, [r4, #16]
 80079ae:	b36b      	cbz	r3, 8007a0c <__swbuf_r+0x84>
 80079b0:	6923      	ldr	r3, [r4, #16]
 80079b2:	6820      	ldr	r0, [r4, #0]
 80079b4:	b2f6      	uxtb	r6, r6
 80079b6:	1ac0      	subs	r0, r0, r3
 80079b8:	6963      	ldr	r3, [r4, #20]
 80079ba:	4637      	mov	r7, r6
 80079bc:	4283      	cmp	r3, r0
 80079be:	dc04      	bgt.n	80079ca <__swbuf_r+0x42>
 80079c0:	4621      	mov	r1, r4
 80079c2:	4628      	mov	r0, r5
 80079c4:	f7ff f83c 	bl	8006a40 <_fflush_r>
 80079c8:	bb30      	cbnz	r0, 8007a18 <__swbuf_r+0x90>
 80079ca:	68a3      	ldr	r3, [r4, #8]
 80079cc:	3001      	adds	r0, #1
 80079ce:	3b01      	subs	r3, #1
 80079d0:	60a3      	str	r3, [r4, #8]
 80079d2:	6823      	ldr	r3, [r4, #0]
 80079d4:	1c5a      	adds	r2, r3, #1
 80079d6:	6022      	str	r2, [r4, #0]
 80079d8:	701e      	strb	r6, [r3, #0]
 80079da:	6963      	ldr	r3, [r4, #20]
 80079dc:	4283      	cmp	r3, r0
 80079de:	d004      	beq.n	80079ea <__swbuf_r+0x62>
 80079e0:	89a3      	ldrh	r3, [r4, #12]
 80079e2:	07db      	lsls	r3, r3, #31
 80079e4:	d506      	bpl.n	80079f4 <__swbuf_r+0x6c>
 80079e6:	2e0a      	cmp	r6, #10
 80079e8:	d104      	bne.n	80079f4 <__swbuf_r+0x6c>
 80079ea:	4621      	mov	r1, r4
 80079ec:	4628      	mov	r0, r5
 80079ee:	f7ff f827 	bl	8006a40 <_fflush_r>
 80079f2:	b988      	cbnz	r0, 8007a18 <__swbuf_r+0x90>
 80079f4:	4638      	mov	r0, r7
 80079f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80079f8:	4b0a      	ldr	r3, [pc, #40]	; (8007a24 <__swbuf_r+0x9c>)
 80079fa:	429c      	cmp	r4, r3
 80079fc:	d101      	bne.n	8007a02 <__swbuf_r+0x7a>
 80079fe:	68ac      	ldr	r4, [r5, #8]
 8007a00:	e7cf      	b.n	80079a2 <__swbuf_r+0x1a>
 8007a02:	4b09      	ldr	r3, [pc, #36]	; (8007a28 <__swbuf_r+0xa0>)
 8007a04:	429c      	cmp	r4, r3
 8007a06:	bf08      	it	eq
 8007a08:	68ec      	ldreq	r4, [r5, #12]
 8007a0a:	e7ca      	b.n	80079a2 <__swbuf_r+0x1a>
 8007a0c:	4621      	mov	r1, r4
 8007a0e:	4628      	mov	r0, r5
 8007a10:	f000 f81e 	bl	8007a50 <__swsetup_r>
 8007a14:	2800      	cmp	r0, #0
 8007a16:	d0cb      	beq.n	80079b0 <__swbuf_r+0x28>
 8007a18:	f04f 37ff 	mov.w	r7, #4294967295
 8007a1c:	e7ea      	b.n	80079f4 <__swbuf_r+0x6c>
 8007a1e:	bf00      	nop
 8007a20:	08007e78 	.word	0x08007e78
 8007a24:	08007e98 	.word	0x08007e98
 8007a28:	08007e58 	.word	0x08007e58

08007a2c <_write_r>:
 8007a2c:	b538      	push	{r3, r4, r5, lr}
 8007a2e:	4604      	mov	r4, r0
 8007a30:	4608      	mov	r0, r1
 8007a32:	4611      	mov	r1, r2
 8007a34:	2200      	movs	r2, #0
 8007a36:	4d05      	ldr	r5, [pc, #20]	; (8007a4c <_write_r+0x20>)
 8007a38:	602a      	str	r2, [r5, #0]
 8007a3a:	461a      	mov	r2, r3
 8007a3c:	f7fa f9be 	bl	8001dbc <_write>
 8007a40:	1c43      	adds	r3, r0, #1
 8007a42:	d102      	bne.n	8007a4a <_write_r+0x1e>
 8007a44:	682b      	ldr	r3, [r5, #0]
 8007a46:	b103      	cbz	r3, 8007a4a <_write_r+0x1e>
 8007a48:	6023      	str	r3, [r4, #0]
 8007a4a:	bd38      	pop	{r3, r4, r5, pc}
 8007a4c:	200003e0 	.word	0x200003e0

08007a50 <__swsetup_r>:
 8007a50:	4b32      	ldr	r3, [pc, #200]	; (8007b1c <__swsetup_r+0xcc>)
 8007a52:	b570      	push	{r4, r5, r6, lr}
 8007a54:	681d      	ldr	r5, [r3, #0]
 8007a56:	4606      	mov	r6, r0
 8007a58:	460c      	mov	r4, r1
 8007a5a:	b125      	cbz	r5, 8007a66 <__swsetup_r+0x16>
 8007a5c:	69ab      	ldr	r3, [r5, #24]
 8007a5e:	b913      	cbnz	r3, 8007a66 <__swsetup_r+0x16>
 8007a60:	4628      	mov	r0, r5
 8007a62:	f7ff f881 	bl	8006b68 <__sinit>
 8007a66:	4b2e      	ldr	r3, [pc, #184]	; (8007b20 <__swsetup_r+0xd0>)
 8007a68:	429c      	cmp	r4, r3
 8007a6a:	d10f      	bne.n	8007a8c <__swsetup_r+0x3c>
 8007a6c:	686c      	ldr	r4, [r5, #4]
 8007a6e:	89a3      	ldrh	r3, [r4, #12]
 8007a70:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007a74:	0719      	lsls	r1, r3, #28
 8007a76:	d42c      	bmi.n	8007ad2 <__swsetup_r+0x82>
 8007a78:	06dd      	lsls	r5, r3, #27
 8007a7a:	d411      	bmi.n	8007aa0 <__swsetup_r+0x50>
 8007a7c:	2309      	movs	r3, #9
 8007a7e:	6033      	str	r3, [r6, #0]
 8007a80:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8007a84:	f04f 30ff 	mov.w	r0, #4294967295
 8007a88:	81a3      	strh	r3, [r4, #12]
 8007a8a:	e03e      	b.n	8007b0a <__swsetup_r+0xba>
 8007a8c:	4b25      	ldr	r3, [pc, #148]	; (8007b24 <__swsetup_r+0xd4>)
 8007a8e:	429c      	cmp	r4, r3
 8007a90:	d101      	bne.n	8007a96 <__swsetup_r+0x46>
 8007a92:	68ac      	ldr	r4, [r5, #8]
 8007a94:	e7eb      	b.n	8007a6e <__swsetup_r+0x1e>
 8007a96:	4b24      	ldr	r3, [pc, #144]	; (8007b28 <__swsetup_r+0xd8>)
 8007a98:	429c      	cmp	r4, r3
 8007a9a:	bf08      	it	eq
 8007a9c:	68ec      	ldreq	r4, [r5, #12]
 8007a9e:	e7e6      	b.n	8007a6e <__swsetup_r+0x1e>
 8007aa0:	0758      	lsls	r0, r3, #29
 8007aa2:	d512      	bpl.n	8007aca <__swsetup_r+0x7a>
 8007aa4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007aa6:	b141      	cbz	r1, 8007aba <__swsetup_r+0x6a>
 8007aa8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007aac:	4299      	cmp	r1, r3
 8007aae:	d002      	beq.n	8007ab6 <__swsetup_r+0x66>
 8007ab0:	4630      	mov	r0, r6
 8007ab2:	f7ff fd17 	bl	80074e4 <_free_r>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	6363      	str	r3, [r4, #52]	; 0x34
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007ac0:	81a3      	strh	r3, [r4, #12]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	6063      	str	r3, [r4, #4]
 8007ac6:	6923      	ldr	r3, [r4, #16]
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	f043 0308 	orr.w	r3, r3, #8
 8007ad0:	81a3      	strh	r3, [r4, #12]
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	b94b      	cbnz	r3, 8007aea <__swsetup_r+0x9a>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007adc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ae0:	d003      	beq.n	8007aea <__swsetup_r+0x9a>
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	4630      	mov	r0, r6
 8007ae6:	f7ff f909 	bl	8006cfc <__smakebuf_r>
 8007aea:	89a0      	ldrh	r0, [r4, #12]
 8007aec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007af0:	f010 0301 	ands.w	r3, r0, #1
 8007af4:	d00a      	beq.n	8007b0c <__swsetup_r+0xbc>
 8007af6:	2300      	movs	r3, #0
 8007af8:	60a3      	str	r3, [r4, #8]
 8007afa:	6963      	ldr	r3, [r4, #20]
 8007afc:	425b      	negs	r3, r3
 8007afe:	61a3      	str	r3, [r4, #24]
 8007b00:	6923      	ldr	r3, [r4, #16]
 8007b02:	b943      	cbnz	r3, 8007b16 <__swsetup_r+0xc6>
 8007b04:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8007b08:	d1ba      	bne.n	8007a80 <__swsetup_r+0x30>
 8007b0a:	bd70      	pop	{r4, r5, r6, pc}
 8007b0c:	0781      	lsls	r1, r0, #30
 8007b0e:	bf58      	it	pl
 8007b10:	6963      	ldrpl	r3, [r4, #20]
 8007b12:	60a3      	str	r3, [r4, #8]
 8007b14:	e7f4      	b.n	8007b00 <__swsetup_r+0xb0>
 8007b16:	2000      	movs	r0, #0
 8007b18:	e7f7      	b.n	8007b0a <__swsetup_r+0xba>
 8007b1a:	bf00      	nop
 8007b1c:	2000000c 	.word	0x2000000c
 8007b20:	08007e78 	.word	0x08007e78
 8007b24:	08007e98 	.word	0x08007e98
 8007b28:	08007e58 	.word	0x08007e58

08007b2c <__assert_func>:
 8007b2c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8007b2e:	4614      	mov	r4, r2
 8007b30:	461a      	mov	r2, r3
 8007b32:	4b09      	ldr	r3, [pc, #36]	; (8007b58 <__assert_func+0x2c>)
 8007b34:	4605      	mov	r5, r0
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	68d8      	ldr	r0, [r3, #12]
 8007b3a:	b14c      	cbz	r4, 8007b50 <__assert_func+0x24>
 8007b3c:	4b07      	ldr	r3, [pc, #28]	; (8007b5c <__assert_func+0x30>)
 8007b3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8007b42:	9100      	str	r1, [sp, #0]
 8007b44:	462b      	mov	r3, r5
 8007b46:	4906      	ldr	r1, [pc, #24]	; (8007b60 <__assert_func+0x34>)
 8007b48:	f000 f81e 	bl	8007b88 <fiprintf>
 8007b4c:	f000 f89f 	bl	8007c8e <abort>
 8007b50:	4b04      	ldr	r3, [pc, #16]	; (8007b64 <__assert_func+0x38>)
 8007b52:	461c      	mov	r4, r3
 8007b54:	e7f3      	b.n	8007b3e <__assert_func+0x12>
 8007b56:	bf00      	nop
 8007b58:	2000000c 	.word	0x2000000c
 8007b5c:	08008025 	.word	0x08008025
 8007b60:	08008032 	.word	0x08008032
 8007b64:	08008060 	.word	0x08008060

08007b68 <_close_r>:
 8007b68:	b538      	push	{r3, r4, r5, lr}
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	4d05      	ldr	r5, [pc, #20]	; (8007b84 <_close_r+0x1c>)
 8007b6e:	4604      	mov	r4, r0
 8007b70:	4608      	mov	r0, r1
 8007b72:	602b      	str	r3, [r5, #0]
 8007b74:	f7fa f94e 	bl	8001e14 <_close>
 8007b78:	1c43      	adds	r3, r0, #1
 8007b7a:	d102      	bne.n	8007b82 <_close_r+0x1a>
 8007b7c:	682b      	ldr	r3, [r5, #0]
 8007b7e:	b103      	cbz	r3, 8007b82 <_close_r+0x1a>
 8007b80:	6023      	str	r3, [r4, #0]
 8007b82:	bd38      	pop	{r3, r4, r5, pc}
 8007b84:	200003e0 	.word	0x200003e0

08007b88 <fiprintf>:
 8007b88:	b40e      	push	{r1, r2, r3}
 8007b8a:	b503      	push	{r0, r1, lr}
 8007b8c:	4601      	mov	r1, r0
 8007b8e:	ab03      	add	r3, sp, #12
 8007b90:	4805      	ldr	r0, [pc, #20]	; (8007ba8 <fiprintf+0x20>)
 8007b92:	f853 2b04 	ldr.w	r2, [r3], #4
 8007b96:	6800      	ldr	r0, [r0, #0]
 8007b98:	9301      	str	r3, [sp, #4]
 8007b9a:	f7ff fd71 	bl	8007680 <_vfiprintf_r>
 8007b9e:	b002      	add	sp, #8
 8007ba0:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ba4:	b003      	add	sp, #12
 8007ba6:	4770      	bx	lr
 8007ba8:	2000000c 	.word	0x2000000c

08007bac <_fstat_r>:
 8007bac:	b538      	push	{r3, r4, r5, lr}
 8007bae:	2300      	movs	r3, #0
 8007bb0:	4d06      	ldr	r5, [pc, #24]	; (8007bcc <_fstat_r+0x20>)
 8007bb2:	4604      	mov	r4, r0
 8007bb4:	4608      	mov	r0, r1
 8007bb6:	4611      	mov	r1, r2
 8007bb8:	602b      	str	r3, [r5, #0]
 8007bba:	f7fa f97b 	bl	8001eb4 <_fstat>
 8007bbe:	1c43      	adds	r3, r0, #1
 8007bc0:	d102      	bne.n	8007bc8 <_fstat_r+0x1c>
 8007bc2:	682b      	ldr	r3, [r5, #0]
 8007bc4:	b103      	cbz	r3, 8007bc8 <_fstat_r+0x1c>
 8007bc6:	6023      	str	r3, [r4, #0]
 8007bc8:	bd38      	pop	{r3, r4, r5, pc}
 8007bca:	bf00      	nop
 8007bcc:	200003e0 	.word	0x200003e0

08007bd0 <_isatty_r>:
 8007bd0:	b538      	push	{r3, r4, r5, lr}
 8007bd2:	2300      	movs	r3, #0
 8007bd4:	4d05      	ldr	r5, [pc, #20]	; (8007bec <_isatty_r+0x1c>)
 8007bd6:	4604      	mov	r4, r0
 8007bd8:	4608      	mov	r0, r1
 8007bda:	602b      	str	r3, [r5, #0]
 8007bdc:	f7fa f8d8 	bl	8001d90 <_isatty>
 8007be0:	1c43      	adds	r3, r0, #1
 8007be2:	d102      	bne.n	8007bea <_isatty_r+0x1a>
 8007be4:	682b      	ldr	r3, [r5, #0]
 8007be6:	b103      	cbz	r3, 8007bea <_isatty_r+0x1a>
 8007be8:	6023      	str	r3, [r4, #0]
 8007bea:	bd38      	pop	{r3, r4, r5, pc}
 8007bec:	200003e0 	.word	0x200003e0

08007bf0 <_lseek_r>:
 8007bf0:	b538      	push	{r3, r4, r5, lr}
 8007bf2:	4604      	mov	r4, r0
 8007bf4:	4608      	mov	r0, r1
 8007bf6:	4611      	mov	r1, r2
 8007bf8:	2200      	movs	r2, #0
 8007bfa:	4d05      	ldr	r5, [pc, #20]	; (8007c10 <_lseek_r+0x20>)
 8007bfc:	602a      	str	r2, [r5, #0]
 8007bfe:	461a      	mov	r2, r3
 8007c00:	f7fa f91f 	bl	8001e42 <_lseek>
 8007c04:	1c43      	adds	r3, r0, #1
 8007c06:	d102      	bne.n	8007c0e <_lseek_r+0x1e>
 8007c08:	682b      	ldr	r3, [r5, #0]
 8007c0a:	b103      	cbz	r3, 8007c0e <_lseek_r+0x1e>
 8007c0c:	6023      	str	r3, [r4, #0]
 8007c0e:	bd38      	pop	{r3, r4, r5, pc}
 8007c10:	200003e0 	.word	0x200003e0

08007c14 <__ascii_mbtowc>:
 8007c14:	b082      	sub	sp, #8
 8007c16:	b901      	cbnz	r1, 8007c1a <__ascii_mbtowc+0x6>
 8007c18:	a901      	add	r1, sp, #4
 8007c1a:	b142      	cbz	r2, 8007c2e <__ascii_mbtowc+0x1a>
 8007c1c:	b14b      	cbz	r3, 8007c32 <__ascii_mbtowc+0x1e>
 8007c1e:	7813      	ldrb	r3, [r2, #0]
 8007c20:	600b      	str	r3, [r1, #0]
 8007c22:	7812      	ldrb	r2, [r2, #0]
 8007c24:	1e10      	subs	r0, r2, #0
 8007c26:	bf18      	it	ne
 8007c28:	2001      	movne	r0, #1
 8007c2a:	b002      	add	sp, #8
 8007c2c:	4770      	bx	lr
 8007c2e:	4610      	mov	r0, r2
 8007c30:	e7fb      	b.n	8007c2a <__ascii_mbtowc+0x16>
 8007c32:	f06f 0001 	mvn.w	r0, #1
 8007c36:	e7f8      	b.n	8007c2a <__ascii_mbtowc+0x16>

08007c38 <__malloc_lock>:
 8007c38:	4801      	ldr	r0, [pc, #4]	; (8007c40 <__malloc_lock+0x8>)
 8007c3a:	f7ff b838 	b.w	8006cae <__retarget_lock_acquire_recursive>
 8007c3e:	bf00      	nop
 8007c40:	200003d8 	.word	0x200003d8

08007c44 <__malloc_unlock>:
 8007c44:	4801      	ldr	r0, [pc, #4]	; (8007c4c <__malloc_unlock+0x8>)
 8007c46:	f7ff b833 	b.w	8006cb0 <__retarget_lock_release_recursive>
 8007c4a:	bf00      	nop
 8007c4c:	200003d8 	.word	0x200003d8

08007c50 <_read_r>:
 8007c50:	b538      	push	{r3, r4, r5, lr}
 8007c52:	4604      	mov	r4, r0
 8007c54:	4608      	mov	r0, r1
 8007c56:	4611      	mov	r1, r2
 8007c58:	2200      	movs	r2, #0
 8007c5a:	4d05      	ldr	r5, [pc, #20]	; (8007c70 <_read_r+0x20>)
 8007c5c:	602a      	str	r2, [r5, #0]
 8007c5e:	461a      	mov	r2, r3
 8007c60:	f7fa f900 	bl	8001e64 <_read>
 8007c64:	1c43      	adds	r3, r0, #1
 8007c66:	d102      	bne.n	8007c6e <_read_r+0x1e>
 8007c68:	682b      	ldr	r3, [r5, #0]
 8007c6a:	b103      	cbz	r3, 8007c6e <_read_r+0x1e>
 8007c6c:	6023      	str	r3, [r4, #0]
 8007c6e:	bd38      	pop	{r3, r4, r5, pc}
 8007c70:	200003e0 	.word	0x200003e0

08007c74 <__ascii_wctomb>:
 8007c74:	4603      	mov	r3, r0
 8007c76:	4608      	mov	r0, r1
 8007c78:	b141      	cbz	r1, 8007c8c <__ascii_wctomb+0x18>
 8007c7a:	2aff      	cmp	r2, #255	; 0xff
 8007c7c:	d904      	bls.n	8007c88 <__ascii_wctomb+0x14>
 8007c7e:	228a      	movs	r2, #138	; 0x8a
 8007c80:	f04f 30ff 	mov.w	r0, #4294967295
 8007c84:	601a      	str	r2, [r3, #0]
 8007c86:	4770      	bx	lr
 8007c88:	2001      	movs	r0, #1
 8007c8a:	700a      	strb	r2, [r1, #0]
 8007c8c:	4770      	bx	lr

08007c8e <abort>:
 8007c8e:	2006      	movs	r0, #6
 8007c90:	b508      	push	{r3, lr}
 8007c92:	f000 f82b 	bl	8007cec <raise>
 8007c96:	2001      	movs	r0, #1
 8007c98:	f000 f854 	bl	8007d44 <_exit>

08007c9c <_raise_r>:
 8007c9c:	291f      	cmp	r1, #31
 8007c9e:	b538      	push	{r3, r4, r5, lr}
 8007ca0:	4604      	mov	r4, r0
 8007ca2:	460d      	mov	r5, r1
 8007ca4:	d904      	bls.n	8007cb0 <_raise_r+0x14>
 8007ca6:	2316      	movs	r3, #22
 8007ca8:	6003      	str	r3, [r0, #0]
 8007caa:	f04f 30ff 	mov.w	r0, #4294967295
 8007cae:	bd38      	pop	{r3, r4, r5, pc}
 8007cb0:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007cb2:	b112      	cbz	r2, 8007cba <_raise_r+0x1e>
 8007cb4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007cb8:	b94b      	cbnz	r3, 8007cce <_raise_r+0x32>
 8007cba:	4620      	mov	r0, r4
 8007cbc:	f000 f830 	bl	8007d20 <_getpid_r>
 8007cc0:	462a      	mov	r2, r5
 8007cc2:	4601      	mov	r1, r0
 8007cc4:	4620      	mov	r0, r4
 8007cc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007cca:	f000 b817 	b.w	8007cfc <_kill_r>
 8007cce:	2b01      	cmp	r3, #1
 8007cd0:	d00a      	beq.n	8007ce8 <_raise_r+0x4c>
 8007cd2:	1c59      	adds	r1, r3, #1
 8007cd4:	d103      	bne.n	8007cde <_raise_r+0x42>
 8007cd6:	2316      	movs	r3, #22
 8007cd8:	6003      	str	r3, [r0, #0]
 8007cda:	2001      	movs	r0, #1
 8007cdc:	e7e7      	b.n	8007cae <_raise_r+0x12>
 8007cde:	2400      	movs	r4, #0
 8007ce0:	4628      	mov	r0, r5
 8007ce2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8007ce6:	4798      	blx	r3
 8007ce8:	2000      	movs	r0, #0
 8007cea:	e7e0      	b.n	8007cae <_raise_r+0x12>

08007cec <raise>:
 8007cec:	4b02      	ldr	r3, [pc, #8]	; (8007cf8 <raise+0xc>)
 8007cee:	4601      	mov	r1, r0
 8007cf0:	6818      	ldr	r0, [r3, #0]
 8007cf2:	f7ff bfd3 	b.w	8007c9c <_raise_r>
 8007cf6:	bf00      	nop
 8007cf8:	2000000c 	.word	0x2000000c

08007cfc <_kill_r>:
 8007cfc:	b538      	push	{r3, r4, r5, lr}
 8007cfe:	2300      	movs	r3, #0
 8007d00:	4d06      	ldr	r5, [pc, #24]	; (8007d1c <_kill_r+0x20>)
 8007d02:	4604      	mov	r4, r0
 8007d04:	4608      	mov	r0, r1
 8007d06:	4611      	mov	r1, r2
 8007d08:	602b      	str	r3, [r5, #0]
 8007d0a:	f000 f813 	bl	8007d34 <_kill>
 8007d0e:	1c43      	adds	r3, r0, #1
 8007d10:	d102      	bne.n	8007d18 <_kill_r+0x1c>
 8007d12:	682b      	ldr	r3, [r5, #0]
 8007d14:	b103      	cbz	r3, 8007d18 <_kill_r+0x1c>
 8007d16:	6023      	str	r3, [r4, #0]
 8007d18:	bd38      	pop	{r3, r4, r5, pc}
 8007d1a:	bf00      	nop
 8007d1c:	200003e0 	.word	0x200003e0

08007d20 <_getpid_r>:
 8007d20:	f000 b800 	b.w	8007d24 <_getpid>

08007d24 <_getpid>:
 8007d24:	2258      	movs	r2, #88	; 0x58
 8007d26:	4b02      	ldr	r3, [pc, #8]	; (8007d30 <_getpid+0xc>)
 8007d28:	f04f 30ff 	mov.w	r0, #4294967295
 8007d2c:	601a      	str	r2, [r3, #0]
 8007d2e:	4770      	bx	lr
 8007d30:	200003e0 	.word	0x200003e0

08007d34 <_kill>:
 8007d34:	2258      	movs	r2, #88	; 0x58
 8007d36:	4b02      	ldr	r3, [pc, #8]	; (8007d40 <_kill+0xc>)
 8007d38:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3c:	601a      	str	r2, [r3, #0]
 8007d3e:	4770      	bx	lr
 8007d40:	200003e0 	.word	0x200003e0

08007d44 <_exit>:
 8007d44:	e7fe      	b.n	8007d44 <_exit>
	...

08007d48 <_init>:
 8007d48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d4a:	bf00      	nop
 8007d4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d4e:	bc08      	pop	{r3}
 8007d50:	469e      	mov	lr, r3
 8007d52:	4770      	bx	lr

08007d54 <_fini>:
 8007d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d56:	bf00      	nop
 8007d58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d5a:	bc08      	pop	{r3}
 8007d5c:	469e      	mov	lr, r3
 8007d5e:	4770      	bx	lr
